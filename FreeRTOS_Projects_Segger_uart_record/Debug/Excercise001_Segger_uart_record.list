
Excercise001_Segger_uart_record.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b30  08006b30  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b38  08006b38  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014490  2000001c  08006b5c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144ac  08006b5c  000244ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b85b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003821  00000000  00000000  0003b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  000404e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f06  00000000  00000000  00041760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e1d  00000000  00000000  00066666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df250  00000000  00000000  0007e483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  0015d728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a0c 	.word	0x08006a0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006a0c 	.word	0x08006a0c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014404 	.word	0x20014404

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 f9ee 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f814 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f884 	bl	80006b4 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */


  // Enable the CCNT counter
  DWT_CTRL |= (1 << 0);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <main+0x2c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <main+0x2c>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <main+0x30>)
 80005ba:	f004 fb51 	bl	8004c60 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 80005be:	f004 f981 	bl	80048c4 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start(); this is now done in segger_art.c



  //Start the freeRTOS scheduler
  vTaskStartScheduler(); //only return is problem launching scheduler (eg. memory insufficient)
 80005c2:	f002 fca7 	bl	8002f14 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0x2a>
 80005c8:	e0001000 	.word	0xe0001000
 80005cc:	0007a120 	.word	0x0007a120

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 fa0c 	bl	80069fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <SystemClock_Config+0xdc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <SystemClock_Config+0xe0>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000644:	23b4      	movs	r3, #180	; 0xb4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ff9d 	bl	8001598 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 f8a8 	bl	80007b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000668:	f000 fc5c 	bl	8000f24 <HAL_PWREx_EnableOverDrive>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000672:	f000 f8a1 	bl	80007b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fc95 	bl	8000fc4 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a0:	f000 f88a 	bl	80007b8 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a25      	ldr	r2, [pc, #148]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	4812      	ldr	r0, [pc, #72]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000740:	f000 fbd6 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_GPIO_Init+0xd8>)
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_GPIO_Init+0xdc>)
 800075a:	f000 fa35 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000776:	f000 fa27 	bl	8000bc8 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000
 800078c:	10210000 	.word	0x10210000
 8000790:	40020800 	.word	0x40020800

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 f90d 	bl	80009c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40001000 	.word	0x40001000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2036      	movs	r0, #54	; 0x36
 800082a:	f000 f9a3 	bl	8000b74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800082e:	2036      	movs	r0, #54	; 0x36
 8000830:	f000 f9bc 	bl	8000bac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <HAL_InitTick+0xa4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <HAL_InitTick+0xa4>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_InitTick+0xa4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fcb8 	bl	80011d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000860:	f000 fca2 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8000864:	4603      	mov	r3, r0
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <HAL_InitTick+0xa8>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	3b01      	subs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_InitTick+0xac>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_InitTick+0xb0>)
 800087c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_InitTick+0xac>)
 8000880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_InitTick+0xac>)
 8000888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_InitTick+0xac>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_InitTick+0xac>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_InitTick+0xac>)
 800089a:	f001 f91b 	bl	8001ad4 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_InitTick+0xac>)
 80008a6:	f001 f96f 	bl	8001b88 <HAL_TIM_Base_Start_IT>
 80008aa:	4603      	mov	r3, r0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	20014378 	.word	0x20014378
 80008c4:	40001000 	.word	0x40001000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM6_DAC_IRQHandler+0x10>)
 80008fa:	f001 f9b5 	bl	8001c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20014378 	.word	0x20014378

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000932:	490e      	ldr	r1, [pc, #56]	; (800096c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000948:	4c0b      	ldr	r4, [pc, #44]	; (8000978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000956:	f7ff ffd7 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f006 f80f 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fe1d 	bl	800059c <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000970:	08006b40 	.word	0x08006b40
  ldr r2, =_sbss
 8000974:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000978:	200144ac 	.word	0x200144ac

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f8d8 	bl	8000b5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff ff30 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff ff06 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	200143c0 	.word	0x200143c0

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	200143c0 	.word	0x200143c0

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff4c 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b86:	f7ff ff61 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	68b9      	ldr	r1, [r7, #8]
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f7ff ffb1 	bl	8000af8 <NVIC_EncodePriority>
 8000b96:	4602      	mov	r2, r0
 8000b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff80 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff54 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e165      	b.n	8000eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be4:	2201      	movs	r2, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 8154 	bne.w	8000eaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d005      	beq.n	8000c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d130      	bne.n	8000c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	f003 0201 	and.w	r2, r3, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d017      	beq.n	8000cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0203 	and.w	r2, r3, #3
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80ae 	beq.w	8000eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6a:	4a58      	ldr	r2, [pc, #352]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4f      	ldr	r2, [pc, #316]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d025      	beq.n	8000de2 <HAL_GPIO_Init+0x21a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4e      	ldr	r2, [pc, #312]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01f      	beq.n	8000dde <HAL_GPIO_Init+0x216>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x212>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_GPIO_Init+0x314>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x20e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4b      	ldr	r2, [pc, #300]	; (8000ee0 <HAL_GPIO_Init+0x318>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x20a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x31c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x206>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x202>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e00c      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dca:	2307      	movs	r3, #7
 8000dcc:	e00a      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dce:	2305      	movs	r3, #5
 8000dd0:	e008      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x21c>
 8000de2:	2300      	movs	r3, #0
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f67f ae96 	bls.w	8000be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40021400 	.word	0x40021400
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f50:	f7ff fd4c 	bl	80009ec <HAL_GetTick>
 8000f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f56:	e009      	b.n	8000f6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f58:	f7ff fd48 	bl	80009ec <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f66:	d901      	bls.n	8000f6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e01f      	b.n	8000fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d1ee      	bne.n	8000f58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f80:	f7ff fd34 	bl	80009ec <HAL_GetTick>
 8000f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f86:	e009      	b.n	8000f9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f88:	f7ff fd30 	bl	80009ec <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f96:	d901      	bls.n	8000f9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e007      	b.n	8000fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fa8:	d1ee      	bne.n	8000f88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	420e0040 	.word	0x420e0040
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	420e0044 	.word	0x420e0044

08000fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0cc      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d90c      	bls.n	8001000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	4b65      	ldr	r3, [pc, #404]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d001      	beq.n	8001000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0b8      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001018:	4b59      	ldr	r3, [pc, #356]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001030:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800103a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800103c:	4b50      	ldr	r3, [pc, #320]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	494d      	ldr	r1, [pc, #308]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	4313      	orrs	r3, r2
 800104c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d044      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d119      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e07f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d003      	beq.n	8001082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800107e:	2b03      	cmp	r3, #3
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e06f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e067      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f023 0203 	bic.w	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4934      	ldr	r1, [pc, #208]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fc9a 	bl	80009ec <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fc96 	bl	80009ec <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e04f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 020c 	and.w	r2, r3, #12
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1eb      	bne.n	80010bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d20c      	bcs.n	800110c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e032      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4916      	ldr	r1, [pc, #88]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	4313      	orrs	r3, r2
 8001128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	490e      	ldr	r1, [pc, #56]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	4313      	orrs	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800114a:	f000 f873 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 800114e:	4602      	mov	r2, r0
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	490a      	ldr	r1, [pc, #40]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	5ccb      	ldrb	r3, [r1, r3]
 800115e:	fa22 f303 	lsr.w	r3, r2, r3
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fb52 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00
 8001180:	40023800 	.word	0x40023800
 8001184:	08006b00 	.word	0x08006b00
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011ac:	f7ff fff0 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	0a9b      	lsrs	r3, r3, #10
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	4903      	ldr	r1, [pc, #12]	; (80011cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80011be:	5ccb      	ldrb	r3, [r1, r3]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	08006b10 	.word	0x08006b10

080011d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	220f      	movs	r2, #15
 80011de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_RCC_GetClockConfig+0x5c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_RCC_GetClockConfig+0x5c>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_RCC_GetClockConfig+0x5c>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_RCC_GetClockConfig+0x5c>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_RCC_GetClockConfig+0x60>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 020f 	and.w	r2, r3, #15
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001250:	4bce      	ldr	r3, [pc, #824]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	2b0c      	cmp	r3, #12
 800125a:	f200 818d 	bhi.w	8001578 <HAL_RCC_GetSysClockFreq+0x344>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <HAL_RCC_GetSysClockFreq+0x30>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	08001299 	.word	0x08001299
 8001268:	08001579 	.word	0x08001579
 800126c:	08001579 	.word	0x08001579
 8001270:	08001579 	.word	0x08001579
 8001274:	0800129f 	.word	0x0800129f
 8001278:	08001579 	.word	0x08001579
 800127c:	08001579 	.word	0x08001579
 8001280:	08001579 	.word	0x08001579
 8001284:	080012a5 	.word	0x080012a5
 8001288:	08001579 	.word	0x08001579
 800128c:	08001579 	.word	0x08001579
 8001290:	08001579 	.word	0x08001579
 8001294:	08001419 	.word	0x08001419
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001298:	4bbd      	ldr	r3, [pc, #756]	; (8001590 <HAL_RCC_GetSysClockFreq+0x35c>)
 800129a:	61bb      	str	r3, [r7, #24]
       break;
 800129c:	e16f      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800129e:	4bbd      	ldr	r3, [pc, #756]	; (8001594 <HAL_RCC_GetSysClockFreq+0x360>)
 80012a0:	61bb      	str	r3, [r7, #24]
      break;
 80012a2:	e16c      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a4:	4bb9      	ldr	r3, [pc, #740]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ae:	4bb7      	ldr	r3, [pc, #732]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d053      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ba:	4bb4      	ldr	r3, [pc, #720]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	461a      	mov	r2, r3
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	ea02 0400 	and.w	r4, r2, r0
 80012d2:	603c      	str	r4, [r7, #0]
 80012d4:	400b      	ands	r3, r1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	014b      	lsls	r3, r1, #5
 80012ea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012ee:	0142      	lsls	r2, r0, #5
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	4623      	mov	r3, r4
 80012f6:	1ac0      	subs	r0, r0, r3
 80012f8:	462b      	mov	r3, r5
 80012fa:	eb61 0103 	sbc.w	r1, r1, r3
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	018b      	lsls	r3, r1, #6
 8001308:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800130c:	0182      	lsls	r2, r0, #6
 800130e:	1a12      	subs	r2, r2, r0
 8001310:	eb63 0301 	sbc.w	r3, r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	f04f 0100 	mov.w	r1, #0
 800131c:	00d9      	lsls	r1, r3, #3
 800131e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001322:	00d0      	lsls	r0, r2, #3
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4621      	mov	r1, r4
 800132a:	1852      	adds	r2, r2, r1
 800132c:	4629      	mov	r1, r5
 800132e:	eb43 0101 	adc.w	r1, r3, r1
 8001332:	460b      	mov	r3, r1
 8001334:	f04f 0000 	mov.w	r0, #0
 8001338:	f04f 0100 	mov.w	r1, #0
 800133c:	0259      	lsls	r1, r3, #9
 800133e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001342:	0250      	lsls	r0, r2, #9
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	461a      	mov	r2, r3
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	f7fe ffa6 	bl	80002a4 <__aeabi_uldivmod>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4613      	mov	r3, r2
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	e04c      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001362:	4b8a      	ldr	r3, [pc, #552]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	099b      	lsrs	r3, r3, #6
 8001368:	461a      	mov	r2, r3
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	ea02 0a00 	and.w	sl, r2, r0
 800137a:	ea03 0b01 	and.w	fp, r3, r1
 800137e:	4650      	mov	r0, sl
 8001380:	4659      	mov	r1, fp
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	014b      	lsls	r3, r1, #5
 800138c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001390:	0142      	lsls	r2, r0, #5
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	ebb0 000a 	subs.w	r0, r0, sl
 800139a:	eb61 010b 	sbc.w	r1, r1, fp
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	018b      	lsls	r3, r1, #6
 80013a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013ac:	0182      	lsls	r2, r0, #6
 80013ae:	1a12      	subs	r2, r2, r0
 80013b0:	eb63 0301 	sbc.w	r3, r3, r1
 80013b4:	f04f 0000 	mov.w	r0, #0
 80013b8:	f04f 0100 	mov.w	r1, #0
 80013bc:	00d9      	lsls	r1, r3, #3
 80013be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013c2:	00d0      	lsls	r0, r2, #3
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	eb12 020a 	adds.w	r2, r2, sl
 80013cc:	eb43 030b 	adc.w	r3, r3, fp
 80013d0:	f04f 0000 	mov.w	r0, #0
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	0299      	lsls	r1, r3, #10
 80013da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80013de:	0290      	lsls	r0, r2, #10
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	f7fe ff58 	bl	80002a4 <__aeabi_uldivmod>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4613      	mov	r3, r2
 80013fa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013fc:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	61bb      	str	r3, [r7, #24]
      break;
 8001416:	e0b2      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001418:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001420:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d04d      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	461a      	mov	r2, r3
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	ea02 0800 	and.w	r8, r2, r0
 8001446:	ea03 0901 	and.w	r9, r3, r1
 800144a:	4640      	mov	r0, r8
 800144c:	4649      	mov	r1, r9
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	014b      	lsls	r3, r1, #5
 8001458:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800145c:	0142      	lsls	r2, r0, #5
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	ebb0 0008 	subs.w	r0, r0, r8
 8001466:	eb61 0109 	sbc.w	r1, r1, r9
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	018b      	lsls	r3, r1, #6
 8001474:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001478:	0182      	lsls	r2, r0, #6
 800147a:	1a12      	subs	r2, r2, r0
 800147c:	eb63 0301 	sbc.w	r3, r3, r1
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	00d9      	lsls	r1, r3, #3
 800148a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800148e:	00d0      	lsls	r0, r2, #3
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	eb12 0208 	adds.w	r2, r2, r8
 8001498:	eb43 0309 	adc.w	r3, r3, r9
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	0259      	lsls	r1, r3, #9
 80014a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014aa:	0250      	lsls	r0, r2, #9
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f7fe fef2 	bl	80002a4 <__aeabi_uldivmod>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4613      	mov	r3, r2
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	e04a      	b.n	8001560 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	461a      	mov	r2, r3
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	ea02 0400 	and.w	r4, r2, r0
 80014e2:	ea03 0501 	and.w	r5, r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	014b      	lsls	r3, r1, #5
 80014f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014f8:	0142      	lsls	r2, r0, #5
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	1b00      	subs	r0, r0, r4
 8001500:	eb61 0105 	sbc.w	r1, r1, r5
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	018b      	lsls	r3, r1, #6
 800150e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001512:	0182      	lsls	r2, r0, #6
 8001514:	1a12      	subs	r2, r2, r0
 8001516:	eb63 0301 	sbc.w	r3, r3, r1
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	00d9      	lsls	r1, r3, #3
 8001524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001528:	00d0      	lsls	r0, r2, #3
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	1912      	adds	r2, r2, r4
 8001530:	eb45 0303 	adc.w	r3, r5, r3
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	0299      	lsls	r1, r3, #10
 800153e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001542:	0290      	lsls	r0, r2, #10
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	461a      	mov	r2, r3
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f7fe fea6 	bl	80002a4 <__aeabi_uldivmod>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4613      	mov	r3, r2
 800155e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_RCC_GetSysClockFreq+0x358>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	0f1b      	lsrs	r3, r3, #28
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	61bb      	str	r3, [r7, #24]
      break;
 8001576:	e002      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetSysClockFreq+0x35c>)
 800157a:	61bb      	str	r3, [r7, #24]
      break;
 800157c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800157e:	69bb      	ldr	r3, [r7, #24]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	00f42400 	.word	0x00f42400
 8001594:	007a1200 	.word	0x007a1200

08001598 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e28d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8083 	beq.w	80016be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d019      	beq.n	80015f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015c4:	4b91      	ldr	r3, [pc, #580]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d0:	4b8e      	ldr	r3, [pc, #568]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015dc:	d00c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05b      	beq.n	80016bc <HAL_RCC_OscConfig+0x124>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d157      	bne.n	80016bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e25a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x90>
 800161a:	4b7c      	ldr	r3, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7b      	ldr	r2, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xcc>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0xb4>
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a72      	ldr	r2, [pc, #456]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xcc>
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6e      	ldr	r2, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6b      	ldr	r2, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff f9be 	bl	80009ec <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff f9ba 	bl	80009ec <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e21f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xdc>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff f9aa 	bl	80009ec <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f9a6 	bl	80009ec <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e20b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x104>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06f      	beq.n	80017aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d017      	beq.n	8001706 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x186>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1d3      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f953 	bl	80009ec <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff f94f 	bl	80009ec <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1b4      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f932 	bl	80009ec <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff f92e 	bl	80009ec <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e193      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f912 	bl	80009ec <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff f90e 	bl	80009ec <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e173      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x234>
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff f8fb 	bl	80009ec <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e00e      	b.n	8001818 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff f8f7 	bl	80009ec <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d907      	bls.n	8001818 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e15c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000
 8001814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ea      	bne.n	80017fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8097 	beq.w	8001960 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b83      	ldr	r3, [pc, #524]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a7e      	ldr	r2, [pc, #504]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a75      	ldr	r2, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff f8b7 	bl	80009ec <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff f8b3 	bl	80009ec <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e118      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x31e>
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a65      	ldr	r2, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x358>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x340>
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a60      	ldr	r2, [pc, #384]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x358>
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a59      	ldr	r2, [pc, #356]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f878 	bl	80009ec <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff f874 	bl	80009ec <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0d7      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0ee      	beq.n	8001900 <HAL_RCC_OscConfig+0x368>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff f862 	bl	80009ec <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff f85e 	bl	80009ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0c1      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ee      	bne.n	800192c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80ad 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d060      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d145      	bne.n	8001a0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_RCC_OscConfig+0x4b4>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f832 	bl	80009ec <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f82e 	bl	80009ec <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e093      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	071b      	lsls	r3, r3, #28
 80019d6:	491b      	ldr	r1, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x4b4>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff f803 	bl	80009ec <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7fe ffff 	bl	80009ec <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e064      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x452>
 8001a08:	e05c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x4b4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7fe ffec 	bl	80009ec <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe ffe8 	bl	80009ec <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x480>
 8001a36:	e045      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e040      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_RCC_OscConfig+0x538>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d030      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d129      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d122      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d119      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e041      	b.n	8001b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f839 	bl	8001b72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 f9d8 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d001      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e04e      	b.n	8001c3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d01d      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d111      	bne.n	8001c2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d010      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2a:	e007      	b.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40000800 	.word	0x40000800
 8001c58:	40000c00 	.word	0x40000c00
 8001c5c:	40010400 	.word	0x40010400
 8001c60:	40014000 	.word	0x40014000
 8001c64:	40001800 	.word	0x40001800

08001c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0202 	mvn.w	r2, #2
 8001c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8ee 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8e0 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f1 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0204 	mvn.w	r2, #4
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8c4 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8b6 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8c7 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0208 	mvn.w	r2, #8
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f89a 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f88c 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f89d 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0210 	mvn.w	r2, #16
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2208      	movs	r2, #8
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f870 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f862 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f873 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0201 	mvn.w	r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fcd4 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b80      	cmp	r3, #128	; 0x80
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b80      	cmp	r3, #128	; 0x80
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f902 	bl	800201c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	2b40      	cmp	r3, #64	; 0x40
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f838 	bl	8001eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0220 	mvn.w	r2, #32
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8cc 	bl	8002008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d00f      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <TIM_Base_SetConfig+0x118>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <TIM_Base_SetConfig+0x11c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <TIM_Base_SetConfig+0x120>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d027      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <TIM_Base_SetConfig+0x118>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d023      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <TIM_Base_SetConfig+0x11c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <TIM_Base_SetConfig+0x120>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d017      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <TIM_Base_SetConfig+0x128>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <TIM_Base_SetConfig+0x12c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <TIM_Base_SetConfig+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <TIM_Base_SetConfig+0x134>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <TIM_Base_SetConfig+0x138>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <TIM_Base_SetConfig+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_Base_SetConfig+0xf8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800
 8001ffc:	40001800 	.word	0x40001800
 8002000:	40001c00 	.word	0x40001c00
 8002004:	40002000 	.word	0x40002000

08002008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f103 0208 	add.w	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0208 	add.w	r2, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0208 	add.w	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d103      	bne.n	80020f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e00c      	b.n	800210c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3308      	adds	r3, #8
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e002      	b.n	8002100 <vListInsert+0x2e>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	429a      	cmp	r2, r3
 800210a:	d2f6      	bcs.n	80020fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6852      	ldr	r2, [r2, #4]
 8002164:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d103      	bne.n	8002178 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80021c2:	f002 f849 	bl	8004258 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	441a      	add	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	3b01      	subs	r3, #1
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	441a      	add	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22ff      	movs	r2, #255	; 0xff
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d114      	bne.n	8002242 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01a      	beq.n	8002256 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3310      	adds	r3, #16
 8002224:	4618      	mov	r0, r3
 8002226:	f001 f91f 	bl	8003468 <xTaskRemoveFromEventList>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <xQueueGenericReset+0xcc>)
 8002232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	e009      	b.n	8002256 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3310      	adds	r3, #16
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fef2 	bl	8002030 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3324      	adds	r3, #36	; 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff feed 	bl	8002030 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002256:	f002 f82f 	bl	80042b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <xQueueGenericCreate+0x2a>
        __asm volatile
 800227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	61bb      	str	r3, [r7, #24]
    }
 800228e:	bf00      	nop
 8002290:	e7fe      	b.n	8002290 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <xQueueGenericCreate+0x48>
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d101      	bne.n	80022b4 <xQueueGenericCreate+0x4c>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <xQueueGenericCreate+0x4e>
 80022b4:	2300      	movs	r3, #0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <xQueueGenericCreate+0x68>
        __asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	617b      	str	r3, [r7, #20]
    }
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022d6:	d90a      	bls.n	80022ee <xQueueGenericCreate+0x86>
        __asm volatile
 80022d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	613b      	str	r3, [r7, #16]
    }
 80022ea:	bf00      	nop
 80022ec:	e7fe      	b.n	80022ec <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	3350      	adds	r3, #80	; 0x50
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 f8da 	bl	80044ac <pvPortMalloc>
 80022f8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3350      	adds	r3, #80	; 0x50
 8002308:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800230a:	79fa      	ldrb	r2, [r7, #7]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f805 	bl	8002326 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800231c:	6a3b      	ldr	r3, [r7, #32]
    }
 800231e:	4618      	mov	r0, r3
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e002      	b.n	8002348 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002354:	2101      	movs	r1, #1
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	f7ff ff1e 	bl	8002198 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	2073      	movs	r0, #115	; 0x73
 800236c:	f003 fc02 	bl	8005b74 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	; 0x40
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002386:	2300      	movs	r3, #0
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericSend+0x32>
        __asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <xQueueGenericSend+0x40>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <xQueueGenericSend+0x44>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <xQueueGenericSend+0x46>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <xQueueGenericSend+0x60>
        __asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <xQueueGenericSend+0x6e>
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <xQueueGenericSend+0x72>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueGenericSend+0x74>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueGenericSend+0x8e>
        __asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	623b      	str	r3, [r7, #32]
    }
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002406:	f001 f9cf 	bl	80037a8 <xTaskGetSchedulerState>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <xQueueGenericSend+0x9e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueGenericSend+0xa2>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueGenericSend+0xa4>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericSend+0xbe>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61fb      	str	r3, [r7, #28]
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002436:	f001 ff0f 	bl	8004258 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <xQueueGenericSend+0xd4>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d136      	bne.n	80024ba <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	4618      	mov	r0, r3
 8002450:	f004 f91e 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	460b      	mov	r3, r1
 800245e:	4601      	mov	r1, r0
 8002460:	205a      	movs	r0, #90	; 0x5a
 8002462:	f003 fbfd 	bl	8005c60 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800246c:	f000 fa78 	bl	8002960 <prvCopyDataToQueue>
 8002470:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	3324      	adds	r3, #36	; 0x24
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fff2 	bl	8003468 <xTaskRemoveFromEventList>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <xQueueGenericSend+0x248>)
 800248c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	e00a      	b.n	80024b2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <xQueueGenericSend+0x248>)
 80024a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80024b2:	f001 ff01 	bl	80042b8 <vPortExitCritical>
                return pdPASS;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07d      	b.n	80025b6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d110      	bne.n	80024e2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024c0:	f001 fefa 	bl	80042b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f8e2 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	460b      	mov	r3, r1
 80024d6:	4601      	mov	r1, r0
 80024d8:	205a      	movs	r0, #90	; 0x5a
 80024da:	f003 fbc1 	bl	8005c60 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	e069      	b.n	80025b6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 f821 	bl	8003534 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024f6:	f001 fedf 	bl	80042b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024fa:	f000 fd6d 	bl	8002fd8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024fe:	f001 feab 	bl	8004258 <vPortEnterCritical>
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002508:	b25b      	sxtb	r3, r3
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d103      	bne.n	8002518 <xQueueGenericSend+0x1a0>
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800251e:	b25b      	sxtb	r3, r3
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d103      	bne.n	800252e <xQueueGenericSend+0x1b6>
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800252e:	f001 fec3 	bl	80042b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002532:	1d3a      	adds	r2, r7, #4
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f001 f810 	bl	8003560 <xTaskCheckForTimeOut>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d124      	bne.n	8002590 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002548:	f000 fb02 	bl	8002b50 <prvIsQueueFull>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	3310      	adds	r3, #16
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 ff32 	bl	80033c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002562:	f000 fa8d 	bl	8002a80 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002566:	f000 fd45 	bl	8002ff4 <xTaskResumeAll>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f af62 	bne.w	8002436 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <xQueueGenericSend+0x248>)
 8002574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	e758      	b.n	8002436 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002586:	f000 fa7b 	bl	8002a80 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800258a:	f000 fd33 	bl	8002ff4 <xTaskResumeAll>
 800258e:	e752      	b.n	8002436 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002592:	f000 fa75 	bl	8002a80 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002596:	f000 fd2d 	bl	8002ff4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f877 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	460b      	mov	r3, r1
 80025ac:	4601      	mov	r1, r0
 80025ae:	205a      	movs	r0, #90	; 0x5a
 80025b0:	f003 fb56 	bl	8005c60 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80025b4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3738      	adds	r7, #56	; 0x38
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b090      	sub	sp, #64	; 0x40
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <xQueueGenericSendFromISR+0x3c>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <xQueueGenericSendFromISR+0x40>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <xQueueGenericSendFromISR+0x42>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800261c:	bf00      	nop
 800261e:	e7fe      	b.n	800261e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d103      	bne.n	800262e <xQueueGenericSendFromISR+0x6a>
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <xQueueGenericSendFromISR+0x6e>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <xQueueGenericSendFromISR+0x70>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	623b      	str	r3, [r7, #32]
    }
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800264e:	f001 feed 	bl	800442c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002652:	f3ef 8211 	mrs	r2, BASEPRI
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	61fa      	str	r2, [r7, #28]
 8002668:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800266a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <xQueueGenericSendFromISR+0xbc>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d148      	bne.n	8002712 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fffc 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 8002698:	4601      	mov	r1, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	2060      	movs	r0, #96	; 0x60
 80026a0:	f003 fa0e 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026aa:	f000 f959 	bl	8002960 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d112      	bne.n	80026de <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d025      	beq.n	800270c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	3324      	adds	r3, #36	; 0x24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fecf 	bl	8003468 <xTaskRemoveFromEventList>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01d      	beq.n	800270c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01a      	beq.n	800270c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e016      	b.n	800270c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80026de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026e2:	2b7f      	cmp	r3, #127	; 0x7f
 80026e4:	d10a      	bne.n	80026fc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	617b      	str	r3, [r7, #20]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002700:	3301      	adds	r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	b25a      	sxtb	r2, r3
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800270c:	2301      	movs	r3, #1
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002710:	e00b      	b.n	800272a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	4618      	mov	r0, r3
 8002716:	f003 ffbb 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 800271a:	4601      	mov	r1, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	2060      	movs	r0, #96	; 0x60
 8002722:	f003 f9cd 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002726:	2300      	movs	r3, #0
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002734:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002738:	4618      	mov	r0, r3
 800273a:	3740      	adds	r7, #64	; 0x40
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b08f      	sub	sp, #60	; 0x3c
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <xQueueReceive+0x30>
        __asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	623b      	str	r3, [r7, #32]
    }
 800276c:	bf00      	nop
 800276e:	e7fe      	b.n	800276e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <xQueueReceive+0x3e>
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <xQueueReceive+0x42>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <xQueueReceive+0x44>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <xQueueReceive+0x5e>
        __asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	61fb      	str	r3, [r7, #28]
    }
 800279a:	bf00      	nop
 800279c:	e7fe      	b.n	800279c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800279e:	f001 f803 	bl	80037a8 <xTaskGetSchedulerState>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <xQueueReceive+0x6e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <xQueueReceive+0x72>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <xQueueReceive+0x74>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueReceive+0x8e>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	61bb      	str	r3, [r7, #24]
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027ce:	f001 fd43 	bl	8004258 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02f      	beq.n	800283e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e2:	f000 f927 	bl	8002a34 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 ff51 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 80027ee:	4604      	mov	r4, r0
 80027f0:	2000      	movs	r0, #0
 80027f2:	f003 ff4d 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 80027f6:	4602      	mov	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2101      	movs	r1, #1
 80027fc:	9100      	str	r1, [sp, #0]
 80027fe:	4621      	mov	r1, r4
 8002800:	205c      	movs	r0, #92	; 0x5c
 8002802:	f003 fa2d 	bl	8005c60 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00f      	beq.n	8002836 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	3310      	adds	r3, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fe24 	bl	8003468 <xTaskRemoveFromEventList>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <xQueueReceive+0x21c>)
 8002828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002836:	f001 fd3f 	bl	80042b8 <vPortExitCritical>
                return pdPASS;
 800283a:	2301      	movs	r3, #1
 800283c:	e08a      	b.n	8002954 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d113      	bne.n	800286c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002844:	f001 fd38 	bl	80042b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	4618      	mov	r0, r3
 800284c:	f003 ff20 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 8002850:	4604      	mov	r4, r0
 8002852:	2000      	movs	r0, #0
 8002854:	f003 ff1c 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2101      	movs	r1, #1
 800285e:	9100      	str	r1, [sp, #0]
 8002860:	4621      	mov	r1, r4
 8002862:	205c      	movs	r0, #92	; 0x5c
 8002864:	f003 f9fc 	bl	8005c60 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002868:	2300      	movs	r3, #0
 800286a:	e073      	b.n	8002954 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fe5c 	bl	8003534 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002880:	f001 fd1a 	bl	80042b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002884:	f000 fba8 	bl	8002fd8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002888:	f001 fce6 	bl	8004258 <vPortEnterCritical>
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <xQueueReceive+0x162>
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d103      	bne.n	80028b8 <xQueueReceive+0x178>
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b8:	f001 fcfe 	bl	80042b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028bc:	1d3a      	adds	r2, r7, #4
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fe4b 	bl	8003560 <xTaskCheckForTimeOut>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d124      	bne.n	800291a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d2:	f000 f927 	bl	8002b24 <prvIsQueueEmpty>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d018      	beq.n	800290e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fd6d 	bl	80033c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ec:	f000 f8c8 	bl	8002a80 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028f0:	f000 fb80 	bl	8002ff4 <xTaskResumeAll>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f af69 	bne.w	80027ce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <xQueueReceive+0x21c>)
 80028fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	e75f      	b.n	80027ce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800290e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002910:	f000 f8b6 	bl	8002a80 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002914:	f000 fb6e 	bl	8002ff4 <xTaskResumeAll>
 8002918:	e759      	b.n	80027ce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800291a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291c:	f000 f8b0 	bl	8002a80 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002920:	f000 fb68 	bl	8002ff4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002926:	f000 f8fd 	bl	8002b24 <prvIsQueueEmpty>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f43f af4e 	beq.w	80027ce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	4618      	mov	r0, r3
 8002936:	f003 feab 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 800293a:	4604      	mov	r4, r0
 800293c:	2000      	movs	r0, #0
 800293e:	f003 fea7 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2101      	movs	r1, #1
 8002948:	9100      	str	r1, [sp, #0]
 800294a:	4621      	mov	r1, r4
 800294c:	205c      	movs	r0, #92	; 0x5c
 800294e:	f003 f987 	bl	8005c60 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002952:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002954:	4618      	mov	r0, r3
 8002956:	3734      	adds	r7, #52	; 0x34
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d14d      	bne.n	8002a22 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ff2a 	bl	80037e4 <xTaskPriorityDisinherit>
 8002990:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e043      	b.n	8002a22 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d119      	bne.n	80029d4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6858      	ldr	r0, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	461a      	mov	r2, r3
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	f004 f818 	bl	80069e0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	441a      	add	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d32b      	bcc.n	8002a22 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e026      	b.n	8002a22 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68d8      	ldr	r0, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	461a      	mov	r2, r3
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	f003 fffe 	bl	80069e0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	425b      	negs	r3, r3
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	425b      	negs	r3, r3
 8002a0a:	441a      	add	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d105      	bne.n	8002a22 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a2a:	697b      	ldr	r3, [r7, #20]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d018      	beq.n	8002a78 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	441a      	add	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d303      	bcc.n	8002a68 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68d9      	ldr	r1, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	461a      	mov	r2, r3
 8002a72:	6838      	ldr	r0, [r7, #0]
 8002a74:	f003 ffb4 	bl	80069e0 <memcpy>
    }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a88:	f001 fbe6 	bl	8004258 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a92:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a94:	e011      	b.n	8002aba <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d012      	beq.n	8002ac4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3324      	adds	r3, #36	; 0x24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fce0 	bl	8003468 <xTaskRemoveFromEventList>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002aae:	f000 fdbd 	bl	800362c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	dce9      	bgt.n	8002a96 <prvUnlockQueue+0x16>
 8002ac2:	e000      	b.n	8002ac6 <prvUnlockQueue+0x46>
                        break;
 8002ac4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ace:	f001 fbf3 	bl	80042b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ad2:	f001 fbc1 	bl	8004258 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002adc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ade:	e011      	b.n	8002b04 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3310      	adds	r3, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fcbb 	bl	8003468 <xTaskRemoveFromEventList>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002af8:	f000 fd98 	bl	800362c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dce9      	bgt.n	8002ae0 <prvUnlockQueue+0x60>
 8002b0c:	e000      	b.n	8002b10 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b0e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b18:	f001 fbce 	bl	80042b8 <vPortExitCritical>
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b2c:	f001 fb94 	bl	8004258 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e001      	b.n	8002b42 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b42:	f001 fbb9 	bl	80042b8 <vPortExitCritical>

    return xReturn;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b58:	f001 fb7e 	bl	8004258 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d102      	bne.n	8002b6e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e001      	b.n	8002b72 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b72:	f001 fba1 	bl	80042b8 <vPortExitCritical>

    return xReturn;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	e01e      	b.n	8002bce <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <vQueueAddToRegistry+0x60>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d115      	bne.n	8002bc8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b9c:	4910      	ldr	r1, [pc, #64]	; (8002be0 <vQueueAddToRegistry+0x60>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <vQueueAddToRegistry+0x60>)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fd6b 	bl	8006690 <SEGGER_SYSVIEW_ShrinkId>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2071      	movs	r0, #113	; 0x71
 8002bc2:	f002 ff7d 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002bc6:	e006      	b.n	8002bd6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b07      	cmp	r3, #7
 8002bd2:	d9dd      	bls.n	8002b90 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200143c4 	.word	0x200143c4

08002be4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bf4:	f001 fb30 	bl	8004258 <vPortEnterCritical>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d103      	bne.n	8002c0e <vQueueWaitForMessageRestricted+0x2a>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d103      	bne.n	8002c24 <vQueueWaitForMessageRestricted+0x40>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c24:	f001 fb48 	bl	80042b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3324      	adds	r3, #36	; 0x24
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fbe7 	bl	800340c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff1e 	bl	8002a80 <prvUnlockQueue>
    }
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	; 0x30
 8002c50:	af04      	add	r7, sp, #16
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fc23 	bl	80044ac <pvPortMalloc>
 8002c66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c6e:	2058      	movs	r0, #88	; 0x58
 8002c70:	f001 fc1c 	bl	80044ac <pvPortMalloc>
 8002c74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
 8002c82:	e005      	b.n	8002c90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f001 fcf1 	bl	800466c <vPortFree>
 8002c8a:	e001      	b.n	8002c90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9303      	str	r3, [sp, #12]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	9302      	str	r3, [sp, #8]
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f80e 	bl	8002cce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cb2:	69f8      	ldr	r0, [r7, #28]
 8002cb4:	f000 f8a2 	bl	8002dfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e002      	b.n	8002cc4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
    }
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b088      	sub	sp, #32
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	21a5      	movs	r1, #165	; 0xa5
 8002ce8:	f003 fe88 	bl	80069fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f023 0307 	bic.w	r3, r3, #7
 8002d04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	617b      	str	r3, [r7, #20]
    }
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01f      	beq.n	8002d6c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	e012      	b.n	8002d58 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	7819      	ldrb	r1, [r3, #0]
 8002d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3334      	adds	r3, #52	; 0x34
 8002d42:	460a      	mov	r2, r1
 8002d44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	d9e9      	bls.n	8002d32 <prvInitialiseNewTask+0x64>
 8002d5e:	e000      	b.n	8002d62 <prvInitialiseNewTask+0x94>
            {
                break;
 8002d60:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d6a:	e003      	b.n	8002d74 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d901      	bls.n	8002d7e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d88:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	3304      	adds	r3, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f96b 	bl	8002070 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f966 	bl	8002070 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	f1c3 0205 	rsb	r2, r3, #5
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	3350      	adds	r3, #80	; 0x50
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fe1a 	bl	80069fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	3354      	adds	r3, #84	; 0x54
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fe13 	bl	80069fc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	69b8      	ldr	r0, [r7, #24]
 8002ddc:	f001 f90c 	bl	8003ff8 <pxPortInitialiseStack>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002df2:	bf00      	nop
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e04:	f001 fa28 	bl	8004258 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e08:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <prvAddNewTaskToReadyList+0xfc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <prvAddNewTaskToReadyList+0xfc>)
 8002e10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e12:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <prvAddNewTaskToReadyList+0x100>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e1a:	4a38      	ldr	r2, [pc, #224]	; (8002efc <prvAddNewTaskToReadyList+0x100>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <prvAddNewTaskToReadyList+0xfc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d110      	bne.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e28:	f000 fc24 	bl	8003674 <prvInitialiseTaskLists>
 8002e2c:	e00d      	b.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <prvAddNewTaskToReadyList+0x104>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e36:	4b31      	ldr	r3, [pc, #196]	; (8002efc <prvAddNewTaskToReadyList+0x100>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d802      	bhi.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e44:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <prvAddNewTaskToReadyList+0x100>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <prvAddNewTaskToReadyList+0x108>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <prvAddNewTaskToReadyList+0x108>)
 8002e52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <prvAddNewTaskToReadyList+0x108>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <prvAddNewTaskToReadyList+0x94>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 faed 	bl	8006444 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	461d      	mov	r5, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461c      	mov	r4, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	1ae3      	subs	r3, r4, r3
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	462b      	mov	r3, r5
 8002e8c:	f001 fdb4 	bl	80049f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fb5a 	bl	800654c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <prvAddNewTaskToReadyList+0x10c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <prvAddNewTaskToReadyList+0x10c>)
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <prvAddNewTaskToReadyList+0x110>)
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f7ff f8e2 	bl	800208a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ec6:	f001 f9f7 	bl	80042b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <prvAddNewTaskToReadyList+0x104>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <prvAddNewTaskToReadyList+0x100>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d207      	bcs.n	8002ef0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <prvAddNewTaskToReadyList+0x114>)
 8002ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef8:	20000110 	.word	0x20000110
 8002efc:	20000038 	.word	0x20000038
 8002f00:	2000011c 	.word	0x2000011c
 8002f04:	2000012c 	.word	0x2000012c
 8002f08:	20000118 	.word	0x20000118
 8002f0c:	2000003c 	.word	0x2000003c
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f1a:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <vTaskStartScheduler+0xa4>)
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2300      	movs	r3, #0
 8002f24:	2282      	movs	r2, #130	; 0x82
 8002f26:	4925      	ldr	r1, [pc, #148]	; (8002fbc <vTaskStartScheduler+0xa8>)
 8002f28:	4825      	ldr	r0, [pc, #148]	; (8002fc0 <vTaskStartScheduler+0xac>)
 8002f2a:	f7ff fe8f 	bl	8002c4c <xTaskCreate>
 8002f2e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f36:	f000 fd4d 	bl	80039d4 <xTimerCreateTimerTask>
 8002f3a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d124      	bne.n	8002f8c <vTaskStartScheduler+0x78>
        __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60bb      	str	r3, [r7, #8]
    }
 8002f54:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <vTaskStartScheduler+0xb0>)
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <vTaskStartScheduler+0xb4>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <vTaskStartScheduler+0xb8>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <vTaskStartScheduler+0xbc>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <vTaskStartScheduler+0xa4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d102      	bne.n	8002f7c <vTaskStartScheduler+0x68>
 8002f76:	f003 fa49 	bl	800640c <SEGGER_SYSVIEW_OnIdle>
 8002f7a:	e004      	b.n	8002f86 <vTaskStartScheduler+0x72>
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <vTaskStartScheduler+0xbc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 faa1 	bl	80064c8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f86:	f001 f8c5 	bl	8004114 <xPortStartScheduler>
 8002f8a:	e00e      	b.n	8002faa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d10a      	bne.n	8002faa <vTaskStartScheduler+0x96>
        __asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	607b      	str	r3, [r7, #4]
    }
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <vTaskStartScheduler+0xc0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000134 	.word	0x20000134
 8002fbc:	08006a24 	.word	0x08006a24
 8002fc0:	08003645 	.word	0x08003645
 8002fc4:	20000130 	.word	0x20000130
 8002fc8:	2000011c 	.word	0x2000011c
 8002fcc:	20000114 	.word	0x20000114
 8002fd0:	20000038 	.word	0x20000038
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <vTaskSuspendAll+0x18>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	4a03      	ldr	r2, [pc, #12]	; (8002ff0 <vTaskSuspendAll+0x18>)
 8002fe4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	20000138 	.word	0x20000138

08002ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <xTaskResumeAll+0x11c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <xTaskResumeAll+0x2c>
        __asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	603b      	str	r3, [r7, #0]
    }
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003020:	f001 f91a 	bl	8004258 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <xTaskResumeAll+0x11c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3b01      	subs	r3, #1
 800302a:	4a39      	ldr	r2, [pc, #228]	; (8003110 <xTaskResumeAll+0x11c>)
 800302c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <xTaskResumeAll+0x11c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d165      	bne.n	8003102 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <xTaskResumeAll+0x120>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d061      	beq.n	8003102 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800303e:	e032      	b.n	80030a6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <xTaskResumeAll+0x124>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3318      	adds	r3, #24
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f879 	bl	8002144 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3304      	adds	r3, #4
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff f874 	bl	8002144 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4618      	mov	r0, r3
 8003060:	f003 fa74 	bl	800654c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <xTaskResumeAll+0x128>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	4a2a      	ldr	r2, [pc, #168]	; (800311c <xTaskResumeAll+0x128>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a27      	ldr	r2, [pc, #156]	; (8003120 <xTaskResumeAll+0x12c>)
 8003084:	441a      	add	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3304      	adds	r3, #4
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7fe fffc 	bl	800208a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <xTaskResumeAll+0x130>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <xTaskResumeAll+0x134>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <xTaskResumeAll+0x124>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1c8      	bne.n	8003040 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030b4:	f000 fb5c 	bl	8003770 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <xTaskResumeAll+0x138>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030c4:	f000 f858 	bl	8003178 <xTaskIncrementTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <xTaskResumeAll+0x134>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f1      	bne.n	80030c4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <xTaskResumeAll+0x138>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <xTaskResumeAll+0x134>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <xTaskResumeAll+0x13c>)
 80030f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003102:	f001 f8d9 	bl	80042b8 <vPortExitCritical>

    return xAlreadyYielded;
 8003106:	68bb      	ldr	r3, [r7, #8]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000138 	.word	0x20000138
 8003114:	20000110 	.word	0x20000110
 8003118:	200000d0 	.word	0x200000d0
 800311c:	20000118 	.word	0x20000118
 8003120:	2000003c 	.word	0x2000003c
 8003124:	20000038 	.word	0x20000038
 8003128:	20000124 	.word	0x20000124
 800312c:	20000120 	.word	0x20000120
 8003130:	e000ed04 	.word	0xe000ed04

08003134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <xTaskGetTickCount+0x1c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003140:	687b      	ldr	r3, [r7, #4]
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000114 	.word	0x20000114

08003154 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800315a:	f001 f967 	bl	800442c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <xTaskGetTickCountFromISR+0x20>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003168:	683b      	ldr	r3, [r7, #0]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000114 	.word	0x20000114

08003178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003182:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <xTaskIncrementTick+0x14c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8092 	bne.w	80032b0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800318c:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <xTaskIncrementTick+0x150>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003194:	4a4c      	ldr	r2, [pc, #304]	; (80032c8 <xTaskIncrementTick+0x150>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d120      	bne.n	80031e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a0:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <xTaskIncrementTick+0x154>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	603b      	str	r3, [r7, #0]
    }
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xTaskIncrementTick+0x46>
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <xTaskIncrementTick+0x154>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <xTaskIncrementTick+0x158>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a40      	ldr	r2, [pc, #256]	; (80032cc <xTaskIncrementTick+0x154>)
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <xTaskIncrementTick+0x158>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <xTaskIncrementTick+0x15c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a3e      	ldr	r2, [pc, #248]	; (80032d4 <xTaskIncrementTick+0x15c>)
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	f000 fac7 	bl	8003770 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031e2:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <xTaskIncrementTick+0x160>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d34c      	bcc.n	8003286 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ec:	4b37      	ldr	r3, [pc, #220]	; (80032cc <xTaskIncrementTick+0x154>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f6:	4b38      	ldr	r3, [pc, #224]	; (80032d8 <xTaskIncrementTick+0x160>)
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	601a      	str	r2, [r3, #0]
                    break;
 80031fe:	e042      	b.n	8003286 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <xTaskIncrementTick+0x154>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d203      	bcs.n	8003220 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <xTaskIncrementTick+0x160>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800321e:	e032      	b.n	8003286 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3304      	adds	r3, #4
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe ff8d 	bl	8002144 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3318      	adds	r3, #24
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ff84 	bl	8002144 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 f984 	bl	800654c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <xTaskIncrementTick+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	4a22      	ldr	r2, [pc, #136]	; (80032dc <xTaskIncrementTick+0x164>)
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <xTaskIncrementTick+0x168>)
 8003264:	441a      	add	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3304      	adds	r3, #4
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7fe ff0c 	bl	800208a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <xTaskIncrementTick+0x16c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	429a      	cmp	r2, r3
 800327e:	d3b5      	bcc.n	80031ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003284:	e7b2      	b.n	80031ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <xTaskIncrementTick+0x16c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	4914      	ldr	r1, [pc, #80]	; (80032e0 <xTaskIncrementTick+0x168>)
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d901      	bls.n	80032a2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <xTaskIncrementTick+0x170>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e004      	b.n	80032ba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <xTaskIncrementTick+0x174>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <xTaskIncrementTick+0x174>)
 80032b8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032ba:	697b      	ldr	r3, [r7, #20]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000138 	.word	0x20000138
 80032c8:	20000114 	.word	0x20000114
 80032cc:	200000c8 	.word	0x200000c8
 80032d0:	200000cc 	.word	0x200000cc
 80032d4:	20000128 	.word	0x20000128
 80032d8:	20000130 	.word	0x20000130
 80032dc:	20000118 	.word	0x20000118
 80032e0:	2000003c 	.word	0x2000003c
 80032e4:	20000038 	.word	0x20000038
 80032e8:	20000124 	.word	0x20000124
 80032ec:	20000120 	.word	0x20000120

080032f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <vTaskSwitchContext+0xbc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <vTaskSwitchContext+0xc0>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003304:	e04d      	b.n	80033a2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <vTaskSwitchContext+0xc0>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330c:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <vTaskSwitchContext+0xc4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800331a:	7afb      	ldrb	r3, [r7, #11]
 800331c:	f1c3 031f 	rsb	r3, r3, #31
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	4925      	ldr	r1, [pc, #148]	; (80033b8 <vTaskSwitchContext+0xc8>)
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	607b      	str	r3, [r7, #4]
    }
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <vTaskSwitchContext+0x5a>
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <vTaskSwitchContext+0xc8>)
 8003358:	4413      	add	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3308      	adds	r3, #8
 800336e:	429a      	cmp	r2, r3
 8003370:	d104      	bne.n	800337c <vTaskSwitchContext+0x8c>
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <vTaskSwitchContext+0xcc>)
 8003384:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <vTaskSwitchContext+0xcc>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <vTaskSwitchContext+0xd0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d102      	bne.n	8003398 <vTaskSwitchContext+0xa8>
 8003392:	f003 f83b 	bl	800640c <SEGGER_SYSVIEW_OnIdle>
}
 8003396:	e004      	b.n	80033a2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <vTaskSwitchContext+0xcc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 f893 	bl	80064c8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000138 	.word	0x20000138
 80033b0:	20000124 	.word	0x20000124
 80033b4:	20000118 	.word	0x20000118
 80033b8:	2000003c 	.word	0x2000003c
 80033bc:	20000038 	.word	0x20000038
 80033c0:	20000134 	.word	0x20000134

080033c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	60fb      	str	r3, [r7, #12]
    }
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <vTaskPlaceOnEventList+0x44>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3318      	adds	r3, #24
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fe6d 	bl	80020d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033f8:	2101      	movs	r1, #1
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f000 fa72 	bl	80038e4 <prvAddCurrentTaskToDelayedList>
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000038 	.word	0x20000038

0800340c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	617b      	str	r3, [r7, #20]
    }
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <vTaskPlaceOnEventListRestricted+0x58>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3318      	adds	r3, #24
 800343a:	4619      	mov	r1, r3
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7fe fe24 	bl	800208a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800344e:	2024      	movs	r0, #36	; 0x24
 8003450:	f002 fadc 	bl	8005a0c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68b8      	ldr	r0, [r7, #8]
 8003458:	f000 fa44 	bl	80038e4 <prvAddCurrentTaskToDelayedList>
    }
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000038 	.word	0x20000038

08003468 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	60fb      	str	r3, [r7, #12]
    }
 8003490:	bf00      	nop
 8003492:	e7fe      	b.n	8003492 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	3318      	adds	r3, #24
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fe53 	bl	8002144 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800349e:	4b1f      	ldr	r3, [pc, #124]	; (800351c <xTaskRemoveFromEventList+0xb4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d120      	bne.n	80034e8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fe4a 	bl	8002144 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 f84a 	bl	800654c <SEGGER_SYSVIEW_OnTaskStartReady>
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <xTaskRemoveFromEventList+0xb8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	4a16      	ldr	r2, [pc, #88]	; (8003520 <xTaskRemoveFromEventList+0xb8>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <xTaskRemoveFromEventList+0xbc>)
 80034d8:	441a      	add	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f7fe fdd2 	bl	800208a <vListInsertEnd>
 80034e6:	e005      	b.n	80034f4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	3318      	adds	r3, #24
 80034ec:	4619      	mov	r1, r3
 80034ee:	480e      	ldr	r0, [pc, #56]	; (8003528 <xTaskRemoveFromEventList+0xc0>)
 80034f0:	f7fe fdcb 	bl	800208a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <xTaskRemoveFromEventList+0xc4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d905      	bls.n	800350e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003502:	2301      	movs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <xTaskRemoveFromEventList+0xc8>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e001      	b.n	8003512 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003512:	697b      	ldr	r3, [r7, #20]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000138 	.word	0x20000138
 8003520:	20000118 	.word	0x20000118
 8003524:	2000003c 	.word	0x2000003c
 8003528:	200000d0 	.word	0x200000d0
 800352c:	20000038 	.word	0x20000038
 8003530:	20000124 	.word	0x20000124

08003534 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <vTaskInternalSetTimeOutState+0x24>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <vTaskInternalSetTimeOutState+0x28>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000128 	.word	0x20000128
 800355c:	20000114 	.word	0x20000114

08003560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	613b      	str	r3, [r7, #16]
    }
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60fb      	str	r3, [r7, #12]
    }
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035a2:	f000 fe59 	bl	8004258 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035a6:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <xTaskCheckForTimeOut+0xc4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d102      	bne.n	80035c6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	e026      	b.n	8003614 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <xTaskCheckForTimeOut+0xc8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d00a      	beq.n	80035e8 <xTaskCheckForTimeOut+0x88>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d305      	bcc.n	80035e8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035dc:	2301      	movs	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e015      	b.n	8003614 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20b      	bcs.n	800360a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	1ad2      	subs	r2, r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff98 	bl	8003534 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	e004      	b.n	8003614 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003610:	2301      	movs	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003614:	f000 fe50 	bl	80042b8 <vPortExitCritical>

    return xReturn;
 8003618:	69fb      	ldr	r3, [r7, #28]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000114 	.word	0x20000114
 8003628:	20000128 	.word	0x20000128

0800362c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <vTaskMissedYield+0x14>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000124 	.word	0x20000124

08003644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800364c:	f000 f852 	bl	80036f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <prvIdleTask+0x28>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d9f9      	bls.n	800364c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <prvIdleTask+0x2c>)
 800365a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003668:	e7f0      	b.n	800364c <prvIdleTask+0x8>
 800366a:	bf00      	nop
 800366c:	2000003c 	.word	0x2000003c
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e00c      	b.n	800369a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <prvInitialiseTaskLists+0x60>)
 800368c:	4413      	add	r3, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fcce 	bl	8002030 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d9ef      	bls.n	8003680 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036a0:	480d      	ldr	r0, [pc, #52]	; (80036d8 <prvInitialiseTaskLists+0x64>)
 80036a2:	f7fe fcc5 	bl	8002030 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036a6:	480d      	ldr	r0, [pc, #52]	; (80036dc <prvInitialiseTaskLists+0x68>)
 80036a8:	f7fe fcc2 	bl	8002030 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036ac:	480c      	ldr	r0, [pc, #48]	; (80036e0 <prvInitialiseTaskLists+0x6c>)
 80036ae:	f7fe fcbf 	bl	8002030 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036b2:	480c      	ldr	r0, [pc, #48]	; (80036e4 <prvInitialiseTaskLists+0x70>)
 80036b4:	f7fe fcbc 	bl	8002030 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036b8:	480b      	ldr	r0, [pc, #44]	; (80036e8 <prvInitialiseTaskLists+0x74>)
 80036ba:	f7fe fcb9 	bl	8002030 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <prvInitialiseTaskLists+0x78>)
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <prvInitialiseTaskLists+0x64>)
 80036c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <prvInitialiseTaskLists+0x7c>)
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <prvInitialiseTaskLists+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000003c 	.word	0x2000003c
 80036d8:	200000a0 	.word	0x200000a0
 80036dc:	200000b4 	.word	0x200000b4
 80036e0:	200000d0 	.word	0x200000d0
 80036e4:	200000e4 	.word	0x200000e4
 80036e8:	200000fc 	.word	0x200000fc
 80036ec:	200000c8 	.word	0x200000c8
 80036f0:	200000cc 	.word	0x200000cc

080036f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036fa:	e019      	b.n	8003730 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036fc:	f000 fdac 	bl	8004258 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <prvCheckTasksWaitingTermination+0x50>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fd19 	bl	8002144 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <prvCheckTasksWaitingTermination+0x54>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <prvCheckTasksWaitingTermination+0x54>)
 800371a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <prvCheckTasksWaitingTermination+0x58>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <prvCheckTasksWaitingTermination+0x58>)
 8003724:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003726:	f000 fdc7 	bl	80042b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f810 	bl	8003750 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <prvCheckTasksWaitingTermination+0x58>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e1      	bne.n	80036fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200000e4 	.word	0x200000e4
 8003748:	20000110 	.word	0x20000110
 800374c:	200000f8 	.word	0x200000f8

08003750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4618      	mov	r0, r3
 800375e:	f000 ff85 	bl	800466c <vPortFree>
                vPortFree( pxTCB );
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 ff82 	bl	800466c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvResetNextTaskUnblockTime+0x30>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <prvResetNextTaskUnblockTime+0x34>)
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003786:	e005      	b.n	8003794 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <prvResetNextTaskUnblockTime+0x30>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <prvResetNextTaskUnblockTime+0x34>)
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	200000c8 	.word	0x200000c8
 80037a4:	20000130 	.word	0x20000130

080037a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <xTaskGetSchedulerState+0x34>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037b6:	2301      	movs	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	e008      	b.n	80037ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <xTaskGetSchedulerState+0x38>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037c4:	2302      	movs	r3, #2
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	e001      	b.n	80037ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037ce:	687b      	ldr	r3, [r7, #4]
    }
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	2000011c 	.word	0x2000011c
 80037e0:	20000138 	.word	0x20000138

080037e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d068      	beq.n	80038cc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <xTaskPriorityDisinherit+0xf4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d00a      	beq.n	800381a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	60fb      	str	r3, [r7, #12]
    }
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60bb      	str	r3, [r7, #8]
    }
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	429a      	cmp	r2, r3
 800384c:	d03e      	beq.n	80038cc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d13a      	bne.n	80038cc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3304      	adds	r3, #4
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fc72 	bl	8002144 <uxListRemove>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	2201      	movs	r2, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <xTaskPriorityDisinherit+0xf8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4013      	ands	r3, r2
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <xTaskPriorityDisinherit+0xf8>)
 800387a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4619      	mov	r1, r3
 8003880:	204a      	movs	r0, #74	; 0x4a
 8003882:	f002 f8e1 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f1c3 0205 	rsb	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	2201      	movs	r2, #1
 80038a0:	409a      	lsls	r2, r3
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <xTaskPriorityDisinherit+0xf8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <xTaskPriorityDisinherit+0xf8>)
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <xTaskPriorityDisinherit+0xfc>)
 80038ba:	441a      	add	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	3304      	adds	r3, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f7fe fbe1 	bl	800208a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038cc:	697b      	ldr	r3, [r7, #20]
    }
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000038 	.word	0x20000038
 80038dc:	20000118 	.word	0x20000118
 80038e0:	2000003c 	.word	0x2000003c

080038e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038ee:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fc22 	bl	8002144 <uxListRemove>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003906:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	2201      	movs	r2, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4013      	ands	r3, r2
 800391a:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800391c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d110      	bne.n	8003948 <prvAddCurrentTaskToDelayedList+0x64>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	211b      	movs	r1, #27
 8003932:	4618      	mov	r0, r3
 8003934:	f002 fe4c 	bl	80065d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4820      	ldr	r0, [pc, #128]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003942:	f7fe fba2 	bl	800208a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003946:	e032      	b.n	80039ae <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d20f      	bcs.n	8003980 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2104      	movs	r1, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fe32 	bl	80065d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7fe fbaa 	bl	80020d2 <vListInsert>
}
 800397e:	e016      	b.n	80039ae <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2104      	movs	r1, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f002 fe22 	bl	80065d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe fb9a 	bl	80020d2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d202      	bcs.n	80039ae <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039a8:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6013      	str	r3, [r2, #0]
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000114 	.word	0x20000114
 80039bc:	20000038 	.word	0x20000038
 80039c0:	20000118 	.word	0x20000118
 80039c4:	200000fc 	.word	0x200000fc
 80039c8:	200000cc 	.word	0x200000cc
 80039cc:	200000c8 	.word	0x200000c8
 80039d0:	20000130 	.word	0x20000130

080039d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039de:	f000 fad5 	bl	8003f8c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <xTimerCreateTimerTask+0x54>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <xTimerCreateTimerTask+0x58>)
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2302      	movs	r3, #2
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039f8:	490d      	ldr	r1, [pc, #52]	; (8003a30 <xTimerCreateTimerTask+0x5c>)
 80039fa:	480e      	ldr	r0, [pc, #56]	; (8003a34 <xTimerCreateTimerTask+0x60>)
 80039fc:	f7ff f926 	bl	8002c4c <xTaskCreate>
 8003a00:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	603b      	str	r3, [r7, #0]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a1e:	687b      	ldr	r3, [r7, #4]
    }
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	2000016c 	.word	0x2000016c
 8003a2c:	20000170 	.word	0x20000170
 8003a30:	08006a2c 	.word	0x08006a2c
 8003a34:	08003b6d 	.word	0x08003b6d

08003a38 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	623b      	str	r3, [r7, #32]
    }
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <xTimerGenericCommand+0x98>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02a      	beq.n	8003ac4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	dc18      	bgt.n	8003ab2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a80:	f7ff fe92 	bl	80037a8 <xTaskGetSchedulerState>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d109      	bne.n	8003a9e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <xTimerGenericCommand+0x98>)
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	f107 0114 	add.w	r1, r7, #20
 8003a92:	2300      	movs	r3, #0
 8003a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a96:	f7fe fc6f 	bl	8002378 <xQueueGenericSend>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a9c:	e012      	b.n	8003ac4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xTimerGenericCommand+0x98>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f107 0114 	add.w	r1, r7, #20
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f7fe fc65 	bl	8002378 <xQueueGenericSend>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab0:	e008      	b.n	8003ac4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <xTimerGenericCommand+0x98>)
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	f107 0114 	add.w	r1, r7, #20
 8003aba:	2300      	movs	r3, #0
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	f7fe fd81 	bl	80025c4 <xQueueGenericSendFromISR>
 8003ac2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3728      	adds	r7, #40	; 0x28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000016c 	.word	0x2000016c

08003ad4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <prvProcessExpiredTimer+0x94>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fb29 	bl	8002144 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d022      	beq.n	8003b46 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	18d1      	adds	r1, r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f000 f8d1 	bl	8003cb4 <prvInsertTimerInActiveList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01f      	beq.n	8003b58 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	2100      	movs	r1, #0
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff88 	bl	8003a38 <xTimerGenericCommand>
 8003b28:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
    }
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	6978      	ldr	r0, [r7, #20]
 8003b5e:	4798      	blx	r3
    }
 8003b60:	bf00      	nop
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000164 	.word	0x20000164

08003b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f857 	bl	8003c2c <prvGetNextExpireTime>
 8003b7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4619      	mov	r1, r3
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f803 	bl	8003b90 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b8a:	f000 f8d5 	bl	8003d38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b8e:	e7f1      	b.n	8003b74 <prvTimerTask+0x8>

08003b90 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b9a:	f7ff fa1d 	bl	8002fd8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f866 	bl	8003c74 <prvSampleTimeNow>
 8003ba8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d130      	bne.n	8003c12 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <prvProcessTimerOrBlockTask+0x3c>
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d806      	bhi.n	8003bcc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bbe:	f7ff fa19 	bl	8002ff4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff85 	bl	8003ad4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bca:	e024      	b.n	8003c16 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <prvProcessTimerOrBlockTask+0x90>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <prvProcessTimerOrBlockTask+0x50>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <prvProcessTimerOrBlockTask+0x52>
 8003be0:	2300      	movs	r3, #0
 8003be2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <prvProcessTimerOrBlockTask+0x94>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7fe fff7 	bl	8002be4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bf6:	f7ff f9fd 	bl	8002ff4 <xTaskResumeAll>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <prvProcessTimerOrBlockTask+0x98>)
 8003c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
    }
 8003c10:	e001      	b.n	8003c16 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c12:	f7ff f9ef 	bl	8002ff4 <xTaskResumeAll>
    }
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000168 	.word	0x20000168
 8003c24:	2000016c 	.word	0x2000016c
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <prvGetNextExpireTime+0x44>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <prvGetNextExpireTime+0x16>
 8003c3e:	2201      	movs	r2, #1
 8003c40:	e000      	b.n	8003c44 <prvGetNextExpireTime+0x18>
 8003c42:	2200      	movs	r2, #0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <prvGetNextExpireTime+0x44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e001      	b.n	8003c60 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c60:	68fb      	ldr	r3, [r7, #12]
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000164 	.word	0x20000164

08003c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c7c:	f7ff fa5a 	bl	8003134 <xTaskGetTickCount>
 8003c80:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <prvSampleTimeNow+0x3c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d205      	bcs.n	8003c98 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c8c:	f000 f91a 	bl	8003ec4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e002      	b.n	8003c9e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <prvSampleTimeNow+0x3c>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000174 	.word	0x20000174

08003cb4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d812      	bhi.n	8003d00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e01b      	b.n	8003d26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <prvInsertTimerInActiveList+0x7c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe f9ea 	bl	80020d2 <vListInsert>
 8003cfe:	e012      	b.n	8003d26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d206      	bcs.n	8003d16 <prvInsertTimerInActiveList+0x62>
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e007      	b.n	8003d26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <prvInsertTimerInActiveList+0x80>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7fe f9d6 	bl	80020d2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d26:	697b      	ldr	r3, [r7, #20]
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000168 	.word	0x20000168
 8003d34:	20000164 	.word	0x20000164

08003d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d3e:	e0ae      	b.n	8003e9e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f2c0 80aa 	blt.w	8003e9c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe f9f3 	bl	8002144 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff87 	bl	8003c74 <prvSampleTimeNow>
 8003d66:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	f200 8097 	bhi.w	8003e9e <prvProcessReceivedCommands+0x166>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <prvProcessReceivedCommands+0x40>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003da1 	.word	0x08003da1
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003da1 	.word	0x08003da1
 8003d84:	08003e15 	.word	0x08003e15
 8003d88:	08003e29 	.word	0x08003e29
 8003d8c:	08003e73 	.word	0x08003e73
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da1 	.word	0x08003da1
 8003d98:	08003e15 	.word	0x08003e15
 8003d9c:	08003e29 	.word	0x08003e29
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	18d1      	adds	r1, r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc0:	f7ff ff78 	bl	8003cb4 <prvInsertTimerInActiveList>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d069      	beq.n	8003e9e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d05e      	beq.n	8003e9e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	441a      	add	r2, r3
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	2100      	movs	r1, #0
 8003df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003df2:	f7ff fe21 	bl	8003a38 <xTimerGenericCommand>
 8003df6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d14f      	bne.n	8003e9e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	61bb      	str	r3, [r7, #24]
    }
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e26:	e03a      	b.n	8003e9e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	617b      	str	r3, [r7, #20]
    }
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	18d1      	adds	r1, r2, r3
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e6c:	f7ff ff22 	bl	8003cb4 <prvInsertTimerInActiveList>
                        break;
 8003e70:	e015      	b.n	8003e9e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e82:	f000 fbf3 	bl	800466c <vPortFree>
 8003e86:	e00a      	b.n	8003e9e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e9a:	e000      	b.n	8003e9e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003e9c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <prvProcessReceivedCommands+0x188>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f107 0108 	add.w	r1, r7, #8
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe fc49 	bl	8002740 <xQueueReceive>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f af45 	bne.w	8003d40 <prvProcessReceivedCommands+0x8>
        }
    }
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	2000016c 	.word	0x2000016c

08003ec4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eca:	e048      	b.n	8003f5e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ecc:	4b2d      	ldr	r3, [pc, #180]	; (8003f84 <prvSwitchTimerLists+0xc0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <prvSwitchTimerLists+0xc0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe f92d 	bl	8002144 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02e      	beq.n	8003f5e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d90e      	bls.n	8003f30 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <prvSwitchTimerLists+0xc0>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fe f8d2 	bl	80020d2 <vListInsert>
 8003f2e:	e016      	b.n	8003f5e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f30:	2300      	movs	r3, #0
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	2100      	movs	r1, #0
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff fd7c 	bl	8003a38 <xTimerGenericCommand>
 8003f40:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	603b      	str	r3, [r7, #0]
    }
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <prvSwitchTimerLists+0xc0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1b1      	bne.n	8003ecc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <prvSwitchTimerLists+0xc0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <prvSwitchTimerLists+0xc4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <prvSwitchTimerLists+0xc0>)
 8003f74:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <prvSwitchTimerLists+0xc4>)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	6013      	str	r3, [r2, #0]
    }
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000164 	.word	0x20000164
 8003f88:	20000168 	.word	0x20000168

08003f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f90:	f000 f962 	bl	8004258 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f94:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <prvCheckForValidListAndQueue+0x54>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11d      	bne.n	8003fd8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f9c:	4811      	ldr	r0, [pc, #68]	; (8003fe4 <prvCheckForValidListAndQueue+0x58>)
 8003f9e:	f7fe f847 	bl	8002030 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fa2:	4811      	ldr	r0, [pc, #68]	; (8003fe8 <prvCheckForValidListAndQueue+0x5c>)
 8003fa4:	f7fe f844 	bl	8002030 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <prvCheckForValidListAndQueue+0x60>)
 8003faa:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <prvCheckForValidListAndQueue+0x58>)
 8003fac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <prvCheckForValidListAndQueue+0x64>)
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <prvCheckForValidListAndQueue+0x5c>)
 8003fb2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	210c      	movs	r1, #12
 8003fb8:	200a      	movs	r0, #10
 8003fba:	f7fe f955 	bl	8002268 <xQueueGenericCreate>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <prvCheckForValidListAndQueue+0x54>)
 8003fc2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <prvCheckForValidListAndQueue+0x54>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <prvCheckForValidListAndQueue+0x54>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <prvCheckForValidListAndQueue+0x68>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fdd4 	bl	8002b80 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fd8:	f000 f96e 	bl	80042b8 <vPortExitCritical>
    }
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2000016c 	.word	0x2000016c
 8003fe4:	2000013c 	.word	0x2000013c
 8003fe8:	20000150 	.word	0x20000150
 8003fec:	20000164 	.word	0x20000164
 8003ff0:	20000168 	.word	0x20000168
 8003ff4:	08006a34 	.word	0x08006a34

08003ff8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3b04      	subs	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004010:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b04      	subs	r3, #4
 8004016:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f023 0201 	bic.w	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b04      	subs	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004028:	4a0c      	ldr	r2, [pc, #48]	; (800405c <pxPortInitialiseStack+0x64>)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b14      	subs	r3, #20
 8004032:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3b04      	subs	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f06f 0202 	mvn.w	r2, #2
 8004046:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b20      	subs	r3, #32
 800404c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	08004061 	.word	0x08004061

08004060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <prvTaskExitError+0x54>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d00a      	beq.n	800408a <prvTaskExitError+0x2a>
        __asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	60fb      	str	r3, [r7, #12]
    }
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <prvTaskExitError+0x28>
        __asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60bb      	str	r3, [r7, #8]
    }
 800409c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800409e:	bf00      	nop
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0fc      	beq.n	80040a0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000010 	.word	0x20000010
	...

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
 800410a:	0000      	.short	0x0000
 800410c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop

08004114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800411a:	4b46      	ldr	r3, [pc, #280]	; (8004234 <xPortStartScheduler+0x120>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a46      	ldr	r2, [pc, #280]	; (8004238 <xPortStartScheduler+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10a      	bne.n	800413a <xPortStartScheduler+0x26>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
    }
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413a:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <xPortStartScheduler+0x120>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3f      	ldr	r2, [pc, #252]	; (800423c <xPortStartScheduler+0x128>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10a      	bne.n	800415a <xPortStartScheduler+0x46>
        __asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
    }
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <xPortStartScheduler+0x12c>)
 800415c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <xPortStartScheduler+0x130>)
 8004180:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <xPortStartScheduler+0x134>)
 8004184:	2207      	movs	r2, #7
 8004186:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004188:	e009      	b.n	800419e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800418a:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <xPortStartScheduler+0x134>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <xPortStartScheduler+0x134>)
 8004192:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d0ef      	beq.n	800418a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <xPortStartScheduler+0x134>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d00a      	beq.n	80041cc <xPortStartScheduler+0xb8>
        __asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60bb      	str	r3, [r7, #8]
    }
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <xPortStartScheduler+0x134>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <xPortStartScheduler+0x134>)
 80041d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <xPortStartScheduler+0x134>)
 80041e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <xPortStartScheduler+0x138>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <xPortStartScheduler+0x138>)
 80041f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <xPortStartScheduler+0x138>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <xPortStartScheduler+0x138>)
 80041fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004200:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004202:	f000 f8e3 	bl	80043cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <xPortStartScheduler+0x13c>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800420c:	f000 f902 	bl	8004414 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <xPortStartScheduler+0x140>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <xPortStartScheduler+0x140>)
 8004216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800421a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800421c:	f7ff ff64 	bl	80040e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004220:	f7ff f866 	bl	80032f0 <vTaskSwitchContext>
    prvTaskExitError();
 8004224:	f7ff ff1c 	bl	8004060 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	e000ed00 	.word	0xe000ed00
 8004238:	410fc271 	.word	0x410fc271
 800423c:	410fc270 	.word	0x410fc270
 8004240:	e000e400 	.word	0xe000e400
 8004244:	20000178 	.word	0x20000178
 8004248:	2000017c 	.word	0x2000017c
 800424c:	e000ed20 	.word	0xe000ed20
 8004250:	20000010 	.word	0x20000010
 8004254:	e000ef34 	.word	0xe000ef34

08004258 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
        __asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	607b      	str	r3, [r7, #4]
    }
 8004270:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004272:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <vPortEnterCritical+0x58>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <vPortEnterCritical+0x58>)
 800427a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <vPortEnterCritical+0x58>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10f      	bne.n	80042a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <vPortEnterCritical+0x5c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	603b      	str	r3, [r7, #0]
    }
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortEnterCritical+0x4a>
    }
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000010 	.word	0x20000010
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <vPortExitCritical+0x50>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <vPortExitCritical+0x24>
        __asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	607b      	str	r3, [r7, #4]
    }
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <vPortExitCritical+0x50>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <vPortExitCritical+0x50>)
 80042e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <vPortExitCritical+0x50>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <vPortExitCritical+0x42>
 80042ee:	2300      	movs	r3, #0
 80042f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f383 8811 	msr	BASEPRI, r3
    }
 80042f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000010 	.word	0x20000010
 800430c:	00000000 	.word	0x00000000

08004310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004310:	f3ef 8009 	mrs	r0, PSP
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <pxCurrentTCBConst>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f01e 0f10 	tst.w	lr, #16
 8004320:	bf08      	it	eq
 8004322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	6010      	str	r0, [r2, #0]
 800432c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004334:	f380 8811 	msr	BASEPRI, r0
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f7fe ffd6 	bl	80032f0 <vTaskSwitchContext>
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f380 8811 	msr	BASEPRI, r0
 800434c:	bc09      	pop	{r0, r3}
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	6808      	ldr	r0, [r1, #0]
 8004352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004356:	f01e 0f10 	tst.w	lr, #16
 800435a:	bf08      	it	eq
 800435c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004360:	f380 8809 	msr	PSP, r0
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst>:
 8004370:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
        __asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
    }
 8004390:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004392:	f001 ffc1 	bl	8006318 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004396:	f7fe feef 	bl	8003178 <xTaskIncrementTick>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d006      	beq.n	80043ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80043a0:	f002 f818 	bl	80063d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <SysTick_Handler+0x50>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e001      	b.n	80043b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80043ae:	f001 fff5 	bl	800639c <SEGGER_SYSVIEW_RecordExitISR>
 80043b2:	2300      	movs	r3, #0
 80043b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f383 8811 	msr	BASEPRI, r3
    }
 80043bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <vPortSetupTimerInterrupt+0x34>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <vPortSetupTimerInterrupt+0x38>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <vPortSetupTimerInterrupt+0x3c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <vPortSetupTimerInterrupt+0x40>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <vPortSetupTimerInterrupt+0x44>)
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vPortSetupTimerInterrupt+0x34>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010
 8004404:	e000e018 	.word	0xe000e018
 8004408:	20000000 	.word	0x20000000
 800440c:	10624dd3 	.word	0x10624dd3
 8004410:	e000e014 	.word	0xe000e014

08004414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004424 <vPortEnableVFP+0x10>
 8004418:	6801      	ldr	r1, [r0, #0]
 800441a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800441e:	6001      	str	r1, [r0, #0]
 8004420:	4770      	bx	lr
 8004422:	0000      	.short	0x0000
 8004424:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop

0800442c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004432:	f3ef 8305 	mrs	r3, IPSR
 8004436:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b0f      	cmp	r3, #15
 800443c:	d914      	bls.n	8004468 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800443e:	4a17      	ldr	r2, [pc, #92]	; (800449c <vPortValidateInterruptPriority+0x70>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <vPortValidateInterruptPriority+0x74>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	7afa      	ldrb	r2, [r7, #11]
 800444e:	429a      	cmp	r2, r3
 8004450:	d20a      	bcs.n	8004468 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
    }
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <vPortValidateInterruptPriority+0x78>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004470:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <vPortValidateInterruptPriority+0x7c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d90a      	bls.n	800448e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	603b      	str	r3, [r7, #0]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vPortValidateInterruptPriority+0x60>
    }
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000e3f0 	.word	0xe000e3f0
 80044a0:	20000178 	.word	0x20000178
 80044a4:	e000ed0c 	.word	0xe000ed0c
 80044a8:	2000017c 	.word	0x2000017c

080044ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80044b8:	f7fe fd8e 	bl	8002fd8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80044bc:	4b65      	ldr	r3, [pc, #404]	; (8004654 <pvPortMalloc+0x1a8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80044c4:	f000 f934 	bl	8004730 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044c8:	4b63      	ldr	r3, [pc, #396]	; (8004658 <pvPortMalloc+0x1ac>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f040 80a7 	bne.w	8004624 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02d      	beq.n	8004538 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80044dc:	2208      	movs	r2, #8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d227      	bcs.n	8004538 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80044e8:	2208      	movs	r2, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	3308      	adds	r3, #8
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d214      	bcs.n	8004532 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	3308      	adds	r3, #8
 8004510:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <pvPortMalloc+0x92>
        __asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	617b      	str	r3, [r7, #20]
    }
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004536:	e002      	b.n	800453e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	e000      	b.n	8004540 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800453e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d06e      	beq.n	8004624 <pvPortMalloc+0x178>
 8004546:	4b45      	ldr	r3, [pc, #276]	; (800465c <pvPortMalloc+0x1b0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d869      	bhi.n	8004624 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004550:	4b43      	ldr	r3, [pc, #268]	; (8004660 <pvPortMalloc+0x1b4>)
 8004552:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <pvPortMalloc+0x1b4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800455a:	e004      	b.n	8004566 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d903      	bls.n	8004578 <pvPortMalloc+0xcc>
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f1      	bne.n	800455c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <pvPortMalloc+0x1a8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	429a      	cmp	r2, r3
 8004580:	d050      	beq.n	8004624 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2208      	movs	r2, #8
 8004588:	4413      	add	r3, r2
 800458a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	1ad2      	subs	r2, r2, r3
 800459c:	2308      	movs	r3, #8
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d91f      	bls.n	80045e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <pvPortMalloc+0x120>
        __asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	613b      	str	r3, [r7, #16]
    }
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	1ad2      	subs	r2, r2, r3
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045de:	69b8      	ldr	r0, [r7, #24]
 80045e0:	f000 f908 	bl	80047f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <pvPortMalloc+0x1b0>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	4a1b      	ldr	r2, [pc, #108]	; (800465c <pvPortMalloc+0x1b0>)
 80045f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045f2:	4b1a      	ldr	r3, [pc, #104]	; (800465c <pvPortMalloc+0x1b0>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <pvPortMalloc+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d203      	bcs.n	8004606 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <pvPortMalloc+0x1b0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a18      	ldr	r2, [pc, #96]	; (8004664 <pvPortMalloc+0x1b8>)
 8004604:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <pvPortMalloc+0x1ac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	431a      	orrs	r2, r3
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <pvPortMalloc+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <pvPortMalloc+0x1bc>)
 8004622:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004624:	f7fe fce6 	bl	8002ff4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <pvPortMalloc+0x19c>
        __asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60fb      	str	r3, [r7, #12]
    }
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <pvPortMalloc+0x19a>
    return pvReturn;
 8004648:	69fb      	ldr	r3, [r7, #28]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20012d88 	.word	0x20012d88
 8004658:	20012d9c 	.word	0x20012d9c
 800465c:	20012d8c 	.word	0x20012d8c
 8004660:	20012d80 	.word	0x20012d80
 8004664:	20012d90 	.word	0x20012d90
 8004668:	20012d94 	.word	0x20012d94

0800466c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d04d      	beq.n	800471a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800467e:	2308      	movs	r3, #8
 8004680:	425b      	negs	r3, r3
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4b24      	ldr	r3, [pc, #144]	; (8004724 <vPortFree+0xb8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <vPortFree+0x44>
        __asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	60fb      	str	r3, [r7, #12]
    }
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <vPortFree+0x62>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60bb      	str	r3, [r7, #8]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <vPortFree+0xb8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01e      	beq.n	800471a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d11a      	bne.n	800471a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <vPortFree+0xb8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80046f4:	f7fe fc70 	bl	8002fd8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <vPortFree+0xbc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4413      	add	r3, r2
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <vPortFree+0xbc>)
 8004704:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004706:	6938      	ldr	r0, [r7, #16]
 8004708:	f000 f874 	bl	80047f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <vPortFree+0xc0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	4a06      	ldr	r2, [pc, #24]	; (800472c <vPortFree+0xc0>)
 8004714:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004716:	f7fe fc6d 	bl	8002ff4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20012d9c 	.word	0x20012d9c
 8004728:	20012d8c 	.word	0x20012d8c
 800472c:	20012d98 	.word	0x20012d98

08004730 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004736:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800473a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <prvHeapInit+0xac>)
 800473e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00c      	beq.n	8004764 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3307      	adds	r3, #7
 800474e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <prvHeapInit+0xac>)
 8004760:	4413      	add	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004768:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <prvHeapInit+0xb0>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <prvHeapInit+0xb0>)
 8004770:	2200      	movs	r2, #0
 8004772:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800477c:	2208      	movs	r2, #8
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0307 	bic.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <prvHeapInit+0xb4>)
 8004790:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004792:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <prvHeapInit+0xb4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <prvHeapInit+0xb4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <prvHeapInit+0xb4>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <prvHeapInit+0xb8>)
 80047be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <prvHeapInit+0xbc>)
 80047c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <prvHeapInit+0xc0>)
 80047ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047ce:	601a      	str	r2, [r3, #0]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000180 	.word	0x20000180
 80047e0:	20012d80 	.word	0x20012d80
 80047e4:	20012d88 	.word	0x20012d88
 80047e8:	20012d90 	.word	0x20012d90
 80047ec:	20012d8c 	.word	0x20012d8c
 80047f0:	20012d9c 	.word	0x20012d9c

080047f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <prvInsertBlockIntoFreeList+0xac>)
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e002      	b.n	8004808 <prvInsertBlockIntoFreeList+0x14>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d8f7      	bhi.n	8004802 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4413      	add	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d108      	bne.n	8004836 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	441a      	add	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d118      	bne.n	800487c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d00d      	beq.n	8004872 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	441a      	add	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e008      	b.n	8004884 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e003      	b.n	8004884 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d002      	beq.n	8004892 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20012d80 	.word	0x20012d80
 80048a4:	20012d88 	.word	0x20012d88

080048a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80048ac:	4803      	ldr	r0, [pc, #12]	; (80048bc <_cbSendSystemDesc+0x14>)
 80048ae:	f001 fcdd 	bl	800626c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80048b2:	4803      	ldr	r0, [pc, #12]	; (80048c0 <_cbSendSystemDesc+0x18>)
 80048b4:	f001 fcda 	bl	800626c <SEGGER_SYSVIEW_SendSysDesc>
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	08006a3c 	.word	0x08006a3c
 80048c0:	08006a78 	.word	0x08006a78

080048c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80048d2:	4a06      	ldr	r2, [pc, #24]	; (80048ec <SEGGER_SYSVIEW_Conf+0x28>)
 80048d4:	f001 f846 	bl	8005964 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80048d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80048dc:	f001 f886 	bl	80059ec <SEGGER_SYSVIEW_SetRAMBase>
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000000 	.word	0x20000000
 80048e8:	080048a9 	.word	0x080048a9
 80048ec:	08006b18 	.word	0x08006b18

080048f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	e033      	b.n	8004964 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80048fc:	491e      	ldr	r1, [pc, #120]	; (8004978 <_cbSendTaskList+0x88>)
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	491a      	ldr	r1, [pc, #104]	; (8004978 <_cbSendTaskList+0x88>)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3304      	adds	r3, #4
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	4c16      	ldr	r4, [pc, #88]	; (8004978 <_cbSendTaskList+0x88>)
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4423      	add	r3, r4
 800492c:	3308      	adds	r3, #8
 800492e:	681c      	ldr	r4, [r3, #0]
 8004930:	4d11      	ldr	r5, [pc, #68]	; (8004978 <_cbSendTaskList+0x88>)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	442b      	add	r3, r5
 800493e:	330c      	adds	r3, #12
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	4e0d      	ldr	r6, [pc, #52]	; (8004978 <_cbSendTaskList+0x88>)
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4433      	add	r3, r6
 8004950:	3310      	adds	r3, #16
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	462b      	mov	r3, r5
 8004958:	4622      	mov	r2, r4
 800495a:	f000 f8b5 	bl	8004ac8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3301      	adds	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <_cbSendTaskList+0x8c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3c6      	bcc.n	80048fc <_cbSendTaskList+0xc>
  }
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004978:	20012da0 	.word	0x20012da0
 800497c:	20012e40 	.word	0x20012e40

08004980 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004980:	b5b0      	push	{r4, r5, r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004986:	f7fe fbe5 	bl	8003154 <xTaskGetTickCountFromISR>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	f04f 0500 	mov.w	r5, #0
 80049a6:	015d      	lsls	r5, r3, #5
 80049a8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80049ac:	0154      	lsls	r4, r2, #5
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	1a12      	subs	r2, r2, r0
 80049b4:	eb63 0301 	sbc.w	r3, r3, r1
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	f04f 0500 	mov.w	r5, #0
 80049c0:	009d      	lsls	r5, r3, #2
 80049c2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80049c6:	0094      	lsls	r4, r2, #2
 80049c8:	4622      	mov	r2, r4
 80049ca:	462b      	mov	r3, r5
 80049cc:	1812      	adds	r2, r2, r0
 80049ce:	eb41 0303 	adc.w	r3, r1, r3
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f04f 0100 	mov.w	r1, #0
 80049da:	00d9      	lsls	r1, r3, #3
 80049dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e0:	00d0      	lsls	r0, r2, #3
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80049ea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdb0      	pop	{r4, r5, r7, pc}

080049f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a06:	2205      	movs	r2, #5
 8004a08:	492b      	ldr	r1, [pc, #172]	; (8004ab8 <SYSVIEW_AddTask+0xc0>)
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f001 ffda 	bl	80069c4 <memcmp>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04b      	beq.n	8004aae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b07      	cmp	r3, #7
 8004a1c:	d903      	bls.n	8004a26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004a1e:	4828      	ldr	r0, [pc, #160]	; (8004ac0 <SYSVIEW_AddTask+0xc8>)
 8004a20:	f001 ff22 	bl	8006868 <SEGGER_SYSVIEW_Warn>
    return;
 8004a24:	e044      	b.n	8004ab0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004a26:	4b25      	ldr	r3, [pc, #148]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4926      	ldr	r1, [pc, #152]	; (8004ac4 <SYSVIEW_AddTask+0xcc>)
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004a3a:	4b20      	ldr	r3, [pc, #128]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4921      	ldr	r1, [pc, #132]	; (8004ac4 <SYSVIEW_AddTask+0xcc>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	491b      	ldr	r1, [pc, #108]	; (8004ac4 <SYSVIEW_AddTask+0xcc>)
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3308      	adds	r3, #8
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4916      	ldr	r1, [pc, #88]	; (8004ac4 <SYSVIEW_AddTask+0xcc>)
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	330c      	adds	r3, #12
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4910      	ldr	r1, [pc, #64]	; (8004ac4 <SYSVIEW_AddTask+0xcc>)
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <SYSVIEW_AddTask+0xc4>)
 8004a9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f80e 	bl	8004ac8 <SYSVIEW_SendTaskInfo>
 8004aac:	e000      	b.n	8004ab0 <SYSVIEW_AddTask+0xb8>
    return;
 8004aae:	bf00      	nop

}
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08006a88 	.word	0x08006a88
 8004abc:	20012e40 	.word	0x20012e40
 8004ac0:	08006a90 	.word	0x08006a90
 8004ac4:	20012da0 	.word	0x20012da0

08004ac8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	2214      	movs	r2, #20
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 ff8c 	bl	80069fc <memset>
  TaskInfo.TaskID     = TaskID;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fabd 	bl	800607c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004b02:	bf00      	nop
 8004b04:	3728      	adds	r7, #40	; 0x28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <__NVIC_EnableIRQ>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	db0b      	blt.n	8004b36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	f003 021f 	and.w	r2, r3, #31
 8004b24:	4907      	ldr	r1, [pc, #28]	; (8004b44 <__NVIC_EnableIRQ+0x38>)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	e000e100 	.word	0xe000e100

08004b48 <__NVIC_SetPriority>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db0a      	blt.n	8004b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	490c      	ldr	r1, [pc, #48]	; (8004b94 <__NVIC_SetPriority+0x4c>)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b70:	e00a      	b.n	8004b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	4908      	ldr	r1, [pc, #32]	; (8004b98 <__NVIC_SetPriority+0x50>)
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	3b04      	subs	r3, #4
 8004b80:	0112      	lsls	r2, r2, #4
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	440b      	add	r3, r1
 8004b86:	761a      	strb	r2, [r3, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000e100 	.word	0xe000e100
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004ba2:	f001 febd 	bl	8006920 <SEGGER_SYSVIEW_IsStarted>
 8004ba6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004bae:	f001 f8e9 	bl	8005d84 <SEGGER_SYSVIEW_Start>
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <_cbOnUARTRx+0x3c>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d806      	bhi.n	8004bdc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <_cbOnUARTRx+0x3c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <_cbOnUARTRx+0x3c>)
 8004bd8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004bda:	e009      	b.n	8004bf0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004bdc:	f7ff ffde 	bl	8004b9c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <_cbOnUARTRx+0x3c>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	2201      	movs	r2, #1
 8004bea:	4619      	mov	r1, r3
 8004bec:	f000 fb9a 	bl	8005324 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004bf0:	bf00      	nop
}
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000014 	.word	0x20000014

08004bfc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <_cbOnUARTTx+0x5c>)
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d80f      	bhi.n	8004c2c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004c0c:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <_cbOnUARTTx+0x5c>)
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <_cbOnUARTTx+0x60>)
 8004c14:	5c9a      	ldrb	r2, [r3, r2]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <_cbOnUARTTx+0x5c>)
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <_cbOnUARTTx+0x5c>)
 8004c24:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004c26:	2301      	movs	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004c2a:	e00f      	b.n	8004c4c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <_cbOnUARTTx+0x5c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fa19 	bl	800506c <SEGGER_RTT_ReadUpBufferNoLock>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da02      	bge.n	8004c4a <_cbOnUARTTx+0x4e>
    r = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e000      	b.n	8004c4c <_cbOnUARTTx+0x50>
  }
Done:
 8004c4a:	bf00      	nop
  return r;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000014 	.word	0x20000014
 8004c5c:	08006b20 	.word	0x08006b20

08004c60 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <SEGGER_UART_init+0x1c>)
 8004c6a:	4905      	ldr	r1, [pc, #20]	; (8004c80 <SEGGER_UART_init+0x20>)
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f863 	bl	8004d38 <HIF_UART_Init>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08004bbd 	.word	0x08004bbd
 8004c80:	08004bfd 	.word	0x08004bfd

08004c84 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <USART2_IRQHandler+0x80>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d011      	beq.n	8004cbe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <USART2_IRQHandler+0x84>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 030b 	and.w	r3, r3, #11
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004cac:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <USART2_IRQHandler+0x88>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <USART2_IRQHandler+0x88>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	79fa      	ldrb	r2, [r7, #7]
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <USART2_IRQHandler+0x8c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <USART2_IRQHandler+0x8c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1dfa      	adds	r2, r7, #7
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4798      	blx	r3
 8004cda:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <USART2_IRQHandler+0x90>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a0b      	ldr	r2, [pc, #44]	; (8004d14 <USART2_IRQHandler+0x90>)
 8004ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e006      	b.n	8004cfe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <USART2_IRQHandler+0x80>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004cf4:	79fa      	ldrb	r2, [r7, #7]
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <USART2_IRQHandler+0x84>)
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e000      	b.n	8004cfe <USART2_IRQHandler+0x7a>
      return;
 8004cfc:	bf00      	nop
    }
  }
}
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004404 	.word	0x40004404
 8004d0c:	20012e44 	.word	0x20012e44
 8004d10:	20012e48 	.word	0x20012e48
 8004d14:	4000440c 	.word	0x4000440c

08004d18 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	4000440c 	.word	0x4000440c

08004d38 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004d44:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <HIF_UART_Init+0xc8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2d      	ldr	r2, [pc, #180]	; (8004e00 <HIF_UART_Init+0xc8>)
 8004d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004d50:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <HIF_UART_Init+0xcc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <HIF_UART_Init+0xcc>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HIF_UART_Init+0xd0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d68:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004d70:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004d72:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <HIF_UART_Init+0xd0>)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HIF_UART_Init+0xd4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d84:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004d8c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HIF_UART_Init+0xd4>)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004d94:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <HIF_UART_Init+0xd8>)
 8004d96:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004d9a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HIF_UART_Init+0xdc>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HIF_UART_Init+0xe0>)
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004dae:	4a1b      	ldr	r2, [pc, #108]	; (8004e1c <HIF_UART_Init+0xe4>)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d302      	bcc.n	8004dce <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004dc8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004dcc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	4a11      	ldr	r2, [pc, #68]	; (8004e20 <HIF_UART_Init+0xe8>)
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <HIF_UART_Init+0xec>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004de4:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <HIF_UART_Init+0xf0>)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004dea:	2106      	movs	r1, #6
 8004dec:	2026      	movs	r0, #38	; 0x26
 8004dee:	f7ff feab 	bl	8004b48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004df2:	2026      	movs	r0, #38	; 0x26
 8004df4:	f7ff fe8a 	bl	8004b0c <__NVIC_EnableIRQ>
}
 8004df8:	bf00      	nop
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40023840 	.word	0x40023840
 8004e04:	40023830 	.word	0x40023830
 8004e08:	40020020 	.word	0x40020020
 8004e0c:	40020000 	.word	0x40020000
 8004e10:	4000440c 	.word	0x4000440c
 8004e14:	40004410 	.word	0x40004410
 8004e18:	40004414 	.word	0x40004414
 8004e1c:	0501bd00 	.word	0x0501bd00
 8004e20:	40004408 	.word	0x40004408
 8004e24:	20012e44 	.word	0x20012e44
 8004e28:	20012e48 	.word	0x20012e48

08004e2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <_DoInit+0x98>)
 8004e34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2203      	movs	r2, #3
 8004e40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <_DoInit+0x9c>)
 8004e46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <_DoInit+0xa0>)
 8004e4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <_DoInit+0x9c>)
 8004e6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <_DoInit+0xa4>)
 8004e72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2210      	movs	r2, #16
 8004e78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3307      	adds	r3, #7
 8004e90:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <_DoInit+0xa8>)
 8004e92:	6810      	ldr	r0, [r2, #0]
 8004e94:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e96:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <_DoInit+0xac>)
 8004e9e:	6810      	ldr	r0, [r2, #0]
 8004ea0:	6018      	str	r0, [r3, #0]
 8004ea2:	8891      	ldrh	r1, [r2, #4]
 8004ea4:	7992      	ldrb	r2, [r2, #6]
 8004ea6:	8099      	strh	r1, [r3, #4]
 8004ea8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004eaa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004eb4:	f3bf 8f5f 	dmb	sy
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20014404 	.word	0x20014404
 8004ec8:	08006ae0 	.word	0x08006ae0
 8004ecc:	20012e4c 	.word	0x20012e4c
 8004ed0:	2001324c 	.word	0x2001324c
 8004ed4:	08006aec 	.word	0x08006aec
 8004ed8:	08006af0 	.word	0x08006af0

08004edc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d905      	bls.n	8004f0c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	e007      	b.n	8004f1c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	1acb      	subs	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	4293      	cmp	r3, r2
 8004f28:	bf28      	it	cs
 8004f2a:	4613      	movcs	r3, r2
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4293      	cmp	r3, r2
 8004f34:	bf28      	it	cs
 8004f36:	4613      	movcs	r3, r2
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	6978      	ldr	r0, [r7, #20]
 8004f4a:	f001 fd49 	bl	80069e0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004f4e:	6a3a      	ldr	r2, [r7, #32]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	4413      	add	r3, r2
 8004f54:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	4413      	add	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	4413      	add	r3, r2
 8004f6c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d101      	bne.n	8004f7c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1b2      	bne.n	8004ef2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b088      	sub	sp, #32
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d911      	bls.n	8004fde <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	6938      	ldr	r0, [r7, #16]
 8004fca:	f001 fd09 	bl	80069e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004fdc:	e01f      	b.n	800501e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	6938      	ldr	r0, [r7, #16]
 8004ff2:	f001 fcf5 	bl	80069e0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4619      	mov	r1, r3
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f001 fce6 	bl	80069e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005014:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	60da      	str	r2, [r3, #12]
}
 800501e:	bf00      	nop
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	429a      	cmp	r2, r3
 8005040:	d808      	bhi.n	8005054 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad2      	subs	r2, r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	3b01      	subs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e004      	b.n	800505e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800505e:	697b      	ldr	r3, [r7, #20]
}
 8005060:	4618      	mov	r0, r3
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005086:	f7ff fed1 	bl	8004e2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4a37      	ldr	r2, [pc, #220]	; (8005174 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005098:	4413      	add	r3, r2
 800509a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d92b      	bls.n	8005110 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4293      	cmp	r3, r2
 80050c8:	bf28      	it	cs
 80050ca:	4613      	movcs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	4413      	add	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050de:	f001 fc7f 	bl	80069e0 <memcpy>
    NumBytesRead += NumBytesRem;
 80050e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005108:	429a      	cmp	r2, r3
 800510a:	d101      	bne.n	8005110 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800510c:	2300      	movs	r3, #0
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4293      	cmp	r3, r2
 800511e:	bf28      	it	cs
 8005120:	4613      	movcs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d019      	beq.n	800515e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	4413      	add	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513a:	f001 fc51 	bl	80069e0 <memcpy>
    NumBytesRead += NumBytesRem;
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005168:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800516c:	4618      	mov	r0, r3
 800516e:	3730      	adds	r7, #48	; 0x30
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20014404 	.word	0x20014404

08005178 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b08c      	sub	sp, #48	; 0x30
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005184:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <SEGGER_RTT_ReadNoLock+0x108>)
 8005186:	623b      	str	r3, [r7, #32]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <SEGGER_RTT_ReadNoLock+0x1e>
 8005192:	f7ff fe4b 	bl	8004e2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	3360      	adds	r3, #96	; 0x60
 80051a2:	4a37      	ldr	r2, [pc, #220]	; (8005280 <SEGGER_RTT_ReadNoLock+0x108>)
 80051a4:	4413      	add	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80051bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d92b      	bls.n	800521c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bf28      	it	cs
 80051d6:	4613      	movcs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	4413      	add	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ea:	f001 fbf9 	bl	80069e0 <memcpy>
    NumBytesRead += NumBytesRem;
 80051ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	4413      	add	r3, r2
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	4413      	add	r3, r2
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005214:	429a      	cmp	r2, r3
 8005216:	d101      	bne.n	800521c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005218:	2300      	movs	r3, #0
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4293      	cmp	r3, r2
 800522a:	bf28      	it	cs
 800522c:	4613      	movcs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d019      	beq.n	800526a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	4413      	add	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	6939      	ldr	r1, [r7, #16]
 8005244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005246:	f001 fbcb 	bl	80069e0 <memcpy>
    NumBytesRead += NumBytesRem;
 800524a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005278:	4618      	mov	r0, r3
 800527a:	3730      	adds	r7, #48	; 0x30
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20014404 	.word	0x20014404

08005284 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	3360      	adds	r3, #96	; 0x60
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80052a2:	4413      	add	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d029      	beq.n	8005302 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d82e      	bhi.n	8005310 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d013      	beq.n	80052e2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80052ba:	e029      	b.n	8005310 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f7ff feb2 	bl	8005026 <_GetAvailWriteSpace>
 80052c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d202      	bcs.n	80052d2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80052d0:	e021      	b.n	8005316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	69b9      	ldr	r1, [r7, #24]
 80052da:	6978      	ldr	r0, [r7, #20]
 80052dc:	f7ff fe5b 	bl	8004f96 <_WriteNoCheck>
    break;
 80052e0:	e019      	b.n	8005316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff fe9f 	bl	8005026 <_GetAvailWriteSpace>
 80052e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bf28      	it	cs
 80052f2:	4613      	movcs	r3, r2
 80052f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	69b9      	ldr	r1, [r7, #24]
 80052fa:	6978      	ldr	r0, [r7, #20]
 80052fc:	f7ff fe4b 	bl	8004f96 <_WriteNoCheck>
    break;
 8005300:	e009      	b.n	8005316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	69b9      	ldr	r1, [r7, #24]
 8005306:	6978      	ldr	r0, [r7, #20]
 8005308:	f7ff fde8 	bl	8004edc <_WriteBlocking>
 800530c:	61f8      	str	r0, [r7, #28]
    break;
 800530e:	e002      	b.n	8005316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
    break;
 8005314:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005316:	69fb      	ldr	r3, [r7, #28]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20014404 	.word	0x20014404

08005324 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800533e:	f7ff fd75 	bl	8004e2c <_DoInit>
  SEGGER_RTT_LOCK();
 8005342:	f3ef 8311 	mrs	r3, BASEPRI
 8005346:	f04f 0120 	mov.w	r1, #32
 800534a:	f381 8811 	msr	BASEPRI, r1
 800534e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ff95 	bl	8005284 <SEGGER_RTT_WriteDownBufferNoLock>
 800535a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005362:	697b      	ldr	r3, [r7, #20]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20014404 	.word	0x20014404

08005370 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800537e:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <SEGGER_RTT_AllocUpBuffer+0x20>
 800538c:	f7ff fd4e 	bl	8004e2c <_DoInit>
  SEGGER_RTT_LOCK();
 8005390:	f3ef 8311 	mrs	r3, BASEPRI
 8005394:	f04f 0120 	mov.w	r1, #32
 8005398:	f381 8811 	msr	BASEPRI, r1
 800539c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800539e:	4b35      	ldr	r3, [pc, #212]	; (8005474 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80053a6:	6939      	ldr	r1, [r7, #16]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	4613      	mov	r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	440b      	add	r3, r1
 80053b6:	3304      	adds	r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	dbeb      	blt.n	80053a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80053ce:	e000      	b.n	80053d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80053d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	429a      	cmp	r2, r3
 80053da:	da3f      	bge.n	800545c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80053dc:	6939      	ldr	r1, [r7, #16]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	4613      	mov	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053f0:	6939      	ldr	r1, [r7, #16]
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	3304      	adds	r3, #4
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	440b      	add	r3, r1
 8005414:	3320      	adds	r3, #32
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800541a:	6939      	ldr	r1, [r7, #16]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	4613      	mov	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	3328      	adds	r3, #40	; 0x28
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800542e:	6939      	ldr	r1, [r7, #16]
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	4613      	mov	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	440b      	add	r3, r1
 800543c:	3324      	adds	r3, #36	; 0x24
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005442:	6939      	ldr	r1, [r7, #16]
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	440b      	add	r3, r1
 8005450:	332c      	adds	r3, #44	; 0x2c
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005456:	f3bf 8f5f 	dmb	sy
 800545a:	e002      	b.n	8005462 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
 8005460:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005468:	69fb      	ldr	r3, [r7, #28]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20014404 	.word	0x20014404

08005478 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005494:	f7ff fcca 	bl	8004e2c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005498:	4b1c      	ldr	r3, [pc, #112]	; (800550c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800549a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d82c      	bhi.n	80054fc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80054a2:	f3ef 8311 	mrs	r3, BASEPRI
 80054a6:	f04f 0120 	mov.w	r1, #32
 80054aa:	f381 8811 	msr	BASEPRI, r1
 80054ae:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	3360      	adds	r3, #96	; 0x60
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2200      	movs	r2, #0
 80054e4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ea:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	e002      	b.n	8005502 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005504:	4618      	mov	r0, r3
 8005506:	3728      	adds	r7, #40	; 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20014404 	.word	0x20014404

08005510 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00f      	beq.n	8005546 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005526:	e002      	b.n	800552e <_EncodeStr+0x1e>
      Len++;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3301      	adds	r3, #1
 800552c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f6      	bne.n	8005528 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d901      	bls.n	8005546 <_EncodeStr+0x36>
      Len = Limit;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2bfe      	cmp	r3, #254	; 0xfe
 800554a:	d806      	bhi.n	800555a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	60fa      	str	r2, [r7, #12]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e011      	b.n	800557e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	22ff      	movs	r2, #255	; 0xff
 8005562:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	60fa      	str	r2, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	0a19      	lsrs	r1, r3, #8
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	60fa      	str	r2, [r7, #12]
 800557a:	b2ca      	uxtb	r2, r1
 800557c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005582:	e00a      	b.n	800559a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	1c53      	adds	r3, r2, #1
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1c59      	adds	r1, r3, #1
 800558e:	60f9      	str	r1, [r7, #12]
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	701a      	strb	r2, [r3, #0]
    n++;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3301      	adds	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d3f0      	bcc.n	8005584 <_EncodeStr+0x74>
  }
  return pPayload;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055ce:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <_HandleIncomingPacket+0xe0>)
 80055d0:	7e1b      	ldrb	r3, [r3, #24]
 80055d2:	4618      	mov	r0, r3
 80055d4:	1cfb      	adds	r3, r7, #3
 80055d6:	2201      	movs	r2, #1
 80055d8:	4619      	mov	r1, r3
 80055da:	f7ff fdcd 	bl	8005178 <SEGGER_RTT_ReadNoLock>
 80055de:	4603      	mov	r3, r0
 80055e0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd54      	ble.n	8005692 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d032      	beq.n	8005654 <_HandleIncomingPacket+0x8c>
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	dc42      	bgt.n	8005678 <_HandleIncomingPacket+0xb0>
 80055f2:	2b07      	cmp	r3, #7
 80055f4:	dc16      	bgt.n	8005624 <_HandleIncomingPacket+0x5c>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dd3e      	ble.n	8005678 <_HandleIncomingPacket+0xb0>
 80055fa:	3b01      	subs	r3, #1
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d83b      	bhi.n	8005678 <_HandleIncomingPacket+0xb0>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <_HandleIncomingPacket+0x40>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	0800562b 	.word	0x0800562b
 800560c:	08005631 	.word	0x08005631
 8005610:	08005637 	.word	0x08005637
 8005614:	0800563d 	.word	0x0800563d
 8005618:	08005643 	.word	0x08005643
 800561c:	08005649 	.word	0x08005649
 8005620:	0800564f 	.word	0x0800564f
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d036      	beq.n	8005696 <_HandleIncomingPacket+0xce>
 8005628:	e026      	b.n	8005678 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800562a:	f000 fbab 	bl	8005d84 <SEGGER_SYSVIEW_Start>
      break;
 800562e:	e037      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005630:	f000 fc64 	bl	8005efc <SEGGER_SYSVIEW_Stop>
      break;
 8005634:	e034      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005636:	f000 fe3d 	bl	80062b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800563a:	e031      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800563c:	f000 fe02 	bl	8006244 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005640:	e02e      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005642:	f000 fc81 	bl	8005f48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005646:	e02b      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005648:	f001 f8d0 	bl	80067ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800564c:	e028      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800564e:	f001 f8af 	bl	80067b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005652:	e025      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005654:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <_HandleIncomingPacket+0xe0>)
 8005656:	7e1b      	ldrb	r3, [r3, #24]
 8005658:	4618      	mov	r0, r3
 800565a:	1cfb      	adds	r3, r7, #3
 800565c:	2201      	movs	r2, #1
 800565e:	4619      	mov	r1, r3
 8005660:	f7ff fd8a 	bl	8005178 <SEGGER_RTT_ReadNoLock>
 8005664:	4603      	mov	r3, r0
 8005666:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	dd15      	ble.n	800569a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	4618      	mov	r0, r3
 8005672:	f001 f81d 	bl	80066b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005676:	e010      	b.n	800569a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	b25b      	sxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	da0e      	bge.n	800569e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <_HandleIncomingPacket+0xe0>)
 8005682:	7e1b      	ldrb	r3, [r3, #24]
 8005684:	4618      	mov	r0, r3
 8005686:	1cfb      	adds	r3, r7, #3
 8005688:	2201      	movs	r2, #1
 800568a:	4619      	mov	r1, r3
 800568c:	f7ff fd74 	bl	8005178 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005690:	e005      	b.n	800569e <_HandleIncomingPacket+0xd6>
    }
  }
 8005692:	bf00      	nop
 8005694:	e004      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
      break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
      break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <_HandleIncomingPacket+0xd8>
      break;
 800569e:	bf00      	nop
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20014264 	.word	0x20014264

080056ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056b2:	2301      	movs	r3, #1
 80056b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	3301      	adds	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	4b32      	ldr	r3, [pc, #200]	; (800578c <_TrySendOverflowPacket+0xe0>)
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c6:	e00b      	b.n	80056e0 <_TrySendOverflowPacket+0x34>
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	09db      	lsrs	r3, r3, #7
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b7f      	cmp	r3, #127	; 0x7f
 80056e4:	d8f0      	bhi.n	80056c8 <_TrySendOverflowPacket+0x1c>
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056f6:	4b26      	ldr	r3, [pc, #152]	; (8005790 <_TrySendOverflowPacket+0xe4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056fc:	4b23      	ldr	r3, [pc, #140]	; (800578c <_TrySendOverflowPacket+0xe0>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	e00b      	b.n	8005728 <_TrySendOverflowPacket+0x7c>
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	6279      	str	r1, [r7, #36]	; 0x24
 800571a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b7f      	cmp	r3, #127	; 0x7f
 800572c:	d8f0      	bhi.n	8005710 <_TrySendOverflowPacket+0x64>
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	627a      	str	r2, [r7, #36]	; 0x24
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <_TrySendOverflowPacket+0xe0>)
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	4618      	mov	r0, r3
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	461a      	mov	r2, r3
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	4619      	mov	r1, r3
 8005750:	f7fa fd5e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005754:	4603      	mov	r3, r0
 8005756:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005758:	f7ff fade 	bl	8004d18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <_TrySendOverflowPacket+0xe0>)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <_TrySendOverflowPacket+0xe0>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <_TrySendOverflowPacket+0xe0>)
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e004      	b.n	8005780 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <_TrySendOverflowPacket+0xe0>)
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	4a03      	ldr	r2, [pc, #12]	; (800578c <_TrySendOverflowPacket+0xe0>)
 800577e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005780:	693b      	ldr	r3, [r7, #16]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3730      	adds	r7, #48	; 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20014264 	.word	0x20014264
 8005790:	e0001004 	.word	0xe0001004

08005794 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80057a0:	4b6d      	ldr	r3, [pc, #436]	; (8005958 <_SendPacket+0x1c4>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d010      	beq.n	80057ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80057a8:	4b6b      	ldr	r3, [pc, #428]	; (8005958 <_SendPacket+0x1c4>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80a5 	beq.w	80058fc <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057b2:	4b69      	ldr	r3, [pc, #420]	; (8005958 <_SendPacket+0x1c4>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d109      	bne.n	80057ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057ba:	f7ff ff77 	bl	80056ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <_SendPacket+0x1c4>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	f040 809c 	bne.w	8005900 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80057c8:	e001      	b.n	80057ce <_SendPacket+0x3a>
    goto Send;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <_SendPacket+0x3c>
Send:
 80057ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b1f      	cmp	r3, #31
 80057d4:	d809      	bhi.n	80057ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057d6:	4b60      	ldr	r3, [pc, #384]	; (8005958 <_SendPacket+0x1c4>)
 80057d8:	69da      	ldr	r2, [r3, #28]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f040 808d 	bne.w	8005904 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b17      	cmp	r3, #23
 80057ee:	d807      	bhi.n	8005800 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e03d      	b.n	800587c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b7f      	cmp	r3, #127	; 0x7f
 800580c:	d912      	bls.n	8005834 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	09da      	lsrs	r2, r3, #7
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b01      	subs	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	3a01      	subs	r2, #1
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e006      	b.n	8005842 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3b01      	subs	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b7f      	cmp	r3, #127	; 0x7f
 8005846:	d912      	bls.n	800586e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	09da      	lsrs	r2, r3, #7
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3b01      	subs	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	3a01      	subs	r2, #1
 8005860:	60fa      	str	r2, [r7, #12]
 8005862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e006      	b.n	800587c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3b01      	subs	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800587c:	4b37      	ldr	r3, [pc, #220]	; (800595c <_SendPacket+0x1c8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005882:	4b35      	ldr	r3, [pc, #212]	; (8005958 <_SendPacket+0x1c4>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	e00b      	b.n	80058ae <_SendPacket+0x11a>
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	6279      	str	r1, [r7, #36]	; 0x24
 80058a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	2b7f      	cmp	r3, #127	; 0x7f
 80058b2:	d8f0      	bhi.n	8005896 <_SendPacket+0x102>
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	627a      	str	r2, [r7, #36]	; 0x24
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <_SendPacket+0x1c4>)
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	4618      	mov	r0, r3
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	f7fa fc9c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058d8:	4603      	mov	r3, r0
 80058da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058dc:	f7ff fa1c 	bl	8004d18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058e6:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <_SendPacket+0x1c4>)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	60d3      	str	r3, [r2, #12]
 80058ec:	e00b      	b.n	8005906 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <_SendPacket+0x1c4>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <_SendPacket+0x1c4>)
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e004      	b.n	8005906 <_SendPacket+0x172>
    goto SendDone;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <_SendPacket+0x172>
      goto SendDone;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <_SendPacket+0x172>
      goto SendDone;
 8005904:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <_SendPacket+0x1c4>)
 8005908:	7e1b      	ldrb	r3, [r3, #24]
 800590a:	4619      	mov	r1, r3
 800590c:	4a14      	ldr	r2, [pc, #80]	; (8005960 <_SendPacket+0x1cc>)
 800590e:	460b      	mov	r3, r1
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	440b      	add	r3, r1
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	336c      	adds	r3, #108	; 0x6c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b0e      	ldr	r3, [pc, #56]	; (8005958 <_SendPacket+0x1c4>)
 800591e:	7e1b      	ldrb	r3, [r3, #24]
 8005920:	4618      	mov	r0, r3
 8005922:	490f      	ldr	r1, [pc, #60]	; (8005960 <_SendPacket+0x1cc>)
 8005924:	4603      	mov	r3, r0
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4403      	add	r3, r0
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	440b      	add	r3, r1
 800592e:	3370      	adds	r3, #112	; 0x70
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d00b      	beq.n	800594e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <_SendPacket+0x1c4>)
 8005938:	789b      	ldrb	r3, [r3, #2]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <_SendPacket+0x1c4>)
 8005940:	2201      	movs	r2, #1
 8005942:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005944:	f7ff fe40 	bl	80055c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005948:	4b03      	ldr	r3, [pc, #12]	; (8005958 <_SendPacket+0x1c4>)
 800594a:	2200      	movs	r2, #0
 800594c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800594e:	bf00      	nop
 8005950:	3728      	adds	r7, #40	; 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20014264 	.word	0x20014264
 800595c:	e0001004 	.word	0xe0001004
 8005960:	20014404 	.word	0x20014404

08005964 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005972:	2300      	movs	r3, #0
 8005974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005978:	4917      	ldr	r1, [pc, #92]	; (80059d8 <SEGGER_SYSVIEW_Init+0x74>)
 800597a:	4818      	ldr	r0, [pc, #96]	; (80059dc <SEGGER_SYSVIEW_Init+0x78>)
 800597c:	f7ff fcf8 	bl	8005370 <SEGGER_RTT_AllocUpBuffer>
 8005980:	4603      	mov	r3, r0
 8005982:	b2da      	uxtb	r2, r3
 8005984:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005986:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 800598a:	785a      	ldrb	r2, [r3, #1]
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 800598e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005992:	7e1b      	ldrb	r3, [r3, #24]
 8005994:	4618      	mov	r0, r3
 8005996:	2300      	movs	r3, #0
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2308      	movs	r3, #8
 800599c:	4a11      	ldr	r2, [pc, #68]	; (80059e4 <SEGGER_SYSVIEW_Init+0x80>)
 800599e:	490f      	ldr	r1, [pc, #60]	; (80059dc <SEGGER_SYSVIEW_Init+0x78>)
 80059a0:	f7ff fd6a 	bl	8005478 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <SEGGER_SYSVIEW_Init+0x84>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a0c      	ldr	r2, [pc, #48]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059b0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80059b2:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80059b8:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80059be:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80059c4:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	2001325c 	.word	0x2001325c
 80059dc:	08006af8 	.word	0x08006af8
 80059e0:	20014264 	.word	0x20014264
 80059e4:	2001425c 	.word	0x2001425c
 80059e8:	e0001004 	.word	0xe0001004

080059ec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80059f4:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6113      	str	r3, [r2, #16]
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20014264 	.word	0x20014264

08005a0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a14:	f3ef 8311 	mrs	r3, BASEPRI
 8005a18:	f04f 0120 	mov.w	r1, #32
 8005a1c:	f381 8811 	msr	BASEPRI, r1
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	4808      	ldr	r0, [pc, #32]	; (8005a44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005a24:	f7ff fdc4 	bl	80055b0 <_PreparePacket>
 8005a28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f7ff feb0 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f383 8811 	msr	BASEPRI, r3
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20014294 	.word	0x20014294

08005a48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a52:	f3ef 8311 	mrs	r3, BASEPRI
 8005a56:	f04f 0120 	mov.w	r1, #32
 8005a5a:	f381 8811 	msr	BASEPRI, r1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	4816      	ldr	r0, [pc, #88]	; (8005abc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005a62:	f7ff fda5 	bl	80055b0 <_PreparePacket>
 8005a66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e00b      	b.n	8005a8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	61f9      	str	r1, [r7, #28]
 8005a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	09db      	lsrs	r3, r3, #7
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b7f      	cmp	r3, #127	; 0x7f
 8005a92:	d8f0      	bhi.n	8005a76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	61fa      	str	r2, [r7, #28]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68f9      	ldr	r1, [r7, #12]
 8005aa8:	6938      	ldr	r0, [r7, #16]
 8005aaa:	f7ff fe73 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
}
 8005ab4:	bf00      	nop
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20014294 	.word	0x20014294

08005ac0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08c      	sub	sp, #48	; 0x30
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005acc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad0:	f04f 0120 	mov.w	r1, #32
 8005ad4:	f381 8811 	msr	BASEPRI, r1
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	4825      	ldr	r0, [pc, #148]	; (8005b70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005adc:	f7ff fd68 	bl	80055b0 <_PreparePacket>
 8005ae0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aee:	e00b      	b.n	8005b08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0c:	d8f0      	bhi.n	8005af0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e00b      	b.n	8005b40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6279      	str	r1, [r7, #36]	; 0x24
 8005b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b7f      	cmp	r3, #127	; 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	69b8      	ldr	r0, [r7, #24]
 8005b5c:	f7ff fe1a 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f383 8811 	msr	BASEPRI, r3
}
 8005b66:	bf00      	nop
 8005b68:	3730      	adds	r7, #48	; 0x30
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20014294 	.word	0x20014294

08005b74 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08e      	sub	sp, #56	; 0x38
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b82:	f3ef 8311 	mrs	r3, BASEPRI
 8005b86:	f04f 0120 	mov.w	r1, #32
 8005b8a:	f381 8811 	msr	BASEPRI, r1
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	4832      	ldr	r0, [pc, #200]	; (8005c5c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005b92:	f7ff fd0d 	bl	80055b0 <_PreparePacket>
 8005b96:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba4:	e00b      	b.n	8005bbe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	6379      	str	r1, [r7, #52]	; 0x34
 8005bb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	09db      	lsrs	r3, r3, #7
 8005bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc2:	d8f0      	bhi.n	8005ba6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	637a      	str	r2, [r7, #52]	; 0x34
 8005bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bdc:	e00b      	b.n	8005bf6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	09db      	lsrs	r3, r3, #7
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfa:	d8f0      	bhi.n	8005bde <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	e00b      	b.n	8005c2e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	1c59      	adds	r1, r3, #1
 8005c1e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	09db      	lsrs	r3, r3, #7
 8005c2c:	623b      	str	r3, [r7, #32]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2b7f      	cmp	r3, #127	; 0x7f
 8005c32:	d8f0      	bhi.n	8005c16 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	627a      	str	r2, [r7, #36]	; 0x24
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	6979      	ldr	r1, [r7, #20]
 8005c48:	69b8      	ldr	r0, [r7, #24]
 8005c4a:	f7ff fda3 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f383 8811 	msr	BASEPRI, r3
}
 8005c54:	bf00      	nop
 8005c56:	3738      	adds	r7, #56	; 0x38
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20014294 	.word	0x20014294

08005c60 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b090      	sub	sp, #64	; 0x40
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c72:	f04f 0120 	mov.w	r1, #32
 8005c76:	f381 8811 	msr	BASEPRI, r1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	4840      	ldr	r0, [pc, #256]	; (8005d80 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005c7e:	f7ff fc97 	bl	80055b0 <_PreparePacket>
 8005c82:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c90:	e00b      	b.n	8005caa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	1c59      	adds	r1, r3, #1
 8005c9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	09db      	lsrs	r3, r3, #7
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b7f      	cmp	r3, #127	; 0x7f
 8005cae:	d8f0      	bhi.n	8005c92 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc8:	e00b      	b.n	8005ce2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	1c59      	adds	r1, r3, #1
 8005cd2:	6379      	str	r1, [r7, #52]	; 0x34
 8005cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	09db      	lsrs	r3, r3, #7
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce6:	d8f0      	bhi.n	8005cca <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	637a      	str	r2, [r7, #52]	; 0x34
 8005cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	e00b      	b.n	8005d1a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	1c59      	adds	r1, r3, #1
 8005d0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	09db      	lsrs	r3, r3, #7
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1e:	d8f0      	bhi.n	8005d02 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	623b      	str	r3, [r7, #32]
 8005d38:	e00b      	b.n	8005d52 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	1c59      	adds	r1, r3, #1
 8005d42:	6279      	str	r1, [r7, #36]	; 0x24
 8005d44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	09db      	lsrs	r3, r3, #7
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	2b7f      	cmp	r3, #127	; 0x7f
 8005d56:	d8f0      	bhi.n	8005d3a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d5e:	6a3a      	ldr	r2, [r7, #32]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	6979      	ldr	r1, [r7, #20]
 8005d6c:	69b8      	ldr	r0, [r7, #24]
 8005d6e:	f7ff fd11 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f383 8811 	msr	BASEPRI, r3
}
 8005d78:	bf00      	nop
 8005d7a:	3740      	adds	r7, #64	; 0x40
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20014294 	.word	0x20014294

08005d84 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005d8a:	4b59      	ldr	r3, [pc, #356]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005d90:	f3ef 8311 	mrs	r3, BASEPRI
 8005d94:	f04f 0120 	mov.w	r1, #32
 8005d98:	f381 8811 	msr	BASEPRI, r1
 8005d9c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005d9e:	4b54      	ldr	r3, [pc, #336]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	220a      	movs	r2, #10
 8005da4:	4953      	ldr	r1, [pc, #332]	; (8005ef4 <SEGGER_SYSVIEW_Start+0x170>)
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fa fa32 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005db2:	f7fe ffb1 	bl	8004d18 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005db6:	200a      	movs	r0, #10
 8005db8:	f7ff fe28 	bl	8005a0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc0:	f04f 0120 	mov.w	r1, #32
 8005dc4:	f381 8811 	msr	BASEPRI, r1
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	484b      	ldr	r0, [pc, #300]	; (8005ef8 <SEGGER_SYSVIEW_Start+0x174>)
 8005dcc:	f7ff fbf0 	bl	80055b0 <_PreparePacket>
 8005dd0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dda:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de0:	e00b      	b.n	8005dfa <SEGGER_SYSVIEW_Start+0x76>
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfe:	d8f0      	bhi.n	8005de2 <SEGGER_SYSVIEW_Start+0x5e>
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	e00b      	b.n	8005e34 <SEGGER_SYSVIEW_Start+0xb0>
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	6279      	str	r1, [r7, #36]	; 0x24
 8005e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	09db      	lsrs	r3, r3, #7
 8005e32:	623b      	str	r3, [r7, #32]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b7f      	cmp	r3, #127	; 0x7f
 8005e38:	d8f0      	bhi.n	8005e1c <SEGGER_SYSVIEW_Start+0x98>
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e40:	6a3a      	ldr	r2, [r7, #32]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	4b28      	ldr	r3, [pc, #160]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e00b      	b.n	8005e6e <SEGGER_SYSVIEW_Start+0xea>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	61f9      	str	r1, [r7, #28]
 8005e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b7f      	cmp	r3, #127	; 0x7f
 8005e72:	d8f0      	bhi.n	8005e56 <SEGGER_SYSVIEW_Start+0xd2>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	61fa      	str	r2, [r7, #28]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e00b      	b.n	8005ea6 <SEGGER_SYSVIEW_Start+0x122>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	6179      	str	r1, [r7, #20]
 8005e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	09db      	lsrs	r3, r3, #7
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eaa:	d8f0      	bhi.n	8005e8e <SEGGER_SYSVIEW_Start+0x10a>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	617a      	str	r2, [r7, #20]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ebc:	2218      	movs	r2, #24
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fc67 	bl	8005794 <_SendPacket>
      RECORD_END();
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005eda:	f000 f9eb 	bl	80062b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005ede:	f000 f9b1 	bl	8006244 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005ee2:	f000 fc83 	bl	80067ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005ee6:	bf00      	nop
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20014264 	.word	0x20014264
 8005ef4:	08006b24 	.word	0x08006b24
 8005ef8:	20014294 	.word	0x20014294

08005efc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f02:	f3ef 8311 	mrs	r3, BASEPRI
 8005f06:	f04f 0120 	mov.w	r1, #32
 8005f0a:	f381 8811 	msr	BASEPRI, r1
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	480b      	ldr	r0, [pc, #44]	; (8005f40 <SEGGER_SYSVIEW_Stop+0x44>)
 8005f12:	f7ff fb4d 	bl	80055b0 <_PreparePacket>
 8005f16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <SEGGER_SYSVIEW_Stop+0x48>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005f20:	220b      	movs	r2, #11
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6838      	ldr	r0, [r7, #0]
 8005f26:	f7ff fc35 	bl	8005794 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <SEGGER_SYSVIEW_Stop+0x48>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f383 8811 	msr	BASEPRI, r3
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20014294 	.word	0x20014294
 8005f44:	20014264 	.word	0x20014264

08005f48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f52:	f04f 0120 	mov.w	r1, #32
 8005f56:	f381 8811 	msr	BASEPRI, r1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	4845      	ldr	r0, [pc, #276]	; (8006074 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005f5e:	f7ff fb27 	bl	80055b0 <_PreparePacket>
 8005f62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6c:	4b42      	ldr	r3, [pc, #264]	; (8006078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f72:	e00b      	b.n	8005f8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	1c59      	adds	r1, r3, #1
 8005f7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	09db      	lsrs	r3, r3, #7
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f90:	d8f0      	bhi.n	8005f74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	4b34      	ldr	r3, [pc, #208]	; (8006078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	e00b      	b.n	8005fc6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	6279      	str	r1, [r7, #36]	; 0x24
 8005fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	09db      	lsrs	r3, r3, #7
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005fca:	d8f0      	bhi.n	8005fae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	e00b      	b.n	8006000 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1c59      	adds	r1, r3, #1
 8005ff0:	61f9      	str	r1, [r7, #28]
 8005ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	09db      	lsrs	r3, r3, #7
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b7f      	cmp	r3, #127	; 0x7f
 8006004:	d8f0      	bhi.n	8005fe8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	61fa      	str	r2, [r7, #28]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	e00b      	b.n	8006038 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	6179      	str	r1, [r7, #20]
 800602a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	09db      	lsrs	r3, r3, #7
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b7f      	cmp	r3, #127	; 0x7f
 800603c:	d8f0      	bhi.n	8006020 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	617a      	str	r2, [r7, #20]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800604e:	2218      	movs	r2, #24
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	68b8      	ldr	r0, [r7, #8]
 8006054:	f7ff fb9e 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006066:	4b04      	ldr	r3, [pc, #16]	; (8006078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	4798      	blx	r3
  }
}
 800606c:	bf00      	nop
 800606e:	3730      	adds	r7, #48	; 0x30
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20014294 	.word	0x20014294
 8006078:	20014264 	.word	0x20014264

0800607c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b092      	sub	sp, #72	; 0x48
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006084:	f3ef 8311 	mrs	r3, BASEPRI
 8006088:	f04f 0120 	mov.w	r1, #32
 800608c:	f381 8811 	msr	BASEPRI, r1
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	486a      	ldr	r0, [pc, #424]	; (800623c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006094:	f7ff fa8c 	bl	80055b0 <_PreparePacket>
 8006098:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	647b      	str	r3, [r7, #68]	; 0x44
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b66      	ldr	r3, [pc, #408]	; (8006240 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	643b      	str	r3, [r7, #64]	; 0x40
 80060ae:	e00b      	b.n	80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80060b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	6479      	str	r1, [r7, #68]	; 0x44
 80060ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c4:	09db      	lsrs	r3, r3, #7
 80060c6:	643b      	str	r3, [r7, #64]	; 0x40
 80060c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ca:	2b7f      	cmp	r3, #127	; 0x7f
 80060cc:	d8f0      	bhi.n	80060b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80060ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	647a      	str	r2, [r7, #68]	; 0x44
 80060d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e8:	e00b      	b.n	8006102 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80060f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	09db      	lsrs	r3, r3, #7
 8006100:	63bb      	str	r3, [r7, #56]	; 0x38
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	2b7f      	cmp	r3, #127	; 0x7f
 8006106:	d8f0      	bhi.n	80060ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800610e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	4619      	mov	r1, r3
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff f9f5 	bl	8005510 <_EncodeStr>
 8006126:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006128:	2209      	movs	r2, #9
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	6938      	ldr	r0, [r7, #16]
 800612e:	f7ff fb31 	bl	8005794 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b40      	ldr	r3, [pc, #256]	; (8006240 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	633b      	str	r3, [r7, #48]	; 0x30
 8006146:	e00b      	b.n	8006160 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	b2da      	uxtb	r2, r3
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	6379      	str	r1, [r7, #52]	; 0x34
 8006152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	09db      	lsrs	r3, r3, #7
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	2b7f      	cmp	r3, #127	; 0x7f
 8006164:	d8f0      	bhi.n	8006148 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	637a      	str	r2, [r7, #52]	; 0x34
 800616c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006180:	e00b      	b.n	800619a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800618c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	09db      	lsrs	r3, r3, #7
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	2b7f      	cmp	r3, #127	; 0x7f
 800619e:	d8f0      	bhi.n	8006182 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	e00b      	b.n	80061d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	6279      	str	r1, [r7, #36]	; 0x24
 80061c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d8f0      	bhi.n	80061bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	627a      	str	r2, [r7, #36]	; 0x24
 80061e0:	6a3a      	ldr	r2, [r7, #32]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	61fb      	str	r3, [r7, #28]
 80061ee:	2300      	movs	r3, #0
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	e00b      	b.n	800620c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	1c59      	adds	r1, r3, #1
 80061fc:	61f9      	str	r1, [r7, #28]
 80061fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	09db      	lsrs	r3, r3, #7
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b7f      	cmp	r3, #127	; 0x7f
 8006210:	d8f0      	bhi.n	80061f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	61fa      	str	r2, [r7, #28]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006222:	2215      	movs	r2, #21
 8006224:	68f9      	ldr	r1, [r7, #12]
 8006226:	6938      	ldr	r0, [r7, #16]
 8006228:	f7ff fab4 	bl	8005794 <_SendPacket>
  RECORD_END();
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f383 8811 	msr	BASEPRI, r3
}
 8006232:	bf00      	nop
 8006234:	3748      	adds	r7, #72	; 0x48
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20014294 	.word	0x20014294
 8006240:	20014264 	.word	0x20014264

08006244 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4798      	blx	r3
  }
}
 8006262:	bf00      	nop
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20014264 	.word	0x20014264

0800626c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006274:	f3ef 8311 	mrs	r3, BASEPRI
 8006278:	f04f 0120 	mov.w	r1, #32
 800627c:	f381 8811 	msr	BASEPRI, r1
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	480b      	ldr	r0, [pc, #44]	; (80062b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006284:	f7ff f994 	bl	80055b0 <_PreparePacket>
 8006288:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	6938      	ldr	r0, [r7, #16]
 8006290:	f7ff f93e 	bl	8005510 <_EncodeStr>
 8006294:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006296:	220e      	movs	r2, #14
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	6938      	ldr	r0, [r7, #16]
 800629c:	f7ff fa7a 	bl	8005794 <_SendPacket>
  RECORD_END();
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f383 8811 	msr	BASEPRI, r3
}
 80062a6:	bf00      	nop
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20014294 	.word	0x20014294

080062b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01a      	beq.n	80062f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4798      	blx	r3
 80062d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80062da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	000a      	movs	r2, r1
 80062e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062ea:	4613      	mov	r3, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4621      	mov	r1, r4
 80062f0:	200d      	movs	r0, #13
 80062f2:	f7ff fbe5 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x2>
 80062f6:	e006      	b.n	8006306 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4619      	mov	r1, r3
 80062fe:	200c      	movs	r0, #12
 8006300:	f7ff fba2 	bl	8005a48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}
 800630e:	bf00      	nop
 8006310:	20014264 	.word	0x20014264
 8006314:	e0001004 	.word	0xe0001004

08006318 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800631e:	f3ef 8311 	mrs	r3, BASEPRI
 8006322:	f04f 0120 	mov.w	r1, #32
 8006326:	f381 8811 	msr	BASEPRI, r1
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	4819      	ldr	r0, [pc, #100]	; (8006394 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800632e:	f7ff f93f 	bl	80055b0 <_PreparePacket>
 8006332:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006338:	4b17      	ldr	r3, [pc, #92]	; (8006398 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006340:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	e00b      	b.n	8006364 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	6179      	str	r1, [r7, #20]
 8006356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	09db      	lsrs	r3, r3, #7
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b7f      	cmp	r3, #127	; 0x7f
 8006368:	d8f0      	bhi.n	800634c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	617a      	str	r2, [r7, #20]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800637a:	2202      	movs	r2, #2
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	68b8      	ldr	r0, [r7, #8]
 8006380:	f7ff fa08 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f383 8811 	msr	BASEPRI, r3
}
 800638a:	bf00      	nop
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20014294 	.word	0x20014294
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063a2:	f3ef 8311 	mrs	r3, BASEPRI
 80063a6:	f04f 0120 	mov.w	r1, #32
 80063aa:	f381 8811 	msr	BASEPRI, r1
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	4807      	ldr	r0, [pc, #28]	; (80063d0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80063b2:	f7ff f8fd 	bl	80055b0 <_PreparePacket>
 80063b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80063b8:	2203      	movs	r2, #3
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6838      	ldr	r0, [r7, #0]
 80063be:	f7ff f9e9 	bl	8005794 <_SendPacket>
  RECORD_END();
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f383 8811 	msr	BASEPRI, r3
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20014294 	.word	0x20014294

080063d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063da:	f3ef 8311 	mrs	r3, BASEPRI
 80063de:	f04f 0120 	mov.w	r1, #32
 80063e2:	f381 8811 	msr	BASEPRI, r1
 80063e6:	607b      	str	r3, [r7, #4]
 80063e8:	4807      	ldr	r0, [pc, #28]	; (8006408 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80063ea:	f7ff f8e1 	bl	80055b0 <_PreparePacket>
 80063ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80063f0:	2212      	movs	r2, #18
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6838      	ldr	r0, [r7, #0]
 80063f6:	f7ff f9cd 	bl	8005794 <_SendPacket>
  RECORD_END();
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f383 8811 	msr	BASEPRI, r3
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20014294 	.word	0x20014294

0800640c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006412:	f3ef 8311 	mrs	r3, BASEPRI
 8006416:	f04f 0120 	mov.w	r1, #32
 800641a:	f381 8811 	msr	BASEPRI, r1
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	4807      	ldr	r0, [pc, #28]	; (8006440 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006422:	f7ff f8c5 	bl	80055b0 <_PreparePacket>
 8006426:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006428:	2211      	movs	r2, #17
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6838      	ldr	r0, [r7, #0]
 800642e:	f7ff f9b1 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f383 8811 	msr	BASEPRI, r3
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20014294 	.word	0x20014294

08006444 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800644c:	f3ef 8311 	mrs	r3, BASEPRI
 8006450:	f04f 0120 	mov.w	r1, #32
 8006454:	f381 8811 	msr	BASEPRI, r1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	4819      	ldr	r0, [pc, #100]	; (80064c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800645c:	f7ff f8a8 	bl	80055b0 <_PreparePacket>
 8006460:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006466:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e00b      	b.n	8006492 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1c59      	adds	r1, r3, #1
 8006482:	61f9      	str	r1, [r7, #28]
 8006484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	09db      	lsrs	r3, r3, #7
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b7f      	cmp	r3, #127	; 0x7f
 8006496:	d8f0      	bhi.n	800647a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	61fa      	str	r2, [r7, #28]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80064a8:	2208      	movs	r2, #8
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	6938      	ldr	r0, [r7, #16]
 80064ae:	f7ff f971 	bl	8005794 <_SendPacket>
  RECORD_END();
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f383 8811 	msr	BASEPRI, r3
}
 80064b8:	bf00      	nop
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20014294 	.word	0x20014294
 80064c4:	20014264 	.word	0x20014264

080064c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064d0:	f3ef 8311 	mrs	r3, BASEPRI
 80064d4:	f04f 0120 	mov.w	r1, #32
 80064d8:	f381 8811 	msr	BASEPRI, r1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	4819      	ldr	r0, [pc, #100]	; (8006544 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80064e0:	f7ff f866 	bl	80055b0 <_PreparePacket>
 80064e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064ea:	4b17      	ldr	r3, [pc, #92]	; (8006548 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e00b      	b.n	8006516 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	61f9      	str	r1, [r7, #28]
 8006508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	09db      	lsrs	r3, r3, #7
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b7f      	cmp	r3, #127	; 0x7f
 800651a:	d8f0      	bhi.n	80064fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	61fa      	str	r2, [r7, #28]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800652c:	2204      	movs	r2, #4
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	6938      	ldr	r0, [r7, #16]
 8006532:	f7ff f92f 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f383 8811 	msr	BASEPRI, r3
}
 800653c:	bf00      	nop
 800653e:	3720      	adds	r7, #32
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20014294 	.word	0x20014294
 8006548:	20014264 	.word	0x20014264

0800654c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006554:	f3ef 8311 	mrs	r3, BASEPRI
 8006558:	f04f 0120 	mov.w	r1, #32
 800655c:	f381 8811 	msr	BASEPRI, r1
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	4819      	ldr	r0, [pc, #100]	; (80065c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006564:	f7ff f824 	bl	80055b0 <_PreparePacket>
 8006568:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800656e:	4b17      	ldr	r3, [pc, #92]	; (80065cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	e00b      	b.n	800659a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	1c59      	adds	r1, r3, #1
 800658a:	61f9      	str	r1, [r7, #28]
 800658c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	09db      	lsrs	r3, r3, #7
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b7f      	cmp	r3, #127	; 0x7f
 800659e:	d8f0      	bhi.n	8006582 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	61fa      	str	r2, [r7, #28]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80065b0:	2206      	movs	r2, #6
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	6938      	ldr	r0, [r7, #16]
 80065b6:	f7ff f8ed 	bl	8005794 <_SendPacket>
  RECORD_END();
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f383 8811 	msr	BASEPRI, r3
}
 80065c0:	bf00      	nop
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20014294 	.word	0x20014294
 80065cc:	20014264 	.word	0x20014264

080065d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80065da:	f3ef 8311 	mrs	r3, BASEPRI
 80065de:	f04f 0120 	mov.w	r1, #32
 80065e2:	f381 8811 	msr	BASEPRI, r1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	4827      	ldr	r0, [pc, #156]	; (8006688 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80065ea:	f7fe ffe1 	bl	80055b0 <_PreparePacket>
 80065ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	e00b      	b.n	8006620 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	6279      	str	r1, [r7, #36]	; 0x24
 8006612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	09db      	lsrs	r3, r3, #7
 800661e:	623b      	str	r3, [r7, #32]
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2b7f      	cmp	r3, #127	; 0x7f
 8006624:	d8f0      	bhi.n	8006608 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	627a      	str	r2, [r7, #36]	; 0x24
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	61f9      	str	r1, [r7, #28]
 800664a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b7f      	cmp	r3, #127	; 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800666e:	2207      	movs	r2, #7
 8006670:	68f9      	ldr	r1, [r7, #12]
 8006672:	6938      	ldr	r0, [r7, #16]
 8006674:	f7ff f88e 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f383 8811 	msr	BASEPRI, r3
}
 800667e:	bf00      	nop
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20014294 	.word	0x20014294
 800668c:	20014264 	.word	0x20014264

08006690 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	1ad3      	subs	r3, r2, r3
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	20014264 	.word	0x20014264

080066b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	; 0x30
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80066ba:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d06d      	beq.n	800679e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80066c8:	2300      	movs	r3, #0
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80066cc:	e008      	b.n	80066e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	3301      	adds	r3, #1
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d3f2      	bcc.n	80066ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80066e8:	e000      	b.n	80066ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80066ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d055      	beq.n	800679e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066f2:	f3ef 8311 	mrs	r3, BASEPRI
 80066f6:	f04f 0120 	mov.w	r1, #32
 80066fa:	f381 8811 	msr	BASEPRI, r1
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	482a      	ldr	r0, [pc, #168]	; (80067ac <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006702:	f7fe ff55 	bl	80055b0 <_PreparePacket>
 8006706:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	623b      	str	r3, [r7, #32]
 8006714:	e00b      	b.n	800672e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	1c59      	adds	r1, r3, #1
 800671e:	6279      	str	r1, [r7, #36]	; 0x24
 8006720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	09db      	lsrs	r3, r3, #7
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	2b7f      	cmp	r3, #127	; 0x7f
 8006732:	d8f0      	bhi.n	8006716 <SEGGER_SYSVIEW_SendModule+0x66>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	627a      	str	r2, [r7, #36]	; 0x24
 800673a:	6a3a      	ldr	r2, [r7, #32]
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e00b      	b.n	8006768 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	b2da      	uxtb	r2, r3
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1c59      	adds	r1, r3, #1
 8006758:	61f9      	str	r1, [r7, #28]
 800675a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	09db      	lsrs	r3, r3, #7
 8006766:	61bb      	str	r3, [r7, #24]
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b7f      	cmp	r3, #127	; 0x7f
 800676c:	d8f0      	bhi.n	8006750 <SEGGER_SYSVIEW_SendModule+0xa0>
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	61fa      	str	r2, [r7, #28]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	4619      	mov	r1, r3
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7fe fec2 	bl	8005510 <_EncodeStr>
 800678c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800678e:	2216      	movs	r2, #22
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	6938      	ldr	r0, [r7, #16]
 8006794:	f7fe fffe 	bl	8005794 <_SendPacket>
      RECORD_END();
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800679e:	bf00      	nop
 80067a0:	3730      	adds	r7, #48	; 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2001428c 	.word	0x2001428c
 80067ac:	20014294 	.word	0x20014294

080067b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f2      	bne.n	80067c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2001428c 	.word	0x2001428c

080067ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80067f2:	f3ef 8311 	mrs	r3, BASEPRI
 80067f6:	f04f 0120 	mov.w	r1, #32
 80067fa:	f381 8811 	msr	BASEPRI, r1
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	4817      	ldr	r0, [pc, #92]	; (8006860 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006802:	f7fe fed5 	bl	80055b0 <_PreparePacket>
 8006806:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	4b14      	ldr	r3, [pc, #80]	; (8006864 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	e00b      	b.n	8006830 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	b2da      	uxtb	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	6179      	str	r1, [r7, #20]
 8006822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	09db      	lsrs	r3, r3, #7
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b7f      	cmp	r3, #127	; 0x7f
 8006834:	d8f0      	bhi.n	8006818 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	617a      	str	r2, [r7, #20]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006846:	221b      	movs	r2, #27
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	68b8      	ldr	r0, [r7, #8]
 800684c:	f7fe ffa2 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f383 8811 	msr	BASEPRI, r3
}
 8006856:	bf00      	nop
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20014294 	.word	0x20014294
 8006864:	20014290 	.word	0x20014290

08006868 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006870:	f3ef 8311 	mrs	r3, BASEPRI
 8006874:	f04f 0120 	mov.w	r1, #32
 8006878:	f381 8811 	msr	BASEPRI, r1
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	4827      	ldr	r0, [pc, #156]	; (800691c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006880:	f7fe fe96 	bl	80055b0 <_PreparePacket>
 8006884:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	6938      	ldr	r0, [r7, #16]
 800688c:	f7fe fe40 	bl	8005510 <_EncodeStr>
 8006890:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	2301      	movs	r3, #1
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e00b      	b.n	80068b4 <SEGGER_SYSVIEW_Warn+0x4c>
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	1c59      	adds	r1, r3, #1
 80068a4:	6279      	str	r1, [r7, #36]	; 0x24
 80068a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	09db      	lsrs	r3, r3, #7
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2b7f      	cmp	r3, #127	; 0x7f
 80068b8:	d8f0      	bhi.n	800689c <SEGGER_SYSVIEW_Warn+0x34>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	627a      	str	r2, [r7, #36]	; 0x24
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e00b      	b.n	80068ec <SEGGER_SYSVIEW_Warn+0x84>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	61f9      	str	r1, [r7, #28]
 80068de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b7f      	cmp	r3, #127	; 0x7f
 80068f0:	d8f0      	bhi.n	80068d4 <SEGGER_SYSVIEW_Warn+0x6c>
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	61fa      	str	r2, [r7, #28]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006902:	221a      	movs	r2, #26
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7fe ff44 	bl	8005794 <_SendPacket>
  RECORD_END();
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f383 8811 	msr	BASEPRI, r3
}
 8006912:	bf00      	nop
 8006914:	3728      	adds	r7, #40	; 0x28
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20014294 	.word	0x20014294

08006920 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006926:	7e1b      	ldrb	r3, [r3, #24]
 8006928:	4619      	mov	r1, r3
 800692a:	4a13      	ldr	r2, [pc, #76]	; (8006978 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800692c:	460b      	mov	r3, r1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	440b      	add	r3, r1
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4413      	add	r3, r2
 8006936:	336c      	adds	r3, #108	; 0x6c
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800693c:	7e1b      	ldrb	r3, [r3, #24]
 800693e:	4618      	mov	r0, r3
 8006940:	490d      	ldr	r1, [pc, #52]	; (8006978 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006942:	4603      	mov	r3, r0
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	4403      	add	r3, r0
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	440b      	add	r3, r1
 800694c:	3370      	adds	r3, #112	; 0x70
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d00b      	beq.n	800696c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006956:	789b      	ldrb	r3, [r3, #2]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800695e:	2201      	movs	r2, #1
 8006960:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006962:	f7fe fe31 	bl	80055c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006966:	4b03      	ldr	r3, [pc, #12]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006968:	2200      	movs	r2, #0
 800696a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800696c:	4b01      	ldr	r3, [pc, #4]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800696e:	781b      	ldrb	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20014264 	.word	0x20014264
 8006978:	20014404 	.word	0x20014404

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f000 f83c 	bl	8006a0c <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08006b38 	.word	0x08006b38
 80069b8:	08006b38 	.word	0x08006b38
 80069bc:	08006b38 	.word	0x08006b38
 80069c0:	08006b3c 	.word	0x08006b3c

080069c4 <memcmp>:
 80069c4:	b530      	push	{r4, r5, lr}
 80069c6:	3901      	subs	r1, #1
 80069c8:	2400      	movs	r4, #0
 80069ca:	42a2      	cmp	r2, r4
 80069cc:	d101      	bne.n	80069d2 <memcmp+0xe>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e005      	b.n	80069de <memcmp+0x1a>
 80069d2:	5d03      	ldrb	r3, [r0, r4]
 80069d4:	3401      	adds	r4, #1
 80069d6:	5d0d      	ldrb	r5, [r1, r4]
 80069d8:	42ab      	cmp	r3, r5
 80069da:	d0f6      	beq.n	80069ca <memcmp+0x6>
 80069dc:	1b58      	subs	r0, r3, r5
 80069de:	bd30      	pop	{r4, r5, pc}

080069e0 <memcpy>:
 80069e0:	440a      	add	r2, r1
 80069e2:	4291      	cmp	r1, r2
 80069e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e8:	d100      	bne.n	80069ec <memcpy+0xc>
 80069ea:	4770      	bx	lr
 80069ec:	b510      	push	{r4, lr}
 80069ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f6:	4291      	cmp	r1, r2
 80069f8:	d1f9      	bne.n	80069ee <memcpy+0xe>
 80069fa:	bd10      	pop	{r4, pc}

080069fc <memset>:
 80069fc:	4402      	add	r2, r0
 80069fe:	4603      	mov	r3, r0
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d100      	bne.n	8006a06 <memset+0xa>
 8006a04:	4770      	bx	lr
 8006a06:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0a:	e7f9      	b.n	8006a00 <memset+0x4>

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
