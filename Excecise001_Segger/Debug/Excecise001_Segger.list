
Excecise001_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007774  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007adc  08007adc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144e8  20000078  08007b5c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014560  08007b5c  00024560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b486  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366e  00000000  00000000  0003b52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  00040108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a65  00000000  00000000  00041508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184d1  00000000  00000000  00065f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deff3  00000000  00000000  0007e43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d431  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  0015d484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800792c 	.word	0x0800792c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800792c 	.word	0x0800792c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200144a8 	.word	0x200144a8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fad7 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f853 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8e9 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065a:	f000 f8bd 	bl	80007d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  // Enable the CCNT counter
  DWT_CTRL |= (1 << 0);
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0x98>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <main+0x98>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800066a:	f004 fc53 	bl	8004f14 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800066e:	f005 fef3 	bl	8006458 <SEGGER_SYSVIEW_Start>

  /*
  //  Define Tasks
  //  task handler go in  user code 4
  */
    status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from task-1", 2, &task_1_handle);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2302      	movs	r3, #2
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <main+0x9c>)
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	4919      	ldr	r1, [pc, #100]	; (80006e8 <main+0xa0>)
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <main+0xa4>)
 8000684:	f002 fdce 	bl	8003224 <xTaskCreate>
 8000688:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS); //macro -> activates assert and traps code in infinite loop -> good for debugging
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00a      	beq.n	80006a6 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000694:	f383 8811 	msr	BASEPRI, r3
 8000698:	f3bf 8f6f 	isb	sy
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006a2:	bf00      	nop
 80006a4:	e7fe      	b.n	80006a4 <main+0x5c>

    status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from task-2", 2, &task_2_handle);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <main+0xa8>)
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	4910      	ldr	r1, [pc, #64]	; (80006f4 <main+0xac>)
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <main+0xb0>)
 80006b6:	f002 fdb5 	bl	8003224 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00a      	beq.n	80006d8 <main+0x90>
        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60fb      	str	r3, [r7, #12]
    }
 80006d4:	bf00      	nop
 80006d6:	e7fe      	b.n	80006d6 <main+0x8e>

    //Start the freeRTOS scheduler
    vTaskStartScheduler(); //only return is problem launching scheduler (eg. memory insufficient)
 80006d8:	f002 fefa 	bl	80034d0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x94>
 80006de:	bf00      	nop
 80006e0:	e0001000 	.word	0xe0001000
 80006e4:	08007944 	.word	0x08007944
 80006e8:	0800795c 	.word	0x0800795c
 80006ec:	0800090d 	.word	0x0800090d
 80006f0:	08007964 	.word	0x08007964
 80006f4:	0800797c 	.word	0x0800797c
 80006f8:	08000949 	.word	0x08000949

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 fcc4 	bl	8007098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <SystemClock_Config+0xd4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SystemClock_Config+0xd8>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000778:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f808 	bl	80017a0 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000796:	f000 f907 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fcf4 	bl	80011a4 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c2:	f000 f8f1 	bl	80009a8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f001 fd12 	bl	8002238 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8c5 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200143d8 	.word	0x200143d8
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <MX_GPIO_Init+0xd0>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <MX_GPIO_Init+0xd4>)
 80008b8:	f000 fc5a 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_GPIO_Init+0xd8>)
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_GPIO_Init+0xdc>)
 80008d2:	f000 fab9 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d6:	2320      	movs	r3, #32
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0xd4>)
 80008ee:	f000 faab 	bl	8000e48 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	10210000 	.word	0x10210000
 8000908:	40020800 	.word	0x40020800

0800090c <task1_handler>:

/* USER CODE BEGIN 4 */

/*Task Handler*/
static void task1_handler(void* parameters)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	; 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
//		printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters); //format string
 8000914:	f107 000c 	add.w	r0, r7, #12
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <task1_handler+0x34>)
 800091c:	2164      	movs	r1, #100	; 0x64
 800091e:	f006 fbc3 	bl	80070a8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg); //send a message to the host - shows up in sytem view
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fb06 	bl	8006f38 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD(); //give up processor ->cooparative
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <task1_handler+0x38>)
 800092e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters); //format string
 800093c:	e7ea      	b.n	8000914 <task1_handler+0x8>
 800093e:	bf00      	nop
 8000940:	08007984 	.word	0x08007984
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	; 0x70
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
		{
//			printf("%s\n", (char*)parameters);

			snprintf(msg, 100, "%s\n", (char*)parameters); //format string
 8000950:	f107 000c 	add.w	r0, r7, #12
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <task2_handler+0x34>)
 8000958:	2164      	movs	r1, #100	; 0x64
 800095a:	f006 fba5 	bl	80070a8 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg); //send a message to the host - shows up in sytem view
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4618      	mov	r0, r3
 8000964:	f006 fae8 	bl	8006f38 <SEGGER_SYSVIEW_PrintfTarget>

			taskYIELD(); //give up processor ->cooparative
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <task2_handler+0x38>)
 800096a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	f3bf 8f6f 	isb	sy
			snprintf(msg, 100, "%s\n", (char*)parameters); //format string
 8000978:	e7ea      	b.n	8000950 <task2_handler+0x8>
 800097a:	bf00      	nop
 800097c:	08007984 	.word	0x08007984
 8000980:	e000ed04 	.word	0xe000ed04

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f955 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40001000 	.word	0x40001000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80009f2:	f003 fed9 	bl	80047a8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a7a:	f000 f9e5 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2036      	movs	r0, #54	; 0x36
 8000aaa:	f000 f9a3 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aae:	2036      	movs	r0, #54	; 0x36
 8000ab0:	f000 f9bc 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_InitTick+0xa4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <HAL_InitTick+0xa4>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_InitTick+0xa4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 0210 	add.w	r2, r7, #16
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fc7c 	bl	80013d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae0:	f000 fc52 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_InitTick+0xa8>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	0c9b      	lsrs	r3, r3, #18
 8000af4:	3b01      	subs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_InitTick+0xac>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <HAL_InitTick+0xb0>)
 8000afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_InitTick+0xac>)
 8000b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_InitTick+0xac>)
 8000b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_InitTick+0xac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_InitTick+0xac>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <HAL_InitTick+0xac>)
 8000b1a:	f001 f8df 	bl	8001cdc <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <HAL_InitTick+0xac>)
 8000b26:	f001 f933 	bl	8001d90 <HAL_TIM_Base_Start_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	2001441c 	.word	0x2001441c
 8000b44:	40001000 	.word	0x40001000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <TIM6_DAC_IRQHandler+0x10>)
 8000b7a:	f001 f979 	bl	8001e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2001441c 	.word	0x2001441c

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f006 fa1d 	bl	8007018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd33 	bl	8000648 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bf0:	08007ae4 	.word	0x08007ae4
  ldr r2, =_sbss
 8000bf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bf8:	20014560 	.word	0x20014560

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8d8 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff30 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff febe 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20014464 	.word	0x20014464

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20014464 	.word	0x20014464

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e165      	b.n	8001130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8154 	bne.w	800112a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ae 	beq.w	800112a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <HAL_GPIO_Init+0x300>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	; (8001148 <HAL_GPIO_Init+0x300>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <HAL_GPIO_Init+0x300>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a58      	ldr	r2, [pc, #352]	; (800114c <HAL_GPIO_Init+0x304>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x308>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d025      	beq.n	8001062 <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x30c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x310>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x314>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x318>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x20a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x31c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x206>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a49      	ldr	r2, [pc, #292]	; (8001168 <HAL_GPIO_Init+0x320>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x202>
 8001046:	2306      	movs	r3, #6
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800104a:	2307      	movs	r3, #7
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	; (800114c <HAL_GPIO_Init+0x304>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_GPIO_Init+0x324>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_GPIO_Init+0x324>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_GPIO_Init+0x324>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_GPIO_Init+0x324>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_GPIO_Init+0x324>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_GPIO_Init+0x324>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_GPIO_Init+0x324>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_GPIO_Init+0x324>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae96 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40021400 	.word	0x40021400
 8001168:	40021800 	.word	0x40021800
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0cc      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b8:	4b68      	ldr	r3, [pc, #416]	; (800135c <HAL_RCC_ClockConfig+0x1b8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d90c      	bls.n	80011e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ce:	4b63      	ldr	r3, [pc, #396]	; (800135c <HAL_RCC_ClockConfig+0x1b8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0b8      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f8:	4b59      	ldr	r3, [pc, #356]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a58      	ldr	r2, [pc, #352]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a52      	ldr	r2, [pc, #328]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800121a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800121c:	4b50      	ldr	r3, [pc, #320]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	494d      	ldr	r1, [pc, #308]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	4313      	orrs	r3, r2
 800122c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d044      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d119      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e07f      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d003      	beq.n	8001262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800125e:	2b03      	cmp	r3, #3
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e06f      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e067      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f023 0203 	bic.w	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4934      	ldr	r1, [pc, #208]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	4313      	orrs	r3, r2
 8001292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001294:	f7ff fcea 	bl	8000c6c <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129c:	f7ff fce6 	bl	8000c6c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e04f      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 020c 	and.w	r2, r3, #12
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d1eb      	bne.n	800129c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <HAL_RCC_ClockConfig+0x1b8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d20c      	bcs.n	80012ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e032      	b.n	8001352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4916      	ldr	r1, [pc, #88]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	490e      	ldr	r1, [pc, #56]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800132a:	f000 f887 	bl	800143c <HAL_RCC_GetSysClockFreq>
 800132e:	4602      	mov	r2, r0
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	490a      	ldr	r1, [pc, #40]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	5ccb      	ldrb	r3, [r1, r3]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_ClockConfig+0x1c8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fba2 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023c00 	.word	0x40023c00
 8001360:	40023800 	.word	0x40023800
 8001364:	08007a64 	.word	0x08007a64
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_RCC_GetHCLKFreq+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800138c:	f7ff fff0 	bl	8001370 <HAL_RCC_GetHCLKFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	0a9b      	lsrs	r3, r3, #10
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	4903      	ldr	r1, [pc, #12]	; (80013ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	08007a74 	.word	0x08007a74

080013b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013b4:	f7ff ffdc 	bl	8001370 <HAL_RCC_GetHCLKFreq>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	0b5b      	lsrs	r3, r3, #13
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013c6:	5ccb      	ldrb	r3, [r1, r3]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	08007a74 	.word	0x08007a74

080013d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	220f      	movs	r2, #15
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_RCC_GetClockConfig+0x60>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 020f 	and.w	r2, r3, #15
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	601a      	str	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800143c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001440:	b088      	sub	sp, #32
 8001442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001458:	4bce      	ldr	r3, [pc, #824]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b0c      	cmp	r3, #12
 8001462:	f200 818d 	bhi.w	8001780 <HAL_RCC_GetSysClockFreq+0x344>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_RCC_GetSysClockFreq+0x30>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	080014a1 	.word	0x080014a1
 8001470:	08001781 	.word	0x08001781
 8001474:	08001781 	.word	0x08001781
 8001478:	08001781 	.word	0x08001781
 800147c:	080014a7 	.word	0x080014a7
 8001480:	08001781 	.word	0x08001781
 8001484:	08001781 	.word	0x08001781
 8001488:	08001781 	.word	0x08001781
 800148c:	080014ad 	.word	0x080014ad
 8001490:	08001781 	.word	0x08001781
 8001494:	08001781 	.word	0x08001781
 8001498:	08001781 	.word	0x08001781
 800149c:	08001621 	.word	0x08001621
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a0:	4bbd      	ldr	r3, [pc, #756]	; (8001798 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014a2:	61bb      	str	r3, [r7, #24]
       break;
 80014a4:	e16f      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a6:	4bbd      	ldr	r3, [pc, #756]	; (800179c <HAL_RCC_GetSysClockFreq+0x360>)
 80014a8:	61bb      	str	r3, [r7, #24]
      break;
 80014aa:	e16c      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ac:	4bb9      	ldr	r3, [pc, #740]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b6:	4bb7      	ldr	r3, [pc, #732]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d053      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c2:	4bb4      	ldr	r3, [pc, #720]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	099b      	lsrs	r3, r3, #6
 80014c8:	461a      	mov	r2, r3
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	ea02 0400 	and.w	r4, r2, r0
 80014da:	603c      	str	r4, [r7, #0]
 80014dc:	400b      	ands	r3, r1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	014b      	lsls	r3, r1, #5
 80014f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014f6:	0142      	lsls	r2, r0, #5
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	4623      	mov	r3, r4
 80014fe:	1ac0      	subs	r0, r0, r3
 8001500:	462b      	mov	r3, r5
 8001502:	eb61 0103 	sbc.w	r1, r1, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	018b      	lsls	r3, r1, #6
 8001510:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001514:	0182      	lsls	r2, r0, #6
 8001516:	1a12      	subs	r2, r2, r0
 8001518:	eb63 0301 	sbc.w	r3, r3, r1
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	00d9      	lsls	r1, r3, #3
 8001526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800152a:	00d0      	lsls	r0, r2, #3
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4621      	mov	r1, r4
 8001532:	1852      	adds	r2, r2, r1
 8001534:	4629      	mov	r1, r5
 8001536:	eb43 0101 	adc.w	r1, r3, r1
 800153a:	460b      	mov	r3, r1
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	0259      	lsls	r1, r3, #9
 8001546:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800154a:	0250      	lsls	r0, r2, #9
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	461a      	mov	r2, r3
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f7fe fef8 	bl	8000350 <__aeabi_uldivmod>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4613      	mov	r3, r2
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	e04c      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156a:	4b8a      	ldr	r3, [pc, #552]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	461a      	mov	r2, r3
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	ea02 0a00 	and.w	sl, r2, r0
 8001582:	ea03 0b01 	and.w	fp, r3, r1
 8001586:	4650      	mov	r0, sl
 8001588:	4659      	mov	r1, fp
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	014b      	lsls	r3, r1, #5
 8001594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001598:	0142      	lsls	r2, r0, #5
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	ebb0 000a 	subs.w	r0, r0, sl
 80015a2:	eb61 010b 	sbc.w	r1, r1, fp
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	018b      	lsls	r3, r1, #6
 80015b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015b4:	0182      	lsls	r2, r0, #6
 80015b6:	1a12      	subs	r2, r2, r0
 80015b8:	eb63 0301 	sbc.w	r3, r3, r1
 80015bc:	f04f 0000 	mov.w	r0, #0
 80015c0:	f04f 0100 	mov.w	r1, #0
 80015c4:	00d9      	lsls	r1, r3, #3
 80015c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015ca:	00d0      	lsls	r0, r2, #3
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	eb12 020a 	adds.w	r2, r2, sl
 80015d4:	eb43 030b 	adc.w	r3, r3, fp
 80015d8:	f04f 0000 	mov.w	r0, #0
 80015dc:	f04f 0100 	mov.w	r1, #0
 80015e0:	0299      	lsls	r1, r3, #10
 80015e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80015e6:	0290      	lsls	r0, r2, #10
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	f7fe feaa 	bl	8000350 <__aeabi_uldivmod>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4613      	mov	r3, r2
 8001602:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001604:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	3301      	adds	r3, #1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	61bb      	str	r3, [r7, #24]
      break;
 800161e:	e0b2      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001620:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800162a:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d04d      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001636:	4b57      	ldr	r3, [pc, #348]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	461a      	mov	r2, r3
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea02 0800 	and.w	r8, r2, r0
 800164e:	ea03 0901 	and.w	r9, r3, r1
 8001652:	4640      	mov	r0, r8
 8001654:	4649      	mov	r1, r9
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	014b      	lsls	r3, r1, #5
 8001660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001664:	0142      	lsls	r2, r0, #5
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	ebb0 0008 	subs.w	r0, r0, r8
 800166e:	eb61 0109 	sbc.w	r1, r1, r9
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	018b      	lsls	r3, r1, #6
 800167c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001680:	0182      	lsls	r2, r0, #6
 8001682:	1a12      	subs	r2, r2, r0
 8001684:	eb63 0301 	sbc.w	r3, r3, r1
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	00d9      	lsls	r1, r3, #3
 8001692:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001696:	00d0      	lsls	r0, r2, #3
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	eb12 0208 	adds.w	r2, r2, r8
 80016a0:	eb43 0309 	adc.w	r3, r3, r9
 80016a4:	f04f 0000 	mov.w	r0, #0
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	0259      	lsls	r1, r3, #9
 80016ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016b2:	0250      	lsls	r0, r2, #9
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	461a      	mov	r2, r3
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	f7fe fe44 	bl	8000350 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	e04a      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	099b      	lsrs	r3, r3, #6
 80016d8:	461a      	mov	r2, r3
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	ea02 0400 	and.w	r4, r2, r0
 80016ea:	ea03 0501 	and.w	r5, r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	014b      	lsls	r3, r1, #5
 80016fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001700:	0142      	lsls	r2, r0, #5
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	1b00      	subs	r0, r0, r4
 8001708:	eb61 0105 	sbc.w	r1, r1, r5
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	018b      	lsls	r3, r1, #6
 8001716:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800171a:	0182      	lsls	r2, r0, #6
 800171c:	1a12      	subs	r2, r2, r0
 800171e:	eb63 0301 	sbc.w	r3, r3, r1
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	00d9      	lsls	r1, r3, #3
 800172c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001730:	00d0      	lsls	r0, r2, #3
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	1912      	adds	r2, r2, r4
 8001738:	eb45 0303 	adc.w	r3, r5, r3
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	0299      	lsls	r1, r3, #10
 8001746:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800174a:	0290      	lsls	r0, r2, #10
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	461a      	mov	r2, r3
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	f7fe fdf8 	bl	8000350 <__aeabi_uldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4613      	mov	r3, r2
 8001766:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RCC_GetSysClockFreq+0x358>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	0f1b      	lsrs	r3, r3, #28
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	61bb      	str	r3, [r7, #24]
      break;
 800177e:	e002      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001782:	61bb      	str	r3, [r7, #24]
      break;
 8001784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001786:	69bb      	ldr	r3, [r7, #24]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	00f42400 	.word	0x00f42400
 800179c:	007a1200 	.word	0x007a1200

080017a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e28d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8083 	beq.w	80018c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c0:	4b94      	ldr	r3, [pc, #592]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d019      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017cc:	4b91      	ldr	r3, [pc, #580]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d8:	4b8e      	ldr	r3, [pc, #568]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e4:	d00c      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e6:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017fe:	d10b      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d05b      	beq.n	80018c4 <HAL_RCC_OscConfig+0x124>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d157      	bne.n	80018c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e25a      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x90>
 8001822:	4b7c      	ldr	r3, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7b      	ldr	r2, [pc, #492]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xb4>
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6b      	ldr	r2, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f9fa 	bl	8000c6c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f9f6 	bl	8000c6c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e21f      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xdc>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f9e6 	bl	8000c6c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f9e2 	bl	8000c6c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e20b      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x104>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06f      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1d3      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f98f 	bl	8000c6c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff f98b 	bl	8000c6c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1b4      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4925      	ldr	r1, [pc, #148]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f96e 	bl	8000c6c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff f96a 	bl	8000c6c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e193      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f94e 	bl	8000c6c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f94a 	bl	8000c6c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e173      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x234>
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f937 	bl	8000c6c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	e00e      	b.n	8001a20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f933 	bl	8000c6c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d907      	bls.n	8001a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e15c      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470000 	.word	0x42470000
 8001a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b8a      	ldr	r3, [pc, #552]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ea      	bne.n	8001a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8097 	beq.w	8001b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a7e      	ldr	r2, [pc, #504]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f8f3 	bl	8000c6c <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f8ef 	bl	8000c6c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e118      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x31e>
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x340>
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a5d      	ldr	r2, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a59      	ldr	r2, [pc, #356]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f8b4 	bl	8000c6c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f8b0 	bl	8000c6c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0d7      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCC_OscConfig+0x368>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f89e 	bl	8000c6c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f89a 	bl	8000c6c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0c1      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ad 	beq.w	8001ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d060      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d145      	bne.n	8001c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f86e 	bl	8000c6c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f86a 	bl	8000c6c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e093      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	071b      	lsls	r3, r3, #28
 8001bde:	491b      	ldr	r1, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f83f 	bl	8000c6c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f83b 	bl	8000c6c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e064      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x452>
 8001c10:	e05c      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f828 	bl	8000c6c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f824 	bl	8000c6c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e04d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x480>
 8001c3e:	e045      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e040      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCC_OscConfig+0x538>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d129      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d122      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d119      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e041      	b.n	8001d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f839 	bl	8001d7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 f9d8 	bl	80020d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e04e      	b.n	8001e46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd2:	d01d      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d010      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	e007      	b.n	8001e44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800
 8001e60:	40000c00 	.word	0x40000c00
 8001e64:	40010400 	.word	0x40010400
 8001e68:	40014000 	.word	0x40014000
 8001e6c:	40001800 	.word	0x40001800

08001e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0202 	mvn.w	r2, #2
 8001e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8ee 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8e0 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8f1 	bl	80020a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0204 	mvn.w	r2, #4
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8c4 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8b6 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8c7 	bl	80020a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0208 	mvn.w	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f89a 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f88c 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f89d 	bl	80020a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0210 	mvn.w	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f870 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f862 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f873 	bl	80020a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0201 	mvn.w	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fcc8 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b80      	cmp	r3, #128	; 0x80
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f902 	bl	8002224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f838 	bl	80020bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b20      	cmp	r3, #32
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b20      	cmp	r3, #32
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0220 	mvn.w	r2, #32
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8cc 	bl	8002210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a40      	ldr	r2, [pc, #256]	; (80021e4 <TIM_Base_SetConfig+0x114>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ee:	d00f      	beq.n	8002110 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3d      	ldr	r2, [pc, #244]	; (80021e8 <TIM_Base_SetConfig+0x118>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00b      	beq.n	8002110 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <TIM_Base_SetConfig+0x11c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <TIM_Base_SetConfig+0x120>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <TIM_Base_SetConfig+0x124>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d108      	bne.n	8002122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <TIM_Base_SetConfig+0x114>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02b      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002130:	d027      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <TIM_Base_SetConfig+0x118>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d023      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <TIM_Base_SetConfig+0x11c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <TIM_Base_SetConfig+0x120>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01b      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <TIM_Base_SetConfig+0x124>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d017      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <TIM_Base_SetConfig+0x128>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <TIM_Base_SetConfig+0x12c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00f      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a26      	ldr	r2, [pc, #152]	; (8002200 <TIM_Base_SetConfig+0x130>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00b      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a25      	ldr	r2, [pc, #148]	; (8002204 <TIM_Base_SetConfig+0x134>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <TIM_Base_SetConfig+0x138>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <TIM_Base_SetConfig+0x13c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <TIM_Base_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <TIM_Base_SetConfig+0xf8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <TIM_Base_SetConfig+0x124>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d103      	bne.n	80021d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	615a      	str	r2, [r3, #20]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40010400 	.word	0x40010400
 80021f8:	40014000 	.word	0x40014000
 80021fc:	40014400 	.word	0x40014400
 8002200:	40014800 	.word	0x40014800
 8002204:	40001800 	.word	0x40001800
 8002208:	40001c00 	.word	0x40001c00
 800220c:	40002000 	.word	0x40002000

08002210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e03f      	b.n	80022ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fbd0 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	; 0x24
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f829 	bl	80022d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b09f      	sub	sp, #124	; 0x7c
 80022da:	af00      	add	r7, sp, #0
 80022dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	ea40 0301 	orr.w	r3, r0, r1
 80022f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
 8002300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	431a      	orrs	r2, r3
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4313      	orrs	r3, r2
 800230c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800230e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002318:	f021 010c 	bic.w	r1, r1, #12
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002322:	430b      	orrs	r3, r1
 8002324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	6999      	ldr	r1, [r3, #24]
 8002334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	ea40 0301 	orr.w	r3, r0, r1
 800233c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4bc5      	ldr	r3, [pc, #788]	; (8002658 <UART_SetConfig+0x384>)
 8002344:	429a      	cmp	r2, r3
 8002346:	d004      	beq.n	8002352 <UART_SetConfig+0x7e>
 8002348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4bc3      	ldr	r3, [pc, #780]	; (800265c <UART_SetConfig+0x388>)
 800234e:	429a      	cmp	r2, r3
 8002350:	d103      	bne.n	800235a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002352:	f7ff f82d 	bl	80013b0 <HAL_RCC_GetPCLK2Freq>
 8002356:	6778      	str	r0, [r7, #116]	; 0x74
 8002358:	e002      	b.n	8002360 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800235a:	f7ff f815 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 800235e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002368:	f040 80b6 	bne.w	80024d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800236c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236e:	461c      	mov	r4, r3
 8002370:	f04f 0500 	mov.w	r5, #0
 8002374:	4622      	mov	r2, r4
 8002376:	462b      	mov	r3, r5
 8002378:	1891      	adds	r1, r2, r2
 800237a:	6439      	str	r1, [r7, #64]	; 0x40
 800237c:	415b      	adcs	r3, r3
 800237e:	647b      	str	r3, [r7, #68]	; 0x44
 8002380:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002384:	1912      	adds	r2, r2, r4
 8002386:	eb45 0303 	adc.w	r3, r5, r3
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	00d9      	lsls	r1, r3, #3
 8002394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002398:	00d0      	lsls	r0, r2, #3
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	1911      	adds	r1, r2, r4
 80023a0:	6639      	str	r1, [r7, #96]	; 0x60
 80023a2:	416b      	adcs	r3, r5
 80023a4:	667b      	str	r3, [r7, #100]	; 0x64
 80023a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	1891      	adds	r1, r2, r2
 80023b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023b4:	415b      	adcs	r3, r3
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023c0:	f7fd ffc6 	bl	8000350 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4ba5      	ldr	r3, [pc, #660]	; (8002660 <UART_SetConfig+0x38c>)
 80023ca:	fba3 2302 	umull	r2, r3, r3, r2
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	011e      	lsls	r6, r3, #4
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	461c      	mov	r4, r3
 80023d6:	f04f 0500 	mov.w	r5, #0
 80023da:	4622      	mov	r2, r4
 80023dc:	462b      	mov	r3, r5
 80023de:	1891      	adds	r1, r2, r2
 80023e0:	6339      	str	r1, [r7, #48]	; 0x30
 80023e2:	415b      	adcs	r3, r3
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
 80023e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023ea:	1912      	adds	r2, r2, r4
 80023ec:	eb45 0303 	adc.w	r3, r5, r3
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	00d9      	lsls	r1, r3, #3
 80023fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fe:	00d0      	lsls	r0, r2, #3
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	1911      	adds	r1, r2, r4
 8002406:	65b9      	str	r1, [r7, #88]	; 0x58
 8002408:	416b      	adcs	r3, r5
 800240a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	461a      	mov	r2, r3
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	1891      	adds	r1, r2, r2
 8002418:	62b9      	str	r1, [r7, #40]	; 0x28
 800241a:	415b      	adcs	r3, r3
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002422:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002426:	f7fd ff93 	bl	8000350 <__aeabi_uldivmod>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <UART_SetConfig+0x38c>)
 8002430:	fba3 1302 	umull	r1, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	2164      	movs	r1, #100	; 0x64
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	4a87      	ldr	r2, [pc, #540]	; (8002660 <UART_SetConfig+0x38c>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002450:	441e      	add	r6, r3
 8002452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002454:	4618      	mov	r0, r3
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	1894      	adds	r4, r2, r2
 8002460:	623c      	str	r4, [r7, #32]
 8002462:	415b      	adcs	r3, r3
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800246a:	1812      	adds	r2, r2, r0
 800246c:	eb41 0303 	adc.w	r3, r1, r3
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	f04f 0500 	mov.w	r5, #0
 8002478:	00dd      	lsls	r5, r3, #3
 800247a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800247e:	00d4      	lsls	r4, r2, #3
 8002480:	4622      	mov	r2, r4
 8002482:	462b      	mov	r3, r5
 8002484:	1814      	adds	r4, r2, r0
 8002486:	653c      	str	r4, [r7, #80]	; 0x50
 8002488:	414b      	adcs	r3, r1
 800248a:	657b      	str	r3, [r7, #84]	; 0x54
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	461a      	mov	r2, r3
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	1891      	adds	r1, r2, r2
 8002498:	61b9      	str	r1, [r7, #24]
 800249a:	415b      	adcs	r3, r3
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80024a6:	f7fd ff53 	bl	8000350 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <UART_SetConfig+0x38c>)
 80024b0:	fba3 1302 	umull	r1, r3, r3, r2
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	2164      	movs	r1, #100	; 0x64
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	3332      	adds	r3, #50	; 0x32
 80024c2:	4a67      	ldr	r2, [pc, #412]	; (8002660 <UART_SetConfig+0x38c>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	f003 0207 	and.w	r2, r3, #7
 80024ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4432      	add	r2, r6
 80024d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024d6:	e0b9      	b.n	800264c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024da:	461c      	mov	r4, r3
 80024dc:	f04f 0500 	mov.w	r5, #0
 80024e0:	4622      	mov	r2, r4
 80024e2:	462b      	mov	r3, r5
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	6139      	str	r1, [r7, #16]
 80024e8:	415b      	adcs	r3, r3
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024f0:	1912      	adds	r2, r2, r4
 80024f2:	eb45 0303 	adc.w	r3, r5, r3
 80024f6:	f04f 0000 	mov.w	r0, #0
 80024fa:	f04f 0100 	mov.w	r1, #0
 80024fe:	00d9      	lsls	r1, r3, #3
 8002500:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002504:	00d0      	lsls	r0, r2, #3
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	eb12 0804 	adds.w	r8, r2, r4
 800250e:	eb43 0905 	adc.w	r9, r3, r5
 8002512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	008b      	lsls	r3, r1, #2
 8002526:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800252a:	0082      	lsls	r2, r0, #2
 800252c:	4640      	mov	r0, r8
 800252e:	4649      	mov	r1, r9
 8002530:	f7fd ff0e 	bl	8000350 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <UART_SetConfig+0x38c>)
 800253a:	fba3 2302 	umull	r2, r3, r3, r2
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	011e      	lsls	r6, r3, #4
 8002542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002544:	4618      	mov	r0, r3
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	1894      	adds	r4, r2, r2
 8002550:	60bc      	str	r4, [r7, #8]
 8002552:	415b      	adcs	r3, r3
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800255a:	1812      	adds	r2, r2, r0
 800255c:	eb41 0303 	adc.w	r3, r1, r3
 8002560:	f04f 0400 	mov.w	r4, #0
 8002564:	f04f 0500 	mov.w	r5, #0
 8002568:	00dd      	lsls	r5, r3, #3
 800256a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800256e:	00d4      	lsls	r4, r2, #3
 8002570:	4622      	mov	r2, r4
 8002572:	462b      	mov	r3, r5
 8002574:	1814      	adds	r4, r2, r0
 8002576:	64bc      	str	r4, [r7, #72]	; 0x48
 8002578:	414b      	adcs	r3, r1
 800257a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	008b      	lsls	r3, r1, #2
 8002590:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002594:	0082      	lsls	r2, r0, #2
 8002596:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800259a:	f7fd fed9 	bl	8000350 <__aeabi_uldivmod>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <UART_SetConfig+0x38c>)
 80025a4:	fba3 1302 	umull	r1, r3, r3, r2
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	2164      	movs	r1, #100	; 0x64
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	3332      	adds	r3, #50	; 0x32
 80025b6:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <UART_SetConfig+0x38c>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c2:	441e      	add	r6, r3
 80025c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c6:	4618      	mov	r0, r3
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	1894      	adds	r4, r2, r2
 80025d2:	603c      	str	r4, [r7, #0]
 80025d4:	415b      	adcs	r3, r3
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025dc:	1812      	adds	r2, r2, r0
 80025de:	eb41 0303 	adc.w	r3, r1, r3
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	f04f 0500 	mov.w	r5, #0
 80025ea:	00dd      	lsls	r5, r3, #3
 80025ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025f0:	00d4      	lsls	r4, r2, #3
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	eb12 0a00 	adds.w	sl, r2, r0
 80025fa:	eb43 0b01 	adc.w	fp, r3, r1
 80025fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002616:	0082      	lsls	r2, r0, #2
 8002618:	4650      	mov	r0, sl
 800261a:	4659      	mov	r1, fp
 800261c:	f7fd fe98 	bl	8000350 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <UART_SetConfig+0x38c>)
 8002626:	fba3 1302 	umull	r1, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2164      	movs	r1, #100	; 0x64
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	3332      	adds	r3, #50	; 0x32
 8002638:	4a09      	ldr	r2, [pc, #36]	; (8002660 <UART_SetConfig+0x38c>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4432      	add	r2, r6
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	377c      	adds	r7, #124	; 0x7c
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002656:	bf00      	nop
 8002658:	40011000 	.word	0x40011000
 800265c:	40011400 	.word	0x40011400
 8002660:	51eb851f 	.word	0x51eb851f

08002664 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f103 0208 	add.w	r2, r3, #8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f103 0208 	add.w	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0208 	add.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d103      	bne.n	8002726 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e00c      	b.n	8002740 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3308      	adds	r3, #8
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e002      	b.n	8002734 <vListInsert+0x2e>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d2f6      	bcs.n	800272e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6892      	ldr	r2, [r2, #8]
 800278e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6852      	ldr	r2, [r2, #4]
 8002798:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d103      	bne.n	80027ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <xQueueGenericReset+0x2a>
        __asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	60bb      	str	r3, [r7, #8]
    }
 80027f2:	bf00      	nop
 80027f4:	e7fe      	b.n	80027f4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80027f6:	f002 f855 	bl	80048a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	68f9      	ldr	r1, [r7, #12]
 8002804:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	441a      	add	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	3b01      	subs	r3, #1
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	441a      	add	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	22ff      	movs	r2, #255	; 0xff
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00f      	beq.n	8002874 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3310      	adds	r3, #16
 8002858:	4618      	mov	r0, r3
 800285a:	f001 f8b3 	bl	80039c4 <xTaskRemoveFromEventList>
 800285e:	e009      	b.n	8002874 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3310      	adds	r3, #16
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fefd 	bl	8002664 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3324      	adds	r3, #36	; 0x24
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fef8 	bl	8002664 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002874:	f002 f846 	bl	8004904 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002882:	b580      	push	{r7, lr}
 8002884:	b08c      	sub	sp, #48	; 0x30
 8002886:	af02      	add	r7, sp, #8
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	4613      	mov	r3, r2
 800288e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <xQueueGenericCreate+0x2a>
        __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	61bb      	str	r3, [r7, #24]
    }
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <xQueueGenericCreate+0x48>
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d101      	bne.n	80028ce <xQueueGenericCreate+0x4c>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <xQueueGenericCreate+0x4e>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <xQueueGenericCreate+0x68>
        __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	617b      	str	r3, [r7, #20]
    }
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80028f0:	d90a      	bls.n	8002908 <xQueueGenericCreate+0x86>
        __asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	613b      	str	r3, [r7, #16]
    }
 8002904:	bf00      	nop
 8002906:	e7fe      	b.n	8002906 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	3350      	adds	r3, #80	; 0x50
 800290c:	4618      	mov	r0, r3
 800290e:	f002 f8f5 	bl	8004afc <pvPortMalloc>
 8002912:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3350      	adds	r3, #80	; 0x50
 8002922:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002924:	79fa      	ldrb	r2, [r7, #7]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f805 	bl	8002940 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002936:	6a3b      	ldr	r3, [r7, #32]
    }
 8002938:	4618      	mov	r0, r3
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e002      	b.n	8002962 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800296e:	2101      	movs	r1, #1
 8002970:	69b8      	ldr	r0, [r7, #24]
 8002972:	f7ff ff2b 	bl	80027cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	2073      	movs	r0, #115	; 0x73
 8002986:	f003 fc5f 	bl	8006248 <SEGGER_SYSVIEW_RecordU32x3>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b090      	sub	sp, #64	; 0x40
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029a2:	2300      	movs	r3, #0
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <xQueueGenericSend+0x32>
        __asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029c2:	bf00      	nop
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <xQueueGenericSend+0x40>
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <xQueueGenericSend+0x44>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <xQueueGenericSend+0x46>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <xQueueGenericSend+0x60>
        __asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d103      	bne.n	8002a02 <xQueueGenericSend+0x6e>
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <xQueueGenericSend+0x72>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueGenericSend+0x74>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueGenericSend+0x8e>
        __asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	623b      	str	r3, [r7, #32]
    }
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a22:	f001 f969 	bl	8003cf8 <xTaskGetSchedulerState>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <xQueueGenericSend+0x9e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueGenericSend+0xa2>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueGenericSend+0xa4>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xQueueGenericSend+0xbe>
        __asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	61fb      	str	r3, [r7, #28]
    }
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a52:	f001 ff27 	bl	80048a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <xQueueGenericSend+0xd4>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11f      	bne.n	8002aa8 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 f978 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	205a      	movs	r0, #90	; 0x5a
 8002a7e:	f003 fc59 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a88:	f000 fa56 	bl	8002f38 <prvCopyDataToQueue>
 8002a8c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 ff92 	bl	80039c4 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002aa0:	f001 ff30 	bl	8004904 <vPortExitCritical>
                return pdPASS;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e07d      	b.n	8002ba4 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d110      	bne.n	8002ad0 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002aae:	f001 ff29 	bl	8004904 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 f953 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	205a      	movs	r0, #90	; 0x5a
 8002ac8:	f003 fc34 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e069      	b.n	8002ba4 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ffd8 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ae4:	f001 ff0e 	bl	8004904 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ae8:	f000 fd54 	bl	8003594 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002aec:	f001 feda 	bl	80048a4 <vPortEnterCritical>
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d103      	bne.n	8002b06 <xQueueGenericSend+0x172>
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <xQueueGenericSend+0x188>
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1c:	f001 fef2 	bl	8004904 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b20:	1d3a      	adds	r2, r7, #4
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 ffc7 	bl	8003abc <xTaskCheckForTimeOut>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d124      	bne.n	8002b7e <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b36:	f000 faf7 	bl	8003128 <prvIsQueueFull>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d018      	beq.n	8002b72 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	3310      	adds	r3, #16
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fee9 	bl	8003920 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b50:	f000 fa82 	bl	8003058 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002b54:	f000 fd2c 	bl	80035b0 <xTaskResumeAll>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f af79 	bne.w	8002a52 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <xQueueGenericSend+0x218>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	e76f      	b.n	8002a52 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b74:	f000 fa70 	bl	8003058 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b78:	f000 fd1a 	bl	80035b0 <xTaskResumeAll>
 8002b7c:	e769      	b.n	8002a52 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b80:	f000 fa6a 	bl	8003058 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b84:	f000 fd14 	bl	80035b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 f8e8 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	205a      	movs	r0, #90	; 0x5a
 8002b9e:	f003 fbc9 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002ba2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3738      	adds	r7, #56	; 0x38
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b090      	sub	sp, #64	; 0x40
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <xQueueGenericSendFromISR+0x3c>
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <xQueueGenericSendFromISR+0x40>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <xQueueGenericSendFromISR+0x42>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d103      	bne.n	8002c1a <xQueueGenericSendFromISR+0x6a>
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericSendFromISR+0x6e>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <xQueueGenericSendFromISR+0x70>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	623b      	str	r3, [r7, #32]
    }
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c3a:	f001 ff1f 	bl	8004a7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	61fa      	str	r2, [r7, #28]
 8002c54:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002c56:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <xQueueGenericSendFromISR+0xbc>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d148      	bne.n	8002cfe <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 f86e 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002c84:	4601      	mov	r1, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2060      	movs	r0, #96	; 0x60
 8002c8c:	f003 fa82 	bl	8006194 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c96:	f000 f94f 	bl	8002f38 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002c9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d112      	bne.n	8002cca <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d025      	beq.n	8002cf8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fe87 	bl	80039c4 <xTaskRemoveFromEventList>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01d      	beq.n	8002cf8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e016      	b.n	8002cf8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002cca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002cce:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd0:	d10a      	bne.n	8002ce8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	617b      	str	r3, [r7, #20]
    }
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cec:	3301      	adds	r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	b25a      	sxtb	r2, r3
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002cfc:	e00b      	b.n	8002d16 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 f82d 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002d06:	4601      	mov	r1, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2060      	movs	r0, #96	; 0x60
 8002d0e:	f003 fa41 	bl	8006194 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002d20:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3740      	adds	r7, #64	; 0x40
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b08f      	sub	sp, #60	; 0x3c
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <xQueueReceive+0x30>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	623b      	str	r3, [r7, #32]
    }
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <xQueueReceive+0x3e>
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <xQueueReceive+0x42>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueReceive+0x44>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueReceive+0x5e>
        __asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	61fb      	str	r3, [r7, #28]
    }
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d8a:	f000 ffb5 	bl	8003cf8 <xTaskGetSchedulerState>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <xQueueReceive+0x6e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <xQueueReceive+0x72>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueReceive+0x74>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xQueueReceive+0x8e>
        __asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	61bb      	str	r3, [r7, #24]
    }
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dba:	f001 fd73 	bl	80048a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d024      	beq.n	8002e14 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dce:	f000 f91d 	bl	800300c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 ffc3 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f003 ffbf 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002de2:	4602      	mov	r2, r0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2101      	movs	r1, #1
 8002de8:	9100      	str	r1, [sp, #0]
 8002dea:	4621      	mov	r1, r4
 8002dec:	205c      	movs	r0, #92	; 0x5c
 8002dee:	f003 faa1 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	3310      	adds	r3, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fddc 	bl	80039c4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e0c:	f001 fd7a 	bl	8004904 <vPortExitCritical>
                return pdPASS;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e08a      	b.n	8002f2a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e1a:	f001 fd73 	bl	8004904 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 ff9d 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002e26:	4604      	mov	r4, r0
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f003 ff99 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2101      	movs	r1, #1
 8002e34:	9100      	str	r1, [sp, #0]
 8002e36:	4621      	mov	r1, r4
 8002e38:	205c      	movs	r0, #92	; 0x5c
 8002e3a:	f003 fa7b 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e073      	b.n	8002f2a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fe1f 	bl	8003a90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e56:	f001 fd55 	bl	8004904 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e5a:	f000 fb9b 	bl	8003594 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e5e:	f001 fd21 	bl	80048a4 <vPortEnterCritical>
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d103      	bne.n	8002e78 <xQueueReceive+0x14c>
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d103      	bne.n	8002e8e <xQueueReceive+0x162>
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e8e:	f001 fd39 	bl	8004904 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e92:	1d3a      	adds	r2, r7, #4
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fe0e 	bl	8003abc <xTaskCheckForTimeOut>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d124      	bne.n	8002ef0 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea8:	f000 f928 	bl	80030fc <prvIsQueueEmpty>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	3324      	adds	r3, #36	; 0x24
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fd30 	bl	8003920 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec2:	f000 f8c9 	bl	8003058 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ec6:	f000 fb73 	bl	80035b0 <xTaskResumeAll>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f af74 	bne.w	8002dba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <xQueueReceive+0x208>)
 8002ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	e76a      	b.n	8002dba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee6:	f000 f8b7 	bl	8003058 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002eea:	f000 fb61 	bl	80035b0 <xTaskResumeAll>
 8002eee:	e764      	b.n	8002dba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef2:	f000 f8b1 	bl	8003058 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ef6:	f000 fb5b 	bl	80035b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efc:	f000 f8fe 	bl	80030fc <prvIsQueueEmpty>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f43f af59 	beq.w	8002dba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 ff28 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002f10:	4604      	mov	r4, r0
 8002f12:	2000      	movs	r0, #0
 8002f14:	f003 ff24 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	9100      	str	r1, [sp, #0]
 8002f20:	4621      	mov	r1, r4
 8002f22:	205c      	movs	r0, #92	; 0x5c
 8002f24:	f003 fa06 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002f28:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3734      	adds	r7, #52	; 0x34
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d14d      	bne.n	8002ffa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fee6 	bl	8003d34 <xTaskPriorityDisinherit>
 8002f68:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e043      	b.n	8002ffa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d119      	bne.n	8002fac <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6858      	ldr	r0, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	461a      	mov	r2, r3
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	f004 f87a 	bl	800707c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	441a      	add	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d32b      	bcc.n	8002ffa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	e026      	b.n	8002ffa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68d8      	ldr	r0, [r3, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	f004 f860 	bl	800707c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d207      	bcs.n	8002fe8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	425b      	negs	r3, r3
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d105      	bne.n	8002ffa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003002:	697b      	ldr	r3, [r7, #20]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	441a      	add	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	d303      	bcc.n	8003040 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	461a      	mov	r2, r3
 800304a:	6838      	ldr	r0, [r7, #0]
 800304c:	f004 f816 	bl	800707c <memcpy>
    }
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003060:	f001 fc20 	bl	80048a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800306a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800306c:	e011      	b.n	8003092 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d012      	beq.n	800309c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3324      	adds	r3, #36	; 0x24
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fca2 	bl	80039c4 <xTaskRemoveFromEventList>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003086:	f000 fd7f 	bl	8003b88 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	3b01      	subs	r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	dce9      	bgt.n	800306e <prvUnlockQueue+0x16>
 800309a:	e000      	b.n	800309e <prvUnlockQueue+0x46>
                        break;
 800309c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80030a6:	f001 fc2d 	bl	8004904 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80030aa:	f001 fbfb 	bl	80048a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b6:	e011      	b.n	80030dc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d012      	beq.n	80030e6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3310      	adds	r3, #16
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fc7d 	bl	80039c4 <xTaskRemoveFromEventList>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80030d0:	f000 fd5a 	bl	8003b88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80030dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	dce9      	bgt.n	80030b8 <prvUnlockQueue+0x60>
 80030e4:	e000      	b.n	80030e8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80030e6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	22ff      	movs	r2, #255	; 0xff
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80030f0:	f001 fc08 	bl	8004904 <vPortExitCritical>
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003104:	f001 fbce 	bl	80048a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e001      	b.n	800311a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800311a:	f001 fbf3 	bl	8004904 <vPortExitCritical>

    return xReturn;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003130:	f001 fbb8 	bl	80048a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	429a      	cmp	r2, r3
 800313e:	d102      	bne.n	8003146 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003140:	2301      	movs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e001      	b.n	800314a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800314a:	f001 fbdb 	bl	8004904 <vPortExitCritical>

    return xReturn;
 800314e:	68fb      	ldr	r3, [r7, #12]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e01e      	b.n	80031a6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <vQueueAddToRegistry+0x60>)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d115      	bne.n	80031a0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003174:	4910      	ldr	r1, [pc, #64]	; (80031b8 <vQueueAddToRegistry+0x60>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <vQueueAddToRegistry+0x60>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fde7 	bl	8006d60 <SEGGER_SYSVIEW_ShrinkId>
 8003192:	4601      	mov	r1, r0
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	2071      	movs	r0, #113	; 0x71
 800319a:	f002 fffb 	bl	8006194 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800319e:	e006      	b.n	80031ae <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b07      	cmp	r3, #7
 80031aa:	d9dd      	bls.n	8003168 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20014468 	.word	0x20014468

080031bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80031cc:	f001 fb6a 	bl	80048a4 <vPortEnterCritical>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d103      	bne.n	80031e6 <vQueueWaitForMessageRestricted+0x2a>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d103      	bne.n	80031fc <vQueueWaitForMessageRestricted+0x40>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fc:	f001 fb82 	bl	8004904 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3324      	adds	r3, #36	; 0x24
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fba9 	bl	8003968 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff1e 	bl	8003058 <prvUnlockQueue>
    }
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af04      	add	r7, sp, #16
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f001 fc5f 	bl	8004afc <pvPortMalloc>
 800323e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003246:	2058      	movs	r0, #88	; 0x58
 8003248:	f001 fc58 	bl	8004afc <pvPortMalloc>
 800324c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
 800325a:	e005      	b.n	8003268 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800325c:	6978      	ldr	r0, [r7, #20]
 800325e:	f001 fd2d 	bl	8004cbc <vPortFree>
 8003262:	e001      	b.n	8003268 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d013      	beq.n	8003296 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	2300      	movs	r3, #0
 8003272:	9303      	str	r3, [sp, #12]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	9302      	str	r3, [sp, #8]
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f80e 	bl	80032a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800328a:	69f8      	ldr	r0, [r7, #28]
 800328c:	f000 f8a2 	bl	80033d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003290:	2301      	movs	r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e002      	b.n	800329c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800329c:	69bb      	ldr	r3, [r7, #24]
    }
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b088      	sub	sp, #32
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	461a      	mov	r2, r3
 80032be:	21a5      	movs	r1, #165	; 0xa5
 80032c0:	f003 feea 	bl	8007098 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032ce:	3b01      	subs	r3, #1
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f023 0307 	bic.w	r3, r3, #7
 80032dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	617b      	str	r3, [r7, #20]
    }
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01f      	beq.n	8003344 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	e012      	b.n	8003330 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	7819      	ldrb	r1, [r3, #0]
 8003312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	3334      	adds	r3, #52	; 0x34
 800331a:	460a      	mov	r2, r1
 800331c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b09      	cmp	r3, #9
 8003334:	d9e9      	bls.n	800330a <prvInitialiseNewTask+0x64>
 8003336:	e000      	b.n	800333a <prvInitialiseNewTask+0x94>
            {
                break;
 8003338:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003342:	e003      	b.n	800334c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	2b04      	cmp	r3, #4
 8003350:	d901      	bls.n	8003356 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003352:	2304      	movs	r3, #4
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003360:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	2200      	movs	r2, #0
 8003366:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	3304      	adds	r3, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f999 	bl	80026a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	3318      	adds	r3, #24
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff f994 	bl	80026a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003380:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	f1c3 0205 	rsb	r2, r3, #5
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	3350      	adds	r3, #80	; 0x50
 8003396:	2204      	movs	r2, #4
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f003 fe7c 	bl	8007098 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	3354      	adds	r3, #84	; 0x54
 80033a4:	2201      	movs	r2, #1
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fe75 	bl	8007098 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	69b8      	ldr	r0, [r7, #24]
 80033b4:	f001 f8c8 	bl	8004548 <pxPortInitialiseStack>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033ca:	bf00      	nop
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af02      	add	r7, sp, #8
 80033da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80033dc:	f001 fa62 	bl	80048a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <prvAddNewTaskToReadyList+0xe4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <prvAddNewTaskToReadyList+0xe4>)
 80033e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80033ea:	4b34      	ldr	r3, [pc, #208]	; (80034bc <prvAddNewTaskToReadyList+0xe8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80033f2:	4a32      	ldr	r2, [pc, #200]	; (80034bc <prvAddNewTaskToReadyList+0xe8>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033f8:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <prvAddNewTaskToReadyList+0xe4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d110      	bne.n	8003422 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003400:	f000 fbe0 	bl	8003bc4 <prvInitialiseTaskLists>
 8003404:	e00d      	b.n	8003422 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003406:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <prvAddNewTaskToReadyList+0xec>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <prvAddNewTaskToReadyList+0xe8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	429a      	cmp	r2, r3
 800341a:	d802      	bhi.n	8003422 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <prvAddNewTaskToReadyList+0xe8>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <prvAddNewTaskToReadyList+0xf0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <prvAddNewTaskToReadyList+0xf0>)
 800342a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <prvAddNewTaskToReadyList+0xf0>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <prvAddNewTaskToReadyList+0x94>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f003 fb69 	bl	8006b14 <SEGGER_SYSVIEW_OnTaskCreate>
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	461d      	mov	r5, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461c      	mov	r4, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	1ae3      	subs	r3, r4, r3
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	462b      	mov	r3, r5
 8003464:	f001 fdf0 	bl	8005048 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 fbd6 	bl	8006c1c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <prvAddNewTaskToReadyList+0xf4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <prvAddNewTaskToReadyList+0xf4>)
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a0f      	ldr	r2, [pc, #60]	; (80034cc <prvAddNewTaskToReadyList+0xf8>)
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7ff f910 	bl	80026be <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800349e:	f001 fa31 	bl	8004904 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <prvAddNewTaskToReadyList+0xec>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <prvAddNewTaskToReadyList+0xe8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000016c 	.word	0x2000016c
 80034bc:	20000094 	.word	0x20000094
 80034c0:	20000178 	.word	0x20000178
 80034c4:	20000188 	.word	0x20000188
 80034c8:	20000174 	.word	0x20000174
 80034cc:	20000098 	.word	0x20000098

080034d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <vTaskStartScheduler+0xa4>)
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	2282      	movs	r2, #130	; 0x82
 80034e2:	4925      	ldr	r1, [pc, #148]	; (8003578 <vTaskStartScheduler+0xa8>)
 80034e4:	4825      	ldr	r0, [pc, #148]	; (800357c <vTaskStartScheduler+0xac>)
 80034e6:	f7ff fe9d 	bl	8003224 <xTaskCreate>
 80034ea:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80034f2:	f000 fd17 	bl	8003f24 <xTimerCreateTimerTask>
 80034f6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d124      	bne.n	8003548 <vTaskStartScheduler+0x78>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60bb      	str	r3, [r7, #8]
    }
 8003510:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <vTaskStartScheduler+0xb0>)
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <vTaskStartScheduler+0xb4>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <vTaskStartScheduler+0xb8>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <vTaskStartScheduler+0xbc>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <vTaskStartScheduler+0xa4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d102      	bne.n	8003538 <vTaskStartScheduler+0x68>
 8003532:	f003 fad3 	bl	8006adc <SEGGER_SYSVIEW_OnIdle>
 8003536:	e004      	b.n	8003542 <vTaskStartScheduler+0x72>
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <vTaskStartScheduler+0xbc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f003 fb2b 	bl	8006b98 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003542:	f001 f88f 	bl	8004664 <xPortStartScheduler>
 8003546:	e00e      	b.n	8003566 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d10a      	bne.n	8003566 <vTaskStartScheduler+0x96>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	607b      	str	r3, [r7, #4]
    }
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <vTaskStartScheduler+0xc0>)
 8003568:	681b      	ldr	r3, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000190 	.word	0x20000190
 8003578:	08007988 	.word	0x08007988
 800357c:	08003ba1 	.word	0x08003ba1
 8003580:	2000018c 	.word	0x2000018c
 8003584:	20000178 	.word	0x20000178
 8003588:	20000170 	.word	0x20000170
 800358c:	20000094 	.word	0x20000094
 8003590:	2000000c 	.word	0x2000000c

08003594 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <vTaskSuspendAll+0x18>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	4a03      	ldr	r2, [pc, #12]	; (80035ac <vTaskSuspendAll+0x18>)
 80035a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	20000194 	.word	0x20000194

080035b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <xTaskResumeAll+0x104>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <xTaskResumeAll+0x2c>
        __asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	603b      	str	r3, [r7, #0]
    }
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035dc:	f001 f962 	bl	80048a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <xTaskResumeAll+0x104>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a33      	ldr	r2, [pc, #204]	; (80036b4 <xTaskResumeAll+0x104>)
 80035e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <xTaskResumeAll+0x104>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d159      	bne.n	80036a6 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <xTaskResumeAll+0x108>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d055      	beq.n	80036a6 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035fa:	e032      	b.n	8003662 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035fc:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <xTaskResumeAll+0x10c>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3318      	adds	r3, #24
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f8b5 	bl	8002778 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f8b0 	bl	8002778 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 fafe 	bl	8006c1c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	2201      	movs	r2, #1
 8003626:	409a      	lsls	r2, r3
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <xTaskResumeAll+0x110>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <xTaskResumeAll+0x110>)
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <xTaskResumeAll+0x114>)
 8003640:	441a      	add	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3304      	adds	r3, #4
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f7ff f838 	bl	80026be <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <xTaskResumeAll+0x118>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <xTaskResumeAll+0x11c>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <xTaskResumeAll+0x10c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1c8      	bne.n	80035fc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003670:	f000 fb26 	bl	8003cc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <xTaskResumeAll+0x120>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003680:	f000 f84a 	bl	8003718 <xTaskIncrementTick>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <xTaskResumeAll+0x11c>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3b01      	subs	r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f1      	bne.n	8003680 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <xTaskResumeAll+0x120>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <xTaskResumeAll+0x11c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80036a6:	f001 f92d 	bl	8004904 <vPortExitCritical>

    return xAlreadyYielded;
 80036aa:	687b      	ldr	r3, [r7, #4]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000194 	.word	0x20000194
 80036b8:	2000016c 	.word	0x2000016c
 80036bc:	2000012c 	.word	0x2000012c
 80036c0:	20000174 	.word	0x20000174
 80036c4:	20000098 	.word	0x20000098
 80036c8:	20000094 	.word	0x20000094
 80036cc:	20000180 	.word	0x20000180
 80036d0:	2000017c 	.word	0x2000017c

080036d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <xTaskGetTickCount+0x1c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036e0:	687b      	ldr	r3, [r7, #4]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000170 	.word	0x20000170

080036f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036fa:	f001 f9bf 	bl	8004a7c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <xTaskGetTickCountFromISR+0x20>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003708:	683b      	ldr	r3, [r7, #0]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000170 	.word	0x20000170

08003718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <xTaskIncrementTick+0x110>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d173      	bne.n	8003812 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800372a:	4b40      	ldr	r3, [pc, #256]	; (800382c <xTaskIncrementTick+0x114>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003732:	4a3e      	ldr	r2, [pc, #248]	; (800382c <xTaskIncrementTick+0x114>)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d120      	bne.n	8003780 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800373e:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <xTaskIncrementTick+0x118>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <xTaskIncrementTick+0x46>
        __asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	603b      	str	r3, [r7, #0]
    }
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xTaskIncrementTick+0x44>
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <xTaskIncrementTick+0x118>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	4b33      	ldr	r3, [pc, #204]	; (8003834 <xTaskIncrementTick+0x11c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a31      	ldr	r2, [pc, #196]	; (8003830 <xTaskIncrementTick+0x118>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4a31      	ldr	r2, [pc, #196]	; (8003834 <xTaskIncrementTick+0x11c>)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <xTaskIncrementTick+0x120>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <xTaskIncrementTick+0x120>)
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	f000 faa0 	bl	8003cc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <xTaskIncrementTick+0x124>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	d348      	bcc.n	800381c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <xTaskIncrementTick+0x118>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <xTaskIncrementTick+0x124>)
 8003796:	f04f 32ff 	mov.w	r2, #4294967295
 800379a:	601a      	str	r2, [r3, #0]
                    break;
 800379c:	e03e      	b.n	800381c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <xTaskIncrementTick+0x118>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d203      	bcs.n	80037be <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037b6:	4a21      	ldr	r2, [pc, #132]	; (800383c <xTaskIncrementTick+0x124>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037bc:	e02e      	b.n	800381c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ffd8 	bl	8002778 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3318      	adds	r3, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe ffcf 	bl	8002778 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f003 fa1d 	bl	8006c1c <SEGGER_SYSVIEW_OnTaskStartReady>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	2201      	movs	r2, #1
 80037e8:	409a      	lsls	r2, r3
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <xTaskIncrementTick+0x128>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <xTaskIncrementTick+0x128>)
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4a10      	ldr	r2, [pc, #64]	; (8003844 <xTaskIncrementTick+0x12c>)
 8003802:	441a      	add	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7fe ff57 	bl	80026be <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003810:	e7bb      	b.n	800378a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <xTaskIncrementTick+0x130>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <xTaskIncrementTick+0x130>)
 800381a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000194 	.word	0x20000194
 800382c:	20000170 	.word	0x20000170
 8003830:	20000124 	.word	0x20000124
 8003834:	20000128 	.word	0x20000128
 8003838:	20000184 	.word	0x20000184
 800383c:	2000018c 	.word	0x2000018c
 8003840:	20000174 	.word	0x20000174
 8003844:	20000098 	.word	0x20000098
 8003848:	2000017c 	.word	0x2000017c

0800384c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003852:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <vTaskSwitchContext+0xbc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <vTaskSwitchContext+0xc0>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003860:	e04d      	b.n	80038fe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <vTaskSwitchContext+0xc0>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <vTaskSwitchContext+0xc4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f1c3 031f 	rsb	r3, r3, #31
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	4925      	ldr	r1, [pc, #148]	; (8003914 <vTaskSwitchContext+0xc8>)
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	607b      	str	r3, [r7, #4]
    }
 80038a4:	bf00      	nop
 80038a6:	e7fe      	b.n	80038a6 <vTaskSwitchContext+0x5a>
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <vTaskSwitchContext+0xc8>)
 80038b4:	4413      	add	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3308      	adds	r3, #8
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d104      	bne.n	80038d8 <vTaskSwitchContext+0x8c>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <vTaskSwitchContext+0xcc>)
 80038e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <vTaskSwitchContext+0xcc>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <vTaskSwitchContext+0xd0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d102      	bne.n	80038f4 <vTaskSwitchContext+0xa8>
 80038ee:	f003 f8f5 	bl	8006adc <SEGGER_SYSVIEW_OnIdle>
}
 80038f2:	e004      	b.n	80038fe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <vTaskSwitchContext+0xcc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 f94d 	bl	8006b98 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000194 	.word	0x20000194
 800390c:	20000180 	.word	0x20000180
 8003910:	20000174 	.word	0x20000174
 8003914:	20000098 	.word	0x20000098
 8003918:	20000094 	.word	0x20000094
 800391c:	20000190 	.word	0x20000190

08003920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
    }
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <vTaskPlaceOnEventList+0x44>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3318      	adds	r3, #24
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fed9 	bl	8002706 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003954:	2101      	movs	r1, #1
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f000 fa6c 	bl	8003e34 <prvAddCurrentTaskToDelayedList>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000094 	.word	0x20000094

08003968 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	617b      	str	r3, [r7, #20]
    }
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3318      	adds	r3, #24
 8003996:	4619      	mov	r1, r3
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7fe fe90 	bl	80026be <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039aa:	2024      	movs	r0, #36	; 0x24
 80039ac:	f002 fb98 	bl	80060e0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	68b8      	ldr	r0, [r7, #8]
 80039b4:	f000 fa3e 	bl	8003e34 <prvAddCurrentTaskToDelayedList>
    }
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000094 	.word	0x20000094

080039c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60fb      	str	r3, [r7, #12]
    }
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	3318      	adds	r3, #24
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe febf 	bl	8002778 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <xTaskRemoveFromEventList+0xb4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d120      	bne.n	8003a44 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe feb6 	bl	8002778 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 f904 	bl	8006c1c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xTaskRemoveFromEventList+0xb8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <xTaskRemoveFromEventList+0xb8>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <xTaskRemoveFromEventList+0xbc>)
 8003a34:	441a      	add	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe fe3e 	bl	80026be <vListInsertEnd>
 8003a42:	e005      	b.n	8003a50 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3318      	adds	r3, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480e      	ldr	r0, [pc, #56]	; (8003a84 <xTaskRemoveFromEventList+0xc0>)
 8003a4c:	f7fe fe37 	bl	80026be <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTaskRemoveFromEventList+0xc4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d905      	bls.n	8003a6a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xc8>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e001      	b.n	8003a6e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000194 	.word	0x20000194
 8003a7c:	20000174 	.word	0x20000174
 8003a80:	20000098 	.word	0x20000098
 8003a84:	2000012c 	.word	0x2000012c
 8003a88:	20000094 	.word	0x20000094
 8003a8c:	20000180 	.word	0x20000180

08003a90 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x28>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000184 	.word	0x20000184
 8003ab8:	20000170 	.word	0x20000170

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
    }
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003afe:	f000 fed1 	bl	80048a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <xTaskCheckForTimeOut+0xc4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d102      	bne.n	8003b22 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e026      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <xTaskCheckForTimeOut+0xc8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d00a      	beq.n	8003b44 <xTaskCheckForTimeOut+0x88>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d305      	bcc.n	8003b44 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e015      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20b      	bcs.n	8003b66 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad2      	subs	r2, r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff98 	bl	8003a90 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e004      	b.n	8003b70 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b70:	f000 fec8 	bl	8004904 <vPortExitCritical>

    return xReturn;
 8003b74:	69fb      	ldr	r3, [r7, #28]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000170 	.word	0x20000170
 8003b84:	20000184 	.word	0x20000184

08003b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <vTaskMissedYield+0x14>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000180 	.word	0x20000180

08003ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ba8:	f000 f84c 	bl	8003c44 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <prvIdleTask+0x20>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bbc:	e7f4      	b.n	8003ba8 <prvIdleTask+0x8>
 8003bbe:	bf00      	nop
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	e00c      	b.n	8003bea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <prvInitialiseTaskLists+0x60>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fd40 	bl	8002664 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3301      	adds	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d9ef      	bls.n	8003bd0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <prvInitialiseTaskLists+0x64>)
 8003bf2:	f7fe fd37 	bl	8002664 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bf6:	480d      	ldr	r0, [pc, #52]	; (8003c2c <prvInitialiseTaskLists+0x68>)
 8003bf8:	f7fe fd34 	bl	8002664 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003bfc:	480c      	ldr	r0, [pc, #48]	; (8003c30 <prvInitialiseTaskLists+0x6c>)
 8003bfe:	f7fe fd31 	bl	8002664 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c02:	480c      	ldr	r0, [pc, #48]	; (8003c34 <prvInitialiseTaskLists+0x70>)
 8003c04:	f7fe fd2e 	bl	8002664 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <prvInitialiseTaskLists+0x74>)
 8003c0a:	f7fe fd2b 	bl	8002664 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <prvInitialiseTaskLists+0x78>)
 8003c10:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <prvInitialiseTaskLists+0x64>)
 8003c12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <prvInitialiseTaskLists+0x7c>)
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <prvInitialiseTaskLists+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000098 	.word	0x20000098
 8003c28:	200000fc 	.word	0x200000fc
 8003c2c:	20000110 	.word	0x20000110
 8003c30:	2000012c 	.word	0x2000012c
 8003c34:	20000140 	.word	0x20000140
 8003c38:	20000158 	.word	0x20000158
 8003c3c:	20000124 	.word	0x20000124
 8003c40:	20000128 	.word	0x20000128

08003c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c4a:	e019      	b.n	8003c80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c4c:	f000 fe2a 	bl	80048a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <prvCheckTasksWaitingTermination+0x50>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fd8b 	bl	8002778 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <prvCheckTasksWaitingTermination+0x58>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <prvCheckTasksWaitingTermination+0x58>)
 8003c74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c76:	f000 fe45 	bl	8004904 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f810 	bl	8003ca0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <prvCheckTasksWaitingTermination+0x58>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e1      	bne.n	8003c4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000140 	.word	0x20000140
 8003c98:	2000016c 	.word	0x2000016c
 8003c9c:	20000154 	.word	0x20000154

08003ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 f805 	bl	8004cbc <vPortFree>
                vPortFree( pxTCB );
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 f802 	bl	8004cbc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <prvResetNextTaskUnblockTime+0x30>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <prvResetNextTaskUnblockTime+0x34>)
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cd6:	e005      	b.n	8003ce4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <prvResetNextTaskUnblockTime+0x30>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <prvResetNextTaskUnblockTime+0x34>)
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000124 	.word	0x20000124
 8003cf4:	2000018c 	.word	0x2000018c

08003cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <xTaskGetSchedulerState+0x34>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d06:	2301      	movs	r3, #1
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	e008      	b.n	8003d1e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <xTaskGetSchedulerState+0x38>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d14:	2302      	movs	r3, #2
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	e001      	b.n	8003d1e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d1e:	687b      	ldr	r3, [r7, #4]
    }
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000178 	.word	0x20000178
 8003d30:	20000194 	.word	0x20000194

08003d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d068      	beq.n	8003e1c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d4a:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <xTaskPriorityDisinherit+0xf4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d00a      	beq.n	8003d6a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
    }
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60bb      	str	r3, [r7, #8]
    }
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d03e      	beq.n	8003e1c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d13a      	bne.n	8003e1c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fce4 	bl	8002778 <uxListRemove>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	2201      	movs	r2, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <xTaskPriorityDisinherit+0xf8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <xTaskPriorityDisinherit+0xf8>)
 8003dca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	204a      	movs	r0, #74	; 0x4a
 8003dd2:	f002 f9a3 	bl	800611c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f1c3 0205 	rsb	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	2201      	movs	r2, #1
 8003df0:	409a      	lsls	r2, r3
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <xTaskPriorityDisinherit+0xf8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <xTaskPriorityDisinherit+0xf8>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <xTaskPriorityDisinherit+0xfc>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7fe fc53 	bl	80026be <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e1c:	697b      	ldr	r3, [r7, #20]
    }
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000094 	.word	0x20000094
 8003e2c:	20000174 	.word	0x20000174
 8003e30:	20000098 	.word	0x20000098

08003e34 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e3e:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fc94 	bl	8002778 <uxListRemove>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e6c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d110      	bne.n	8003e98 <prvAddCurrentTaskToDelayedList+0x64>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	211b      	movs	r1, #27
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 ff0c 	bl	8006ca0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4820      	ldr	r0, [pc, #128]	; (8003f14 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003e92:	f7fe fc14 	bl	80026be <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e96:	e032      	b.n	8003efe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d20f      	bcs.n	8003ed0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003eb0:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f002 fef2 	bl	8006ca0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ebc:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f7fe fc1c 	bl	8002706 <vListInsert>
}
 8003ece:	e016      	b.n	8003efe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2104      	movs	r1, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 fee2 	bl	8006ca0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7fe fc0c 	bl	8002706 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d202      	bcs.n	8003efe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003ef8:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6013      	str	r3, [r2, #0]
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000170 	.word	0x20000170
 8003f0c:	20000094 	.word	0x20000094
 8003f10:	20000174 	.word	0x20000174
 8003f14:	20000158 	.word	0x20000158
 8003f18:	20000128 	.word	0x20000128
 8003f1c:	20000124 	.word	0x20000124
 8003f20:	2000018c 	.word	0x2000018c

08003f24 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f2e:	f000 fad5 	bl	80044dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <xTimerCreateTimerTask+0x54>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <xTimerCreateTimerTask+0x58>)
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2302      	movs	r3, #2
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f48:	490d      	ldr	r1, [pc, #52]	; (8003f80 <xTimerCreateTimerTask+0x5c>)
 8003f4a:	480e      	ldr	r0, [pc, #56]	; (8003f84 <xTimerCreateTimerTask+0x60>)
 8003f4c:	f7ff f96a 	bl	8003224 <xTaskCreate>
 8003f50:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	603b      	str	r3, [r7, #0]
    }
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f6e:	687b      	ldr	r3, [r7, #4]
    }
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200001c8 	.word	0x200001c8
 8003f7c:	200001cc 	.word	0x200001cc
 8003f80:	08007990 	.word	0x08007990
 8003f84:	080040bd 	.word	0x080040bd

08003f88 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	623b      	str	r3, [r7, #32]
    }
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <xTimerGenericCommand+0x98>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02a      	beq.n	8004014 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	dc18      	bgt.n	8004002 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fd0:	f7ff fe92 	bl	8003cf8 <xTaskGetSchedulerState>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d109      	bne.n	8003fee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <xTimerGenericCommand+0x98>)
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	f107 0114 	add.w	r1, r7, #20
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe6:	f7fe fcd5 	bl	8002994 <xQueueGenericSend>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24
 8003fec:	e012      	b.n	8004014 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <xTimerGenericCommand+0x98>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f107 0114 	add.w	r1, r7, #20
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f7fe fccb 	bl	8002994 <xQueueGenericSend>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8004000:	e008      	b.n	8004014 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <xTimerGenericCommand+0x98>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f107 0114 	add.w	r1, r7, #20
 800400a:	2300      	movs	r3, #0
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f7fe fdcf 	bl	8002bb0 <xQueueGenericSendFromISR>
 8004012:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004016:	4618      	mov	r0, r3
 8004018:	3728      	adds	r7, #40	; 0x28
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200001c8 	.word	0x200001c8

08004024 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <prvProcessExpiredTimer+0x94>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fb9b 	bl	8002778 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d022      	beq.n	8004096 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	18d1      	adds	r1, r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	6978      	ldr	r0, [r7, #20]
 800405e:	f000 f8d1 	bl	8004204 <prvInsertTimerInActiveList>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01f      	beq.n	80040a8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	2100      	movs	r1, #0
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff ff88 	bl	8003f88 <xTimerGenericCommand>
 8004078:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d113      	bne.n	80040a8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
    }
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	4798      	blx	r3
    }
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200001c0 	.word	0x200001c0

080040bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040c4:	f107 0308 	add.w	r3, r7, #8
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f857 	bl	800417c <prvGetNextExpireTime>
 80040ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4619      	mov	r1, r3
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f803 	bl	80040e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040da:	f000 f8d5 	bl	8004288 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040de:	e7f1      	b.n	80040c4 <prvTimerTask+0x8>

080040e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040ea:	f7ff fa53 	bl	8003594 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ee:	f107 0308 	add.w	r3, r7, #8
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f866 	bl	80041c4 <prvSampleTimeNow>
 80040f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d130      	bne.n	8004162 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <prvProcessTimerOrBlockTask+0x3c>
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	429a      	cmp	r2, r3
 800410c:	d806      	bhi.n	800411c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800410e:	f7ff fa4f 	bl	80035b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff85 	bl	8004024 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800411a:	e024      	b.n	8004166 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <prvProcessTimerOrBlockTask+0x90>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <prvProcessTimerOrBlockTask+0x50>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <prvProcessTimerOrBlockTask+0x52>
 8004130:	2300      	movs	r3, #0
 8004132:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <prvProcessTimerOrBlockTask+0x94>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	f7ff f83b 	bl	80031bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004146:	f7ff fa33 	bl	80035b0 <xTaskResumeAll>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <prvProcessTimerOrBlockTask+0x98>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
    }
 8004160:	e001      	b.n	8004166 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004162:	f7ff fa25 	bl	80035b0 <xTaskResumeAll>
    }
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200001c4 	.word	0x200001c4
 8004174:	200001c8 	.word	0x200001c8
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <prvGetNextExpireTime+0x44>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <prvGetNextExpireTime+0x16>
 800418e:	2201      	movs	r2, #1
 8004190:	e000      	b.n	8004194 <prvGetNextExpireTime+0x18>
 8004192:	2200      	movs	r2, #0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <prvGetNextExpireTime+0x44>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e001      	b.n	80041b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80041b0:	68fb      	ldr	r3, [r7, #12]
    }
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200001c0 	.word	0x200001c0

080041c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041cc:	f7ff fa82 	bl	80036d4 <xTaskGetTickCount>
 80041d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <prvSampleTimeNow+0x3c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d205      	bcs.n	80041e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041dc:	f000 f91a 	bl	8004414 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e002      	b.n	80041ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041ee:	4a04      	ldr	r2, [pc, #16]	; (8004200 <prvSampleTimeNow+0x3c>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041f4:	68fb      	ldr	r3, [r7, #12]
    }
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200001d0 	.word	0x200001d0

08004204 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d812      	bhi.n	8004250 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e01b      	b.n	8004276 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <prvInsertTimerInActiveList+0x7c>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fe fa5c 	bl	8002706 <vListInsert>
 800424e:	e012      	b.n	8004276 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d206      	bcs.n	8004266 <prvInsertTimerInActiveList+0x62>
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e007      	b.n	8004276 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <prvInsertTimerInActiveList+0x80>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7fe fa48 	bl	8002706 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004276:	697b      	ldr	r3, [r7, #20]
    }
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200001c4 	.word	0x200001c4
 8004284:	200001c0 	.word	0x200001c0

08004288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800428e:	e0ae      	b.n	80043ee <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f2c0 80aa 	blt.w	80043ec <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	3304      	adds	r3, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fa65 	bl	8002778 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff87 	bl	80041c4 <prvSampleTimeNow>
 80042b6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	f200 8097 	bhi.w	80043ee <prvProcessReceivedCommands+0x166>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <prvProcessReceivedCommands+0x40>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f1 	.word	0x080042f1
 80042d4:	08004365 	.word	0x08004365
 80042d8:	08004379 	.word	0x08004379
 80042dc:	080043c3 	.word	0x080043c3
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f1 	.word	0x080042f1
 80042e8:	08004365 	.word	0x08004365
 80042ec:	08004379 	.word	0x08004379
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	18d1      	adds	r1, r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004310:	f7ff ff78 	bl	8004204 <prvInsertTimerInActiveList>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d069      	beq.n	80043ee <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004320:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05e      	beq.n	80043ee <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	441a      	add	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	2100      	movs	r1, #0
 8004340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004342:	f7ff fe21 	bl	8003f88 <xTimerGenericCommand>
 8004346:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d14f      	bne.n	80043ee <prvProcessReceivedCommands+0x166>
        __asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	61bb      	str	r3, [r7, #24]
    }
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004376:	e03a      	b.n	80043ee <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	617b      	str	r3, [r7, #20]
    }
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	18d1      	adds	r1, r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043bc:	f7ff ff22 	bl	8004204 <prvInsertTimerInActiveList>
                        break;
 80043c0:	e015      	b.n	80043ee <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80043d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043d2:	f000 fc73 	bl	8004cbc <vPortFree>
 80043d6:	e00a      	b.n	80043ee <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80043ea:	e000      	b.n	80043ee <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80043ec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <prvProcessReceivedCommands+0x188>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f107 0108 	add.w	r1, r7, #8
 80043f6:	2200      	movs	r2, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fc97 	bl	8002d2c <xQueueReceive>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f af45 	bne.w	8004290 <prvProcessReceivedCommands+0x8>
        }
    }
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	200001c8 	.word	0x200001c8

08004414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800441a:	e048      	b.n	80044ae <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800441c:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <prvSwitchTimerLists+0xc0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <prvSwitchTimerLists+0xc0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe f99f 	bl	8002778 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02e      	beq.n	80044ae <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	429a      	cmp	r2, r3
 8004460:	d90e      	bls.n	8004480 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800446e:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <prvSwitchTimerLists+0xc0>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f7fe f944 	bl	8002706 <vListInsert>
 800447e:	e016      	b.n	80044ae <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004480:	2300      	movs	r3, #0
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	2100      	movs	r1, #0
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff fd7c 	bl	8003f88 <xTimerGenericCommand>
 8004490:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	603b      	str	r3, [r7, #0]
    }
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <prvSwitchTimerLists+0xc0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1b1      	bne.n	800441c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <prvSwitchTimerLists+0xc0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <prvSwitchTimerLists+0xc4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <prvSwitchTimerLists+0xc0>)
 80044c4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044c6:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <prvSwitchTimerLists+0xc4>)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	6013      	str	r3, [r2, #0]
    }
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	200001c0 	.word	0x200001c0
 80044d8:	200001c4 	.word	0x200001c4

080044dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80044e0:	f000 f9e0 	bl	80048a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <prvCheckForValidListAndQueue+0x54>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d11d      	bne.n	8004528 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80044ec:	4811      	ldr	r0, [pc, #68]	; (8004534 <prvCheckForValidListAndQueue+0x58>)
 80044ee:	f7fe f8b9 	bl	8002664 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80044f2:	4811      	ldr	r0, [pc, #68]	; (8004538 <prvCheckForValidListAndQueue+0x5c>)
 80044f4:	f7fe f8b6 	bl	8002664 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <prvCheckForValidListAndQueue+0x60>)
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <prvCheckForValidListAndQueue+0x58>)
 80044fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <prvCheckForValidListAndQueue+0x64>)
 8004500:	4a0d      	ldr	r2, [pc, #52]	; (8004538 <prvCheckForValidListAndQueue+0x5c>)
 8004502:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004504:	2200      	movs	r2, #0
 8004506:	210c      	movs	r1, #12
 8004508:	200a      	movs	r0, #10
 800450a:	f7fe f9ba 	bl	8002882 <xQueueGenericCreate>
 800450e:	4603      	mov	r3, r0
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <prvCheckForValidListAndQueue+0x54>)
 8004512:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <prvCheckForValidListAndQueue+0x54>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <prvCheckForValidListAndQueue+0x54>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4908      	ldr	r1, [pc, #32]	; (8004544 <prvCheckForValidListAndQueue+0x68>)
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fe18 	bl	8003158 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004528:	f000 f9ec 	bl	8004904 <vPortExitCritical>
    }
 800452c:	bf00      	nop
 800452e:	bd80      	pop	{r7, pc}
 8004530:	200001c8 	.word	0x200001c8
 8004534:	20000198 	.word	0x20000198
 8004538:	200001ac 	.word	0x200001ac
 800453c:	200001c0 	.word	0x200001c0
 8004540:	200001c4 	.word	0x200001c4
 8004544:	08007998 	.word	0x08007998

08004548 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3b04      	subs	r3, #4
 8004558:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004560:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3b04      	subs	r3, #4
 8004566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <pxPortInitialiseStack+0x64>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3b14      	subs	r3, #20
 8004582:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3b04      	subs	r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f06f 0202 	mvn.w	r2, #2
 8004596:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b20      	subs	r3, #32
 800459c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800459e:	68fb      	ldr	r3, [r7, #12]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	080045b1 	.word	0x080045b1

080045b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <prvTaskExitError+0x54>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d00a      	beq.n	80045da <prvTaskExitError+0x2a>
        __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
    }
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <prvTaskExitError+0x28>
        __asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60bb      	str	r3, [r7, #8]
    }
 80045ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80045ee:	bf00      	nop
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0fc      	beq.n	80045f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	20000010 	.word	0x20000010
	...

08004610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <pxCurrentTCBConst2>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	f380 8809 	msr	PSP, r0
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	4770      	bx	lr
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst2>:
 8004630:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004638:	4808      	ldr	r0, [pc, #32]	; (800465c <prvPortStartFirstTask+0x24>)
 800463a:	6800      	ldr	r0, [r0, #0]
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f380 8808 	msr	MSP, r0
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8814 	msr	CONTROL, r0
 800464a:	b662      	cpsie	i
 800464c:	b661      	cpsie	f
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	df00      	svc	0
 8004658:	bf00      	nop
 800465a:	0000      	.short	0x0000
 800465c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop

08004664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800466a:	4b46      	ldr	r3, [pc, #280]	; (8004784 <xPortStartScheduler+0x120>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a46      	ldr	r2, [pc, #280]	; (8004788 <xPortStartScheduler+0x124>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10a      	bne.n	800468a <xPortStartScheduler+0x26>
        __asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	613b      	str	r3, [r7, #16]
    }
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800468a:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <xPortStartScheduler+0x120>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <xPortStartScheduler+0x128>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10a      	bne.n	80046aa <xPortStartScheduler+0x46>
        __asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
    }
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046aa:	4b39      	ldr	r3, [pc, #228]	; (8004790 <xPortStartScheduler+0x12c>)
 80046ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	22ff      	movs	r2, #255	; 0xff
 80046ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b31      	ldr	r3, [pc, #196]	; (8004794 <xPortStartScheduler+0x130>)
 80046d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046d2:	4b31      	ldr	r3, [pc, #196]	; (8004798 <xPortStartScheduler+0x134>)
 80046d4:	2207      	movs	r2, #7
 80046d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d8:	e009      	b.n	80046ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80046da:	4b2f      	ldr	r3, [pc, #188]	; (8004798 <xPortStartScheduler+0x134>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3b01      	subs	r3, #1
 80046e0:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <xPortStartScheduler+0x134>)
 80046e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d0ef      	beq.n	80046da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046fa:	4b27      	ldr	r3, [pc, #156]	; (8004798 <xPortStartScheduler+0x134>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00a      	beq.n	800471c <xPortStartScheduler+0xb8>
        __asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60bb      	str	r3, [r7, #8]
    }
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800471c:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <xPortStartScheduler+0x134>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <xPortStartScheduler+0x134>)
 8004724:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004726:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <xPortStartScheduler+0x134>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800472e:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <xPortStartScheduler+0x134>)
 8004730:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <xPortStartScheduler+0x138>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <xPortStartScheduler+0x138>)
 8004740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004744:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <xPortStartScheduler+0x138>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a14      	ldr	r2, [pc, #80]	; (800479c <xPortStartScheduler+0x138>)
 800474c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004752:	f000 f963 	bl	8004a1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <xPortStartScheduler+0x13c>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800475c:	f000 f982 	bl	8004a64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <xPortStartScheduler+0x140>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <xPortStartScheduler+0x140>)
 8004766:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800476a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800476c:	f7ff ff64 	bl	8004638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004770:	f7ff f86c 	bl	800384c <vTaskSwitchContext>
    prvTaskExitError();
 8004774:	f7ff ff1c 	bl	80045b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00
 8004788:	410fc271 	.word	0x410fc271
 800478c:	410fc270 	.word	0x410fc270
 8004790:	e000e400 	.word	0xe000e400
 8004794:	200001d4 	.word	0x200001d4
 8004798:	200001d8 	.word	0x200001d8
 800479c:	e000ed20 	.word	0xe000ed20
 80047a0:	20000010 	.word	0x20000010
 80047a4:	e000ef34 	.word	0xe000ef34

080047a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047ae:	4b37      	ldr	r3, [pc, #220]	; (800488c <vInitPrioGroupValue+0xe4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a37      	ldr	r2, [pc, #220]	; (8004890 <vInitPrioGroupValue+0xe8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10a      	bne.n	80047ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	613b      	str	r3, [r7, #16]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047ce:	4b2f      	ldr	r3, [pc, #188]	; (800488c <vInitPrioGroupValue+0xe4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a30      	ldr	r2, [pc, #192]	; (8004894 <vInitPrioGroupValue+0xec>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d10a      	bne.n	80047ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
    }
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <vInitPrioGroupValue+0xf0>)
 80047f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	22ff      	movs	r2, #255	; 0xff
 80047fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004810:	b2da      	uxtb	r2, r3
 8004812:	4b22      	ldr	r3, [pc, #136]	; (800489c <vInitPrioGroupValue+0xf4>)
 8004814:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004816:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004818:	2207      	movs	r2, #7
 800481a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481c:	e009      	b.n	8004832 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800481e:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004826:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b80      	cmp	r3, #128	; 0x80
 800483c:	d0ef      	beq.n	800481e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1c3 0307 	rsb	r3, r3, #7
 8004846:	2b04      	cmp	r3, #4
 8004848:	d00a      	beq.n	8004860 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60bb      	str	r3, [r7, #8]
    }
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004868:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <vInitPrioGroupValue+0xf8>)
 8004874:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000ed00 	.word	0xe000ed00
 8004890:	410fc271 	.word	0x410fc271
 8004894:	410fc270 	.word	0x410fc270
 8004898:	e000e400 	.word	0xe000e400
 800489c:	200001d4 	.word	0x200001d4
 80048a0:	200001d8 	.word	0x200001d8

080048a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
        __asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	607b      	str	r3, [r7, #4]
    }
 80048bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <vPortEnterCritical+0x58>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <vPortEnterCritical+0x58>)
 80048c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <vPortEnterCritical+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10f      	bne.n	80048f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <vPortEnterCritical+0x5c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	603b      	str	r3, [r7, #0]
    }
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vPortEnterCritical+0x4a>
    }
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000010 	.word	0x20000010
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <vPortExitCritical+0x50>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <vPortExitCritical+0x24>
        __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	607b      	str	r3, [r7, #4]
    }
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <vPortExitCritical+0x50>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <vPortExitCritical+0x50>)
 8004930:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <vPortExitCritical+0x42>
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f383 8811 	msr	BASEPRI, r3
    }
 8004944:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000010 	.word	0x20000010
	...

08004960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004960:	f3ef 8009 	mrs	r0, PSP
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <pxCurrentTCBConst>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f01e 0f10 	tst.w	lr, #16
 8004970:	bf08      	it	eq
 8004972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	6010      	str	r0, [r2, #0]
 800497c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004984:	f380 8811 	msr	BASEPRI, r0
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f7fe ff5c 	bl	800384c <vTaskSwitchContext>
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f380 8811 	msr	BASEPRI, r0
 800499c:	bc09      	pop	{r0, r3}
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a6:	f01e 0f10 	tst.w	lr, #16
 80049aa:	bf08      	it	eq
 80049ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049b0:	f380 8809 	msr	PSP, r0
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w

080049c0 <pxCurrentTCBConst>:
 80049c0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
        __asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
    }
 80049e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80049e2:	f002 f801 	bl	80069e8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80049e6:	f7fe fe97 	bl	8003718 <xTaskIncrementTick>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80049f0:	f002 f858 	bl	8006aa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <SysTick_Handler+0x50>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e001      	b.n	8004a02 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80049fe:	f002 f835 	bl	8006a6c <SEGGER_SYSVIEW_RecordExitISR>
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f383 8811 	msr	BASEPRI, r3
    }
 8004a0c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortSetupTimerInterrupt+0x34>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <vPortSetupTimerInterrupt+0x38>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <vPortSetupTimerInterrupt+0x3c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <vPortSetupTimerInterrupt+0x40>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <vPortSetupTimerInterrupt+0x44>)
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <vPortSetupTimerInterrupt+0x34>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010
 8004a54:	e000e018 	.word	0xe000e018
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	10624dd3 	.word	0x10624dd3
 8004a60:	e000e014 	.word	0xe000e014

08004a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a74 <vPortEnableVFP+0x10>
 8004a68:	6801      	ldr	r1, [r0, #0]
 8004a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a6e:	6001      	str	r1, [r0, #0]
 8004a70:	4770      	bx	lr
 8004a72:	0000      	.short	0x0000
 8004a74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop

08004a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a82:	f3ef 8305 	mrs	r3, IPSR
 8004a86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d914      	bls.n	8004ab8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <vPortValidateInterruptPriority+0x70>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <vPortValidateInterruptPriority+0x74>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	7afa      	ldrb	r2, [r7, #11]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d20a      	bcs.n	8004ab8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	607b      	str	r3, [r7, #4]
    }
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <vPortValidateInterruptPriority+0x78>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <vPortValidateInterruptPriority+0x7c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d90a      	bls.n	8004ade <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	603b      	str	r3, [r7, #0]
    }
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <vPortValidateInterruptPriority+0x60>
    }
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000e3f0 	.word	0xe000e3f0
 8004af0:	200001d4 	.word	0x200001d4
 8004af4:	e000ed0c 	.word	0xe000ed0c
 8004af8:	200001d8 	.word	0x200001d8

08004afc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004b08:	f7fe fd44 	bl	8003594 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004b0c:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <pvPortMalloc+0x1a8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004b14:	f000 f934 	bl	8004d80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b18:	4b63      	ldr	r3, [pc, #396]	; (8004ca8 <pvPortMalloc+0x1ac>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f040 80a7 	bne.w	8004c74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02d      	beq.n	8004b88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d227      	bcs.n	8004b88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004b38:	2208      	movs	r2, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d021      	beq.n	8004b8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f023 0307 	bic.w	r3, r3, #7
 8004b50:	3308      	adds	r3, #8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d214      	bcs.n	8004b82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	3308      	adds	r3, #8
 8004b60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <pvPortMalloc+0x92>
        __asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	617b      	str	r3, [r7, #20]
    }
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b86:	e002      	b.n	8004b8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	e000      	b.n	8004b90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d06e      	beq.n	8004c74 <pvPortMalloc+0x178>
 8004b96:	4b45      	ldr	r3, [pc, #276]	; (8004cac <pvPortMalloc+0x1b0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d869      	bhi.n	8004c74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ba0:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <pvPortMalloc+0x1b4>)
 8004ba2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ba4:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <pvPortMalloc+0x1b4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004baa:	e004      	b.n	8004bb6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d903      	bls.n	8004bc8 <pvPortMalloc+0xcc>
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f1      	bne.n	8004bac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <pvPortMalloc+0x1a8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d050      	beq.n	8004c74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	4413      	add	r3, r2
 8004bda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	2308      	movs	r3, #8
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d91f      	bls.n	8004c34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <pvPortMalloc+0x120>
        __asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	613b      	str	r3, [r7, #16]
    }
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c2e:	69b8      	ldr	r0, [r7, #24]
 8004c30:	f000 f908 	bl	8004e44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <pvPortMalloc+0x1b0>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <pvPortMalloc+0x1b0>)
 8004c40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <pvPortMalloc+0x1b0>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <pvPortMalloc+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d203      	bcs.n	8004c56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c4e:	4b17      	ldr	r3, [pc, #92]	; (8004cac <pvPortMalloc+0x1b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <pvPortMalloc+0x1b8>)
 8004c54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <pvPortMalloc+0x1ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <pvPortMalloc+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <pvPortMalloc+0x1bc>)
 8004c72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c74:	f7fe fc9c 	bl	80035b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <pvPortMalloc+0x19c>
        __asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
    }
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c98:	69fb      	ldr	r3, [r7, #28]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20012de4 	.word	0x20012de4
 8004ca8:	20012df8 	.word	0x20012df8
 8004cac:	20012de8 	.word	0x20012de8
 8004cb0:	20012ddc 	.word	0x20012ddc
 8004cb4:	20012dec 	.word	0x20012dec
 8004cb8:	20012df0 	.word	0x20012df0

08004cbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04d      	beq.n	8004d6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004cce:	2308      	movs	r3, #8
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <vPortFree+0xb8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <vPortFree+0x44>
        __asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	60fb      	str	r3, [r7, #12]
    }
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <vPortFree+0x62>
        __asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60bb      	str	r3, [r7, #8]
    }
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <vPortFree+0xb8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01e      	beq.n	8004d6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11a      	bne.n	8004d6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <vPortFree+0xb8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	401a      	ands	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004d44:	f7fe fc26 	bl	8003594 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <vPortFree+0xbc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4413      	add	r3, r2
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <vPortFree+0xbc>)
 8004d54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d56:	6938      	ldr	r0, [r7, #16]
 8004d58:	f000 f874 	bl	8004e44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <vPortFree+0xc0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3301      	adds	r3, #1
 8004d62:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <vPortFree+0xc0>)
 8004d64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d66:	f7fe fc23 	bl	80035b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d6a:	bf00      	nop
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20012df8 	.word	0x20012df8
 8004d78:	20012de8 	.word	0x20012de8
 8004d7c:	20012df4 	.word	0x20012df4

08004d80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <prvHeapInit+0xac>)
 8004d8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	4a1f      	ldr	r2, [pc, #124]	; (8004e2c <prvHeapInit+0xac>)
 8004db0:	4413      	add	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <prvHeapInit+0xb0>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <prvHeapInit+0xb0>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004dcc:	2208      	movs	r2, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0307 	bic.w	r3, r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <prvHeapInit+0xb4>)
 8004de0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <prvHeapInit+0xb4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <prvHeapInit+0xb4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <prvHeapInit+0xb4>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <prvHeapInit+0xb8>)
 8004e0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <prvHeapInit+0xbc>)
 8004e16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <prvHeapInit+0xc0>)
 8004e1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e1e:	601a      	str	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	200001dc 	.word	0x200001dc
 8004e30:	20012ddc 	.word	0x20012ddc
 8004e34:	20012de4 	.word	0x20012de4
 8004e38:	20012dec 	.word	0x20012dec
 8004e3c:	20012de8 	.word	0x20012de8
 8004e40:	20012df8 	.word	0x20012df8

08004e44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <prvInsertBlockIntoFreeList+0xac>)
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e002      	b.n	8004e58 <prvInsertBlockIntoFreeList+0x14>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d8f7      	bhi.n	8004e52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d108      	bne.n	8004e86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	441a      	add	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d118      	bne.n	8004ecc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d00d      	beq.n	8004ec2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e008      	b.n	8004ed4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e003      	b.n	8004ed4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d002      	beq.n	8004ee2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20012ddc 	.word	0x20012ddc
 8004ef4:	20012de4 	.word	0x20012de4

08004ef8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004efc:	4803      	ldr	r0, [pc, #12]	; (8004f0c <_cbSendSystemDesc+0x14>)
 8004efe:	f001 fd1d 	bl	800693c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004f02:	4803      	ldr	r0, [pc, #12]	; (8004f10 <_cbSendSystemDesc+0x18>)
 8004f04:	f001 fd1a 	bl	800693c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	080079a0 	.word	0x080079a0
 8004f10:	080079dc 	.word	0x080079dc

08004f14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <SEGGER_SYSVIEW_Conf+0x20>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <SEGGER_SYSVIEW_Conf+0x20>)
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <SEGGER_SYSVIEW_Conf+0x24>)
 8004f22:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <SEGGER_SYSVIEW_Conf+0x28>)
 8004f24:	f001 f888 	bl	8006038 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004f28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004f2c:	f001 f8c8 	bl	80060c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004f30:	bf00      	nop
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000000 	.word	0x20000000
 8004f38:	08004ef9 	.word	0x08004ef9
 8004f3c:	08007a7c 	.word	0x08007a7c

08004f40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	e033      	b.n	8004fb4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004f4c:	491e      	ldr	r1, [pc, #120]	; (8004fc8 <_cbSendTaskList+0x88>)
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	491a      	ldr	r1, [pc, #104]	; (8004fc8 <_cbSendTaskList+0x88>)
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	6819      	ldr	r1, [r3, #0]
 8004f6e:	4c16      	ldr	r4, [pc, #88]	; (8004fc8 <_cbSendTaskList+0x88>)
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4423      	add	r3, r4
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	681c      	ldr	r4, [r3, #0]
 8004f80:	4d11      	ldr	r5, [pc, #68]	; (8004fc8 <_cbSendTaskList+0x88>)
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	442b      	add	r3, r5
 8004f8e:	330c      	adds	r3, #12
 8004f90:	681d      	ldr	r5, [r3, #0]
 8004f92:	4e0d      	ldr	r6, [pc, #52]	; (8004fc8 <_cbSendTaskList+0x88>)
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4433      	add	r3, r6
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	4622      	mov	r2, r4
 8004faa:	f000 f8b5 	bl	8005118 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <_cbSendTaskList+0x8c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3c6      	bcc.n	8004f4c <_cbSendTaskList+0xc>
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc8:	20012dfc 	.word	0x20012dfc
 8004fcc:	20012e9c 	.word	0x20012e9c

08004fd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004fd6:	f7fe fb8d 	bl	80036f4 <xTaskGetTickCountFromISR>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	f04f 0400 	mov.w	r4, #0
 8004ff2:	f04f 0500 	mov.w	r5, #0
 8004ff6:	015d      	lsls	r5, r3, #5
 8004ff8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004ffc:	0154      	lsls	r4, r2, #5
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	1a12      	subs	r2, r2, r0
 8005004:	eb63 0301 	sbc.w	r3, r3, r1
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	f04f 0500 	mov.w	r5, #0
 8005010:	009d      	lsls	r5, r3, #2
 8005012:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8005016:	0094      	lsls	r4, r2, #2
 8005018:	4622      	mov	r2, r4
 800501a:	462b      	mov	r3, r5
 800501c:	1812      	adds	r2, r2, r0
 800501e:	eb41 0303 	adc.w	r3, r1, r3
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	00d9      	lsls	r1, r3, #3
 800502c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005030:	00d0      	lsls	r0, r2, #3
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800503a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bdb0      	pop	{r4, r5, r7, pc}

08005048 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005056:	2205      	movs	r2, #5
 8005058:	492b      	ldr	r1, [pc, #172]	; (8005108 <SYSVIEW_AddTask+0xc0>)
 800505a:	68b8      	ldr	r0, [r7, #8]
 800505c:	f002 f800 	bl	8007060 <memcmp>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d04b      	beq.n	80050fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <SYSVIEW_AddTask+0xc4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b07      	cmp	r3, #7
 800506c:	d903      	bls.n	8005076 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800506e:	4828      	ldr	r0, [pc, #160]	; (8005110 <SYSVIEW_AddTask+0xc8>)
 8005070:	f001 ff76 	bl	8006f60 <SEGGER_SYSVIEW_Warn>
    return;
 8005074:	e044      	b.n	8005100 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005076:	4b25      	ldr	r3, [pc, #148]	; (800510c <SYSVIEW_AddTask+0xc4>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4926      	ldr	r1, [pc, #152]	; (8005114 <SYSVIEW_AddTask+0xcc>)
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <SYSVIEW_AddTask+0xc4>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4921      	ldr	r1, [pc, #132]	; (8005114 <SYSVIEW_AddTask+0xcc>)
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3304      	adds	r3, #4
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80050a0:	4b1a      	ldr	r3, [pc, #104]	; (800510c <SYSVIEW_AddTask+0xc4>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	491b      	ldr	r1, [pc, #108]	; (8005114 <SYSVIEW_AddTask+0xcc>)
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3308      	adds	r3, #8
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <SYSVIEW_AddTask+0xc4>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4916      	ldr	r1, [pc, #88]	; (8005114 <SYSVIEW_AddTask+0xcc>)
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	330c      	adds	r3, #12
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <SYSVIEW_AddTask+0xc4>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4910      	ldr	r1, [pc, #64]	; (8005114 <SYSVIEW_AddTask+0xcc>)
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3310      	adds	r3, #16
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <SYSVIEW_AddTask+0xc4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	4a08      	ldr	r2, [pc, #32]	; (800510c <SYSVIEW_AddTask+0xc4>)
 80050ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f80e 	bl	8005118 <SYSVIEW_SendTaskInfo>
 80050fc:	e000      	b.n	8005100 <SYSVIEW_AddTask+0xb8>
    return;
 80050fe:	bf00      	nop

}
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	080079ec 	.word	0x080079ec
 800510c:	20012e9c 	.word	0x20012e9c
 8005110:	080079f4 	.word	0x080079f4
 8005114:	20012dfc 	.word	0x20012dfc

08005118 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005126:	f107 0314 	add.w	r3, r7, #20
 800512a:	2214      	movs	r2, #20
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f001 ffb2 	bl	8007098 <memset>
  TaskInfo.TaskID     = TaskID;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005148:	f107 0314 	add.w	r3, r7, #20
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fafd 	bl	800674c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005152:	bf00      	nop
 8005154:	3728      	adds	r7, #40	; 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <_DoInit+0x98>)
 8005164:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2203      	movs	r2, #3
 8005170:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <_DoInit+0x9c>)
 8005176:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a20      	ldr	r2, [pc, #128]	; (80051fc <_DoInit+0xa0>)
 800517c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005184:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <_DoInit+0x9c>)
 800519c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a17      	ldr	r2, [pc, #92]	; (8005200 <_DoInit+0xa4>)
 80051a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2210      	movs	r2, #16
 80051a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3307      	adds	r3, #7
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <_DoInit+0xa8>)
 80051c2:	6810      	ldr	r0, [r2, #0]
 80051c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <_DoInit+0xac>)
 80051ce:	6810      	ldr	r0, [r2, #0]
 80051d0:	6018      	str	r0, [r3, #0]
 80051d2:	8891      	ldrh	r1, [r2, #4]
 80051d4:	7992      	ldrb	r2, [r2, #6]
 80051d6:	8099      	strh	r1, [r3, #4]
 80051d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051e4:	f3bf 8f5f 	dmb	sy
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	200144a8 	.word	0x200144a8
 80051f8:	08007a44 	.word	0x08007a44
 80051fc:	20012ea0 	.word	0x20012ea0
 8005200:	200132a0 	.word	0x200132a0
 8005204:	08007a50 	.word	0x08007a50
 8005208:	08007a54 	.word	0x08007a54

0800520c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005218:	4b3e      	ldr	r3, [pc, #248]	; (8005314 <SEGGER_RTT_ReadNoLock+0x108>)
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <SEGGER_RTT_ReadNoLock+0x1e>
 8005226:	f7ff ff99 	bl	800515c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4413      	add	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3360      	adds	r3, #96	; 0x60
 8005236:	4a37      	ldr	r2, [pc, #220]	; (8005314 <SEGGER_RTT_ReadNoLock+0x108>)
 8005238:	4413      	add	r3, r2
 800523a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800524c:	2300      	movs	r3, #0
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	d92b      	bls.n	80052b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4293      	cmp	r3, r2
 8005268:	bf28      	it	cs
 800526a:	4613      	movcs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	4413      	add	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	6939      	ldr	r1, [r7, #16]
 800527c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800527e:	f001 fefd 	bl	800707c <memcpy>
    NumBytesRead += NumBytesRem;
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800529a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d101      	bne.n	80052b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf28      	it	cs
 80052c0:	4613      	movcs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d019      	beq.n	80052fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	4413      	add	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	6939      	ldr	r1, [r7, #16]
 80052d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052da:	f001 fecf 	bl	800707c <memcpy>
    NumBytesRead += NumBytesRem;
 80052de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800530c:	4618      	mov	r0, r3
 800530e:	3730      	adds	r7, #48	; 0x30
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200144a8 	.word	0x200144a8

08005318 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005326:	4b3d      	ldr	r3, [pc, #244]	; (800541c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005334:	f7ff ff12 	bl	800515c <_DoInit>
  SEGGER_RTT_LOCK();
 8005338:	f3ef 8311 	mrs	r3, BASEPRI
 800533c:	f04f 0120 	mov.w	r1, #32
 8005340:	f381 8811 	msr	BASEPRI, r1
 8005344:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005346:	4b35      	ldr	r3, [pc, #212]	; (800541c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005348:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	3304      	adds	r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3301      	adds	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	429a      	cmp	r2, r3
 8005374:	dbeb      	blt.n	800534e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005376:	e000      	b.n	800537a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005378:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	429a      	cmp	r2, r3
 8005382:	da3f      	bge.n	8005404 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005384:	6939      	ldr	r1, [r7, #16]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005398:	6939      	ldr	r1, [r7, #16]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	3304      	adds	r3, #4
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053ae:	6939      	ldr	r1, [r7, #16]
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	4613      	mov	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	3320      	adds	r3, #32
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80053c2:	6939      	ldr	r1, [r7, #16]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	3328      	adds	r3, #40	; 0x28
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	440b      	add	r3, r1
 80053e4:	3324      	adds	r3, #36	; 0x24
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80053ea:	6939      	ldr	r1, [r7, #16]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	440b      	add	r3, r1
 80053f8:	332c      	adds	r3, #44	; 0x2c
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053fe:	f3bf 8f5f 	dmb	sy
 8005402:	e002      	b.n	800540a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
 8005408:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005410:	69fb      	ldr	r3, [r7, #28]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200144a8 	.word	0x200144a8

08005420 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800543c:	f7ff fe8e 	bl	800515c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005442:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d82c      	bhi.n	80054a4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800544a:	f3ef 8311 	mrs	r3, BASEPRI
 800544e:	f04f 0120 	mov.w	r1, #32
 8005452:	f381 8811 	msr	BASEPRI, r1
 8005456:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	3360      	adds	r3, #96	; 0x60
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005492:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005494:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800549e:	2300      	movs	r3, #0
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
 80054a2:	e002      	b.n	80054aa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	200144a8 	.word	0x200144a8

080054b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00f      	beq.n	80054ee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80054ce:	e002      	b.n	80054d6 <_EncodeStr+0x1e>
      Len++;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	3301      	adds	r3, #1
 80054d4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4413      	add	r3, r2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f6      	bne.n	80054d0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d901      	bls.n	80054ee <_EncodeStr+0x36>
      Len = Limit;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2bfe      	cmp	r3, #254	; 0xfe
 80054f2:	d806      	bhi.n	8005502 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	60fa      	str	r2, [r7, #12]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e011      	b.n	8005526 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	60fa      	str	r2, [r7, #12]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	0a19      	lsrs	r1, r3, #8
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	60fa      	str	r2, [r7, #12]
 8005522:	b2ca      	uxtb	r2, r1
 8005524:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800552a:	e00a      	b.n	8005542 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	1c53      	adds	r3, r2, #1
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1c59      	adds	r1, r3, #1
 8005536:	60f9      	str	r1, [r7, #12]
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	701a      	strb	r2, [r3, #0]
    n++;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3301      	adds	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3f0      	bcc.n	800552c <_EncodeStr+0x74>
  }
  return pPayload;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <_HandleIncomingPacket+0xe0>)
 8005578:	7e1b      	ldrb	r3, [r3, #24]
 800557a:	4618      	mov	r0, r3
 800557c:	1cfb      	adds	r3, r7, #3
 800557e:	2201      	movs	r2, #1
 8005580:	4619      	mov	r1, r3
 8005582:	f7ff fe43 	bl	800520c <SEGGER_RTT_ReadNoLock>
 8005586:	4603      	mov	r3, r0
 8005588:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd54      	ble.n	800563a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d032      	beq.n	80055fc <_HandleIncomingPacket+0x8c>
 8005596:	2b80      	cmp	r3, #128	; 0x80
 8005598:	dc42      	bgt.n	8005620 <_HandleIncomingPacket+0xb0>
 800559a:	2b07      	cmp	r3, #7
 800559c:	dc16      	bgt.n	80055cc <_HandleIncomingPacket+0x5c>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	dd3e      	ble.n	8005620 <_HandleIncomingPacket+0xb0>
 80055a2:	3b01      	subs	r3, #1
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d83b      	bhi.n	8005620 <_HandleIncomingPacket+0xb0>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <_HandleIncomingPacket+0x40>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055d3 	.word	0x080055d3
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055df 	.word	0x080055df
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055eb 	.word	0x080055eb
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	080055f7 	.word	0x080055f7
 80055cc:	2b7f      	cmp	r3, #127	; 0x7f
 80055ce:	d036      	beq.n	800563e <_HandleIncomingPacket+0xce>
 80055d0:	e026      	b.n	8005620 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80055d2:	f000 ff41 	bl	8006458 <SEGGER_SYSVIEW_Start>
      break;
 80055d6:	e037      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80055d8:	f000 fff8 	bl	80065cc <SEGGER_SYSVIEW_Stop>
      break;
 80055dc:	e034      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80055de:	f001 f9d1 	bl	8006984 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80055e2:	e031      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80055e4:	f001 f996 	bl	8006914 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80055e8:	e02e      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80055ea:	f001 f815 	bl	8006618 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80055ee:	e02b      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80055f0:	f001 fc64 	bl	8006ebc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80055f4:	e028      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80055f6:	f001 fc43 	bl	8006e80 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80055fa:	e025      	b.n	8005648 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055fc:	4b14      	ldr	r3, [pc, #80]	; (8005650 <_HandleIncomingPacket+0xe0>)
 80055fe:	7e1b      	ldrb	r3, [r3, #24]
 8005600:	4618      	mov	r0, r3
 8005602:	1cfb      	adds	r3, r7, #3
 8005604:	2201      	movs	r2, #1
 8005606:	4619      	mov	r1, r3
 8005608:	f7ff fe00 	bl	800520c <SEGGER_RTT_ReadNoLock>
 800560c:	4603      	mov	r3, r0
 800560e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd15      	ble.n	8005642 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	4618      	mov	r0, r3
 800561a:	f001 fbb1 	bl	8006d80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800561e:	e010      	b.n	8005642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	b25b      	sxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	da0e      	bge.n	8005646 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <_HandleIncomingPacket+0xe0>)
 800562a:	7e1b      	ldrb	r3, [r3, #24]
 800562c:	4618      	mov	r0, r3
 800562e:	1cfb      	adds	r3, r7, #3
 8005630:	2201      	movs	r2, #1
 8005632:	4619      	mov	r1, r3
 8005634:	f7ff fdea 	bl	800520c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005638:	e005      	b.n	8005646 <_HandleIncomingPacket+0xd6>
    }
  }
 800563a:	bf00      	nop
 800563c:	e004      	b.n	8005648 <_HandleIncomingPacket+0xd8>
      break;
 800563e:	bf00      	nop
 8005640:	e002      	b.n	8005648 <_HandleIncomingPacket+0xd8>
      break;
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <_HandleIncomingPacket+0xd8>
      break;
 8005646:	bf00      	nop
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200142b8 	.word	0x200142b8

08005654 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800565a:	2301      	movs	r3, #1
 800565c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	3301      	adds	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005668:	4b31      	ldr	r3, [pc, #196]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
 800566e:	e00b      	b.n	8005688 <_TrySendOverflowPacket+0x34>
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	b2da      	uxtb	r2, r3
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	62f9      	str	r1, [r7, #44]	; 0x2c
 800567a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	09db      	lsrs	r3, r3, #7
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b7f      	cmp	r3, #127	; 0x7f
 800568c:	d8f0      	bhi.n	8005670 <_TrySendOverflowPacket+0x1c>
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800569e:	4b25      	ldr	r3, [pc, #148]	; (8005734 <_TrySendOverflowPacket+0xe0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056a4:	4b22      	ldr	r3, [pc, #136]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	e00b      	b.n	80056d0 <_TrySendOverflowPacket+0x7c>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	6279      	str	r1, [r7, #36]	; 0x24
 80056c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <_TrySendOverflowPacket+0x64>
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	627a      	str	r2, [r7, #36]	; 0x24
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	4618      	mov	r0, r3
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7fa fd8a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056fc:	4603      	mov	r3, r0
 80056fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e004      	b.n	8005724 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	3301      	adds	r3, #1
 8005720:	4a03      	ldr	r2, [pc, #12]	; (8005730 <_TrySendOverflowPacket+0xdc>)
 8005722:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005724:	693b      	ldr	r3, [r7, #16]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3730      	adds	r7, #48	; 0x30
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200142b8 	.word	0x200142b8
 8005734:	e0001004 	.word	0xe0001004

08005738 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005744:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <_SendPacket+0x1c0>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d010      	beq.n	800576e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800574c:	4b6a      	ldr	r3, [pc, #424]	; (80058f8 <_SendPacket+0x1c0>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a3 	beq.w	800589c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005756:	4b68      	ldr	r3, [pc, #416]	; (80058f8 <_SendPacket+0x1c0>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d109      	bne.n	8005772 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800575e:	f7ff ff79 	bl	8005654 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <_SendPacket+0x1c0>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	f040 809a 	bne.w	80058a0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800576c:	e001      	b.n	8005772 <_SendPacket+0x3a>
    goto Send;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <_SendPacket+0x3c>
Send:
 8005772:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b1f      	cmp	r3, #31
 8005778:	d809      	bhi.n	800578e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800577a:	4b5f      	ldr	r3, [pc, #380]	; (80058f8 <_SendPacket+0x1c0>)
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	f040 808b 	bne.w	80058a4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b17      	cmp	r3, #23
 8005792:	d807      	bhi.n	80057a4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b01      	subs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e03d      	b.n	8005820 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b7f      	cmp	r3, #127	; 0x7f
 80057b0:	d912      	bls.n	80057d8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	09da      	lsrs	r2, r3, #7
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	3a01      	subs	r2, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e006      	b.n	80057e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ea:	d912      	bls.n	8005812 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	09da      	lsrs	r2, r3, #7
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	3a01      	subs	r2, #1
 8005804:	60fa      	str	r2, [r7, #12]
 8005806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800580a:	b2da      	uxtb	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e006      	b.n	8005820 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b01      	subs	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005820:	4b36      	ldr	r3, [pc, #216]	; (80058fc <_SendPacket+0x1c4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005826:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <_SendPacket+0x1c0>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	e00b      	b.n	8005852 <_SendPacket+0x11a>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	6279      	str	r1, [r7, #36]	; 0x24
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <_SendPacket+0x102>
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	627a      	str	r2, [r7, #36]	; 0x24
 800585e:	6a3a      	ldr	r2, [r7, #32]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <_SendPacket+0x1c0>)
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	4618      	mov	r0, r3
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	461a      	mov	r2, r3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f7fa fcca 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800587c:	4603      	mov	r3, r0
 800587e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005886:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <_SendPacket+0x1c0>)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	60d3      	str	r3, [r2, #12]
 800588c:	e00b      	b.n	80058a6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800588e:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <_SendPacket+0x1c0>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	b2da      	uxtb	r2, r3
 8005896:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <_SendPacket+0x1c0>)
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e004      	b.n	80058a6 <_SendPacket+0x16e>
    goto SendDone;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <_SendPacket+0x16e>
      goto SendDone;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <_SendPacket+0x16e>
      goto SendDone;
 80058a4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <_SendPacket+0x1c0>)
 80058a8:	7e1b      	ldrb	r3, [r3, #24]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <_SendPacket+0x1c8>)
 80058ae:	460b      	mov	r3, r1
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	440b      	add	r3, r1
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4413      	add	r3, r2
 80058b8:	336c      	adds	r3, #108	; 0x6c
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <_SendPacket+0x1c0>)
 80058be:	7e1b      	ldrb	r3, [r3, #24]
 80058c0:	4618      	mov	r0, r3
 80058c2:	490f      	ldr	r1, [pc, #60]	; (8005900 <_SendPacket+0x1c8>)
 80058c4:	4603      	mov	r3, r0
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4403      	add	r3, r0
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	440b      	add	r3, r1
 80058ce:	3370      	adds	r3, #112	; 0x70
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d00b      	beq.n	80058ee <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <_SendPacket+0x1c0>)
 80058d8:	789b      	ldrb	r3, [r3, #2]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d107      	bne.n	80058ee <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <_SendPacket+0x1c0>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80058e4:	f7ff fe44 	bl	8005570 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <_SendPacket+0x1c0>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80058ee:	bf00      	nop
 80058f0:	3728      	adds	r7, #40	; 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200142b8 	.word	0x200142b8
 80058fc:	e0001004 	.word	0xe0001004
 8005900:	200144a8 	.word	0x200144a8

08005904 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	3301      	adds	r3, #1
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d80a      	bhi.n	8005934 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6051      	str	r1, [r2, #4]
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b80      	cmp	r3, #128	; 0x80
 800593a:	d15a      	bne.n	80059f2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	e00b      	b.n	8005976 <_StoreChar+0x72>
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	6279      	str	r1, [r7, #36]	; 0x24
 8005968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	09db      	lsrs	r3, r3, #7
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	2b7f      	cmp	r3, #127	; 0x7f
 800597a:	d8f0      	bhi.n	800595e <_StoreChar+0x5a>
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	627a      	str	r2, [r7, #36]	; 0x24
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	e00b      	b.n	80059ae <_StoreChar+0xaa>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	61f9      	str	r1, [r7, #28]
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <_StoreChar+0x92>
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	61fa      	str	r2, [r7, #28]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	221a      	movs	r2, #26
 80059ca:	6939      	ldr	r1, [r7, #16]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff feb3 	bl	8005738 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fdbe 	bl	8005558 <_PreparePacket>
 80059dc:	4602      	mov	r2, r0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	611a      	str	r2, [r3, #16]
  }
}
 80059f2:	bf00      	nop
 80059f4:	3728      	adds	r7, #40	; 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a16:	e007      	b.n	8005a28 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	623b      	str	r3, [r7, #32]
    Width++;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d2f3      	bcs.n	8005a18 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d901      	bls.n	8005a3c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d11f      	bne.n	8005a86 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01c      	beq.n	8005a86 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <_PrintUnsigned+0x66>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <_PrintUnsigned+0x66>
        c = '0';
 8005a5c:	2330      	movs	r3, #48	; 0x30
 8005a5e:	76fb      	strb	r3, [r7, #27]
 8005a60:	e001      	b.n	8005a66 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005a62:	2320      	movs	r3, #32
 8005a64:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a66:	e007      	b.n	8005a78 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005a6e:	7efb      	ldrb	r3, [r7, #27]
 8005a70:	4619      	mov	r1, r3
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff ff46 	bl	8005904 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <_PrintUnsigned+0x8a>
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d3f0      	bcc.n	8005a68 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d903      	bls.n	8005a94 <_PrintUnsigned+0x98>
      NumDigits--;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	e009      	b.n	8005aa8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d200      	bcs.n	8005aa8 <_PrintUnsigned+0xac>
        break;
 8005aa6:	e005      	b.n	8005ab4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ab2:	e7e8      	b.n	8005a86 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <_PrintUnsigned+0x128>)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7ff ff14 	bl	8005904 <_StoreChar>
    Digit /= Base;
 8005adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e3      	bne.n	8005ab4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d011      	beq.n	8005b1a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005afc:	e006      	b.n	8005b0c <_PrintUnsigned+0x110>
        FieldWidth--;
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	3b01      	subs	r3, #1
 8005b02:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b04:	2120      	movs	r1, #32
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fefc 	bl	8005904 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <_PrintUnsigned+0x11e>
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3f1      	bcc.n	8005afe <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3728      	adds	r7, #40	; 0x28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08007a90 	.word	0x08007a90

08005b28 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfb8      	it	lt
 8005b3c:	425b      	neglt	r3, r3
 8005b3e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b44:	e007      	b.n	8005b56 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b4e:	613b      	str	r3, [r7, #16]
    Width++;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	daf3      	bge.n	8005b46 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d901      	bls.n	8005b6a <_PrintInt+0x42>
    Width = NumDigits;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <_PrintInt+0x5e>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db04      	blt.n	8005b80 <_PrintInt+0x58>
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <_PrintInt+0x5e>
    FieldWidth--;
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <_PrintInt+0x6e>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <_PrintInt+0x9c>
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d111      	bne.n	8005bc4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00e      	beq.n	8005bc4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ba6:	e006      	b.n	8005bb6 <_PrintInt+0x8e>
        FieldWidth--;
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005bae:	2120      	movs	r1, #32
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fea7 	bl	8005904 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <_PrintInt+0x9c>
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d3f1      	bcc.n	8005ba8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da07      	bge.n	8005bda <_PrintInt+0xb2>
    v = -v;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	425b      	negs	r3, r3
 8005bce:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005bd0:	212d      	movs	r1, #45	; 0x2d
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff fe96 	bl	8005904 <_StoreChar>
 8005bd8:	e008      	b.n	8005bec <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005be4:	212b      	movs	r1, #43	; 0x2b
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fe8c 	bl	8005904 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d019      	beq.n	8005c2a <_PrintInt+0x102>
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d114      	bne.n	8005c2a <_PrintInt+0x102>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d111      	bne.n	8005c2a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00e      	beq.n	8005c2a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c0c:	e006      	b.n	8005c1c <_PrintInt+0xf4>
        FieldWidth--;
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c14:	2130      	movs	r1, #48	; 0x30
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff fe74 	bl	8005904 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <_PrintInt+0x102>
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3f1      	bcc.n	8005c0e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fedf 	bl	80059fc <_PrintUnsigned>
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b098      	sub	sp, #96	; 0x60
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c54:	f3ef 8311 	mrs	r3, BASEPRI
 8005c58:	f04f 0120 	mov.w	r1, #32
 8005c5c:	f381 8811 	msr	BASEPRI, r1
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
 8005c62:	48b7      	ldr	r0, [pc, #732]	; (8005f40 <_VPrintTarget+0x2f8>)
 8005c64:	f7ff fc78 	bl	8005558 <_PreparePacket>
 8005c68:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005c6a:	4bb5      	ldr	r3, [pc, #724]	; (8005f40 <_VPrintTarget+0x2f8>)
 8005c6c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8183 	beq.w	8005f9e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c9c:	2b25      	cmp	r3, #37	; 0x25
 8005c9e:	f040 8170 	bne.w	8005f82 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005cb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb6:	3b23      	subs	r3, #35	; 0x23
 8005cb8:	2b0d      	cmp	r3, #13
 8005cba:	d83f      	bhi.n	8005d3c <_VPrintTarget+0xf4>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <_VPrintTarget+0x7c>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005d2d 	.word	0x08005d2d
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d3d 	.word	0x08005d3d
 8005cd0:	08005d3d 	.word	0x08005d3d
 8005cd4:	08005d3d 	.word	0x08005d3d
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005d3d 	.word	0x08005d3d
 8005ce0:	08005d3d 	.word	0x08005d3d
 8005ce4:	08005d1d 	.word	0x08005d1d
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005d3d 	.word	0x08005d3d
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d0d 	.word	0x08005d0d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e01a      	b.n	8005d42 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e012      	b.n	8005d42 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1e:	f043 0304 	orr.w	r3, r3, #4
 8005d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e00a      	b.n	8005d42 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2e:	f043 0308 	orr.w	r3, r3, #8
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e002      	b.n	8005d42 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d40:	bf00      	nop
        }
      } while (v);
 8005d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1b0      	bne.n	8005caa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005d54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d58:	2b2f      	cmp	r3, #47	; 0x2f
 8005d5a:	d912      	bls.n	8005d82 <_VPrintTarget+0x13a>
 8005d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d60:	2b39      	cmp	r3, #57	; 0x39
 8005d62:	d80e      	bhi.n	8005d82 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	461a      	mov	r2, r3
 8005d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3b30      	subs	r3, #48	; 0x30
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005d80:	e7e4      	b.n	8005d4c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005d82:	2300      	movs	r3, #0
 8005d84:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d92:	2b2e      	cmp	r3, #46	; 0x2e
 8005d94:	d11d      	bne.n	8005dd2 <_VPrintTarget+0x18a>
        sFormat++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da8:	2b2f      	cmp	r3, #47	; 0x2f
 8005daa:	d912      	bls.n	8005dd2 <_VPrintTarget+0x18a>
 8005dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005db0:	2b39      	cmp	r3, #57	; 0x39
 8005db2:	d80e      	bhi.n	8005dd2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b30      	subs	r3, #48	; 0x30
 8005dce:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005dd0:	e7e4      	b.n	8005d9c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dde:	2b6c      	cmp	r3, #108	; 0x6c
 8005de0:	d003      	beq.n	8005dea <_VPrintTarget+0x1a2>
 8005de2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de6:	2b68      	cmp	r3, #104	; 0x68
 8005de8:	d107      	bne.n	8005dfa <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005df8:	e7ef      	b.n	8005dda <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfe:	2b25      	cmp	r3, #37	; 0x25
 8005e00:	f000 80b3 	beq.w	8005f6a <_VPrintTarget+0x322>
 8005e04:	2b25      	cmp	r3, #37	; 0x25
 8005e06:	f2c0 80b7 	blt.w	8005f78 <_VPrintTarget+0x330>
 8005e0a:	2b78      	cmp	r3, #120	; 0x78
 8005e0c:	f300 80b4 	bgt.w	8005f78 <_VPrintTarget+0x330>
 8005e10:	2b58      	cmp	r3, #88	; 0x58
 8005e12:	f2c0 80b1 	blt.w	8005f78 <_VPrintTarget+0x330>
 8005e16:	3b58      	subs	r3, #88	; 0x58
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	f200 80ad 	bhi.w	8005f78 <_VPrintTarget+0x330>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <_VPrintTarget+0x1dc>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005f1b 	.word	0x08005f1b
 8005e28:	08005f79 	.word	0x08005f79
 8005e2c:	08005f79 	.word	0x08005f79
 8005e30:	08005f79 	.word	0x08005f79
 8005e34:	08005f79 	.word	0x08005f79
 8005e38:	08005f79 	.word	0x08005f79
 8005e3c:	08005f79 	.word	0x08005f79
 8005e40:	08005f79 	.word	0x08005f79
 8005e44:	08005f79 	.word	0x08005f79
 8005e48:	08005f79 	.word	0x08005f79
 8005e4c:	08005f79 	.word	0x08005f79
 8005e50:	08005ea9 	.word	0x08005ea9
 8005e54:	08005ecf 	.word	0x08005ecf
 8005e58:	08005f79 	.word	0x08005f79
 8005e5c:	08005f79 	.word	0x08005f79
 8005e60:	08005f79 	.word	0x08005f79
 8005e64:	08005f79 	.word	0x08005f79
 8005e68:	08005f79 	.word	0x08005f79
 8005e6c:	08005f79 	.word	0x08005f79
 8005e70:	08005f79 	.word	0x08005f79
 8005e74:	08005f79 	.word	0x08005f79
 8005e78:	08005f79 	.word	0x08005f79
 8005e7c:	08005f79 	.word	0x08005f79
 8005e80:	08005f79 	.word	0x08005f79
 8005e84:	08005f45 	.word	0x08005f45
 8005e88:	08005f79 	.word	0x08005f79
 8005e8c:	08005f79 	.word	0x08005f79
 8005e90:	08005f79 	.word	0x08005f79
 8005e94:	08005f79 	.word	0x08005f79
 8005e98:	08005ef5 	.word	0x08005ef5
 8005e9c:	08005f79 	.word	0x08005f79
 8005ea0:	08005f79 	.word	0x08005f79
 8005ea4:	08005f1b 	.word	0x08005f1b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6011      	str	r1, [r2, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005ebc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fd1c 	bl	8005904 <_StoreChar>
        break;
 8005ecc:	e055      	b.n	8005f7a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	1d19      	adds	r1, r3, #4
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6011      	str	r1, [r2, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005edc:	f107 0014 	add.w	r0, r7, #20
 8005ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	220a      	movs	r2, #10
 8005eec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005eee:	f7ff fe1b 	bl	8005b28 <_PrintInt>
        break;
 8005ef2:	e042      	b.n	8005f7a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f04:	f107 0014 	add.w	r0, r7, #20
 8005f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f12:	220a      	movs	r2, #10
 8005f14:	f7ff fd72 	bl	80059fc <_PrintUnsigned>
        break;
 8005f18:	e02f      	b.n	8005f7a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1d19      	adds	r1, r3, #4
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6011      	str	r1, [r2, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f2a:	f107 0014 	add.w	r0, r7, #20
 8005f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f38:	2210      	movs	r2, #16
 8005f3a:	f7ff fd5f 	bl	80059fc <_PrintUnsigned>
        break;
 8005f3e:	e01c      	b.n	8005f7a <_VPrintTarget+0x332>
 8005f40:	200142e8 	.word	0x200142e8
      case 'p':
        v = va_arg(*pParamList, int);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	1d19      	adds	r1, r3, #4
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005f52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f54:	f107 0014 	add.w	r0, r7, #20
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2308      	movs	r3, #8
 8005f62:	2210      	movs	r2, #16
 8005f64:	f7ff fd4a 	bl	80059fc <_PrintUnsigned>
        break;
 8005f68:	e007      	b.n	8005f7a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005f6a:	f107 0314 	add.w	r3, r7, #20
 8005f6e:	2125      	movs	r1, #37	; 0x25
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fcc7 	bl	8005904 <_StoreChar>
        break;
 8005f76:	e000      	b.n	8005f7a <_VPrintTarget+0x332>
      default:
        break;
 8005f78:	bf00      	nop
      }
      sFormat++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e007      	b.n	8005f92 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005f82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f86:	f107 0314 	add.w	r3, r7, #20
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fcb9 	bl	8005904 <_StoreChar>
    }
  } while (*sFormat);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f47f ae72 	bne.w	8005c80 <_VPrintTarget+0x38>
 8005f9c:	e000      	b.n	8005fa0 <_VPrintTarget+0x358>
      break;
 8005f9e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d041      	beq.n	800602a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb6:	e00b      	b.n	8005fd0 <_VPrintTarget+0x388>
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	6439      	str	r1, [r7, #64]	; 0x40
 8005fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fcc:	09db      	lsrs	r3, r3, #7
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd4:	d8f0      	bhi.n	8005fb8 <_VPrintTarget+0x370>
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	643a      	str	r2, [r7, #64]	; 0x40
 8005fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fea:	2300      	movs	r3, #0
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
 8005fee:	e00b      	b.n	8006008 <_VPrintTarget+0x3c0>
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	09db      	lsrs	r3, r3, #7
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	2b7f      	cmp	r3, #127	; 0x7f
 800600c:	d8f0      	bhi.n	8005ff0 <_VPrintTarget+0x3a8>
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	63ba      	str	r2, [r7, #56]	; 0x38
 8006014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	69b9      	ldr	r1, [r7, #24]
 8006022:	221a      	movs	r2, #26
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fb87 	bl	8005738 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006030:	bf00      	nop
 8006032:	3758      	adds	r7, #88	; 0x58
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006046:	2300      	movs	r3, #0
 8006048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800604c:	4917      	ldr	r1, [pc, #92]	; (80060ac <SEGGER_SYSVIEW_Init+0x74>)
 800604e:	4818      	ldr	r0, [pc, #96]	; (80060b0 <SEGGER_SYSVIEW_Init+0x78>)
 8006050:	f7ff f962 	bl	8005318 <SEGGER_RTT_AllocUpBuffer>
 8006054:	4603      	mov	r3, r0
 8006056:	b2da      	uxtb	r2, r3
 8006058:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800605a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800605c:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800605e:	785a      	ldrb	r2, [r3, #1]
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006062:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006064:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006066:	7e1b      	ldrb	r3, [r3, #24]
 8006068:	4618      	mov	r0, r3
 800606a:	2300      	movs	r3, #0
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	2308      	movs	r3, #8
 8006070:	4a11      	ldr	r2, [pc, #68]	; (80060b8 <SEGGER_SYSVIEW_Init+0x80>)
 8006072:	490f      	ldr	r1, [pc, #60]	; (80060b0 <SEGGER_SYSVIEW_Init+0x78>)
 8006074:	f7ff f9d4 	bl	8005420 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800607a:	2200      	movs	r2, #0
 800607c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <SEGGER_SYSVIEW_Init+0x84>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006084:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006086:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800608c:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006092:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006098:	4a06      	ldr	r2, [pc, #24]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	200132b0 	.word	0x200132b0
 80060b0:	08007a5c 	.word	0x08007a5c
 80060b4:	200142b8 	.word	0x200142b8
 80060b8:	200142b0 	.word	0x200142b0
 80060bc:	e0001004 	.word	0xe0001004

080060c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060c8:	4a04      	ldr	r2, [pc, #16]	; (80060dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6113      	str	r3, [r2, #16]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	200142b8 	.word	0x200142b8

080060e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060e8:	f3ef 8311 	mrs	r3, BASEPRI
 80060ec:	f04f 0120 	mov.w	r1, #32
 80060f0:	f381 8811 	msr	BASEPRI, r1
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	4808      	ldr	r0, [pc, #32]	; (8006118 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060f8:	f7ff fa2e 	bl	8005558 <_PreparePacket>
 80060fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68b8      	ldr	r0, [r7, #8]
 8006104:	f7ff fb18 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	200142e8 	.word	0x200142e8

0800611c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006126:	f3ef 8311 	mrs	r3, BASEPRI
 800612a:	f04f 0120 	mov.w	r1, #32
 800612e:	f381 8811 	msr	BASEPRI, r1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	4816      	ldr	r0, [pc, #88]	; (8006190 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006136:	f7ff fa0f 	bl	8005558 <_PreparePacket>
 800613a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e00b      	b.n	8006162 <SEGGER_SYSVIEW_RecordU32+0x46>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	61f9      	str	r1, [r7, #28]
 8006154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	09db      	lsrs	r3, r3, #7
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b7f      	cmp	r3, #127	; 0x7f
 8006166:	d8f0      	bhi.n	800614a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	61fa      	str	r2, [r7, #28]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	6938      	ldr	r0, [r7, #16]
 800617e:	f7ff fadb 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f383 8811 	msr	BASEPRI, r3
}
 8006188:	bf00      	nop
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	200142e8 	.word	0x200142e8

08006194 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061a0:	f3ef 8311 	mrs	r3, BASEPRI
 80061a4:	f04f 0120 	mov.w	r1, #32
 80061a8:	f381 8811 	msr	BASEPRI, r1
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	4825      	ldr	r0, [pc, #148]	; (8006244 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80061b0:	f7ff f9d2 	bl	8005558 <_PreparePacket>
 80061b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c2:	e00b      	b.n	80061dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	09db      	lsrs	r3, r3, #7
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	2b7f      	cmp	r3, #127	; 0x7f
 80061e0:	d8f0      	bhi.n	80061c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	623b      	str	r3, [r7, #32]
 80061fa:	e00b      	b.n	8006214 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	6279      	str	r1, [r7, #36]	; 0x24
 8006206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	09db      	lsrs	r3, r3, #7
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b7f      	cmp	r3, #127	; 0x7f
 8006218:	d8f0      	bhi.n	80061fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	627a      	str	r2, [r7, #36]	; 0x24
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	69b8      	ldr	r0, [r7, #24]
 8006230:	f7ff fa82 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f383 8811 	msr	BASEPRI, r3
}
 800623a:	bf00      	nop
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	200142e8 	.word	0x200142e8

08006248 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	; 0x38
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006256:	f3ef 8311 	mrs	r3, BASEPRI
 800625a:	f04f 0120 	mov.w	r1, #32
 800625e:	f381 8811 	msr	BASEPRI, r1
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	4832      	ldr	r0, [pc, #200]	; (8006330 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006266:	f7ff f977 	bl	8005558 <_PreparePacket>
 800626a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
 8006278:	e00b      	b.n	8006292 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	b2da      	uxtb	r2, r3
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	6379      	str	r1, [r7, #52]	; 0x34
 8006284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	09db      	lsrs	r3, r3, #7
 8006290:	633b      	str	r3, [r7, #48]	; 0x30
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2b7f      	cmp	r3, #127	; 0x7f
 8006296:	d8f0      	bhi.n	800627a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	637a      	str	r2, [r7, #52]	; 0x34
 800629e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b0:	e00b      	b.n	80062ca <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	09db      	lsrs	r3, r3, #7
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	2b7f      	cmp	r3, #127	; 0x7f
 80062ce:	d8f0      	bhi.n	80062b2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	6279      	str	r1, [r7, #36]	; 0x24
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	627a      	str	r2, [r7, #36]	; 0x24
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	69b8      	ldr	r0, [r7, #24]
 800631e:	f7ff fa0b 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3738      	adds	r7, #56	; 0x38
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	200142e8 	.word	0x200142e8

08006334 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b090      	sub	sp, #64	; 0x40
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006342:	f3ef 8311 	mrs	r3, BASEPRI
 8006346:	f04f 0120 	mov.w	r1, #32
 800634a:	f381 8811 	msr	BASEPRI, r1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	4840      	ldr	r0, [pc, #256]	; (8006454 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006352:	f7ff f901 	bl	8005558 <_PreparePacket>
 8006356:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	63fa      	str	r2, [r7, #60]	; 0x3c
 800638a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006392:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
 800639c:	e00b      	b.n	80063b6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	6379      	str	r1, [r7, #52]	; 0x34
 80063a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ba:	d8f0      	bhi.n	800639e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	637a      	str	r2, [r7, #52]	; 0x34
 80063c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d4:	e00b      	b.n	80063ee <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	d8f0      	bhi.n	80063d6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	e00b      	b.n	8006426 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	1c59      	adds	r1, r3, #1
 8006416:	6279      	str	r1, [r7, #36]	; 0x24
 8006418:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	09db      	lsrs	r3, r3, #7
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2b7f      	cmp	r3, #127	; 0x7f
 800642a:	d8f0      	bhi.n	800640e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	627a      	str	r2, [r7, #36]	; 0x24
 8006432:	6a3a      	ldr	r2, [r7, #32]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	6979      	ldr	r1, [r7, #20]
 8006440:	69b8      	ldr	r0, [r7, #24]
 8006442:	f7ff f979 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f383 8811 	msr	BASEPRI, r3
}
 800644c:	bf00      	nop
 800644e:	3740      	adds	r7, #64	; 0x40
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	200142e8 	.word	0x200142e8

08006458 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	; 0x30
 800645c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800645e:	4b58      	ldr	r3, [pc, #352]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006464:	f3ef 8311 	mrs	r3, BASEPRI
 8006468:	f04f 0120 	mov.w	r1, #32
 800646c:	f381 8811 	msr	BASEPRI, r1
 8006470:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006472:	4b53      	ldr	r3, [pc, #332]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	220a      	movs	r2, #10
 8006478:	4952      	ldr	r1, [pc, #328]	; (80065c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800647a:	4618      	mov	r0, r3
 800647c:	f7f9 fec8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006486:	200a      	movs	r0, #10
 8006488:	f7ff fe2a 	bl	80060e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800648c:	f3ef 8311 	mrs	r3, BASEPRI
 8006490:	f04f 0120 	mov.w	r1, #32
 8006494:	f381 8811 	msr	BASEPRI, r1
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	484b      	ldr	r0, [pc, #300]	; (80065c8 <SEGGER_SYSVIEW_Start+0x170>)
 800649c:	f7ff f85c 	bl	8005558 <_PreparePacket>
 80064a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b0:	e00b      	b.n	80064ca <SEGGER_SYSVIEW_Start+0x72>
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	1c59      	adds	r1, r3, #1
 80064ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	09db      	lsrs	r3, r3, #7
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	2b7f      	cmp	r3, #127	; 0x7f
 80064ce:	d8f0      	bhi.n	80064b2 <SEGGER_SYSVIEW_Start+0x5a>
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	e00b      	b.n	8006504 <SEGGER_SYSVIEW_Start+0xac>
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1c59      	adds	r1, r3, #1
 80064f4:	6279      	str	r1, [r7, #36]	; 0x24
 80064f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	09db      	lsrs	r3, r3, #7
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	2b7f      	cmp	r3, #127	; 0x7f
 8006508:	d8f0      	bhi.n	80064ec <SEGGER_SYSVIEW_Start+0x94>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	627a      	str	r2, [r7, #36]	; 0x24
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e00b      	b.n	800653e <SEGGER_SYSVIEW_Start+0xe6>
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	61f9      	str	r1, [r7, #28]
 8006530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	09db      	lsrs	r3, r3, #7
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b7f      	cmp	r3, #127	; 0x7f
 8006542:	d8f0      	bhi.n	8006526 <SEGGER_SYSVIEW_Start+0xce>
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	61fa      	str	r2, [r7, #28]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	e00b      	b.n	8006576 <SEGGER_SYSVIEW_Start+0x11e>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	6179      	str	r1, [r7, #20]
 8006568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	09db      	lsrs	r3, r3, #7
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b7f      	cmp	r3, #127	; 0x7f
 800657a:	d8f0      	bhi.n	800655e <SEGGER_SYSVIEW_Start+0x106>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	617a      	str	r2, [r7, #20]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800658c:	2218      	movs	r2, #24
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff f8d1 	bl	8005738 <_SendPacket>
      RECORD_END();
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800659c:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <SEGGER_SYSVIEW_Start+0x168>)
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80065aa:	f000 f9eb 	bl	8006984 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80065ae:	f000 f9b1 	bl	8006914 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80065b2:	f000 fc83 	bl	8006ebc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80065b6:	bf00      	nop
 80065b8:	3730      	adds	r7, #48	; 0x30
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200142b8 	.word	0x200142b8
 80065c4:	08007a84 	.word	0x08007a84
 80065c8:	200142e8 	.word	0x200142e8

080065cc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065d2:	f3ef 8311 	mrs	r3, BASEPRI
 80065d6:	f04f 0120 	mov.w	r1, #32
 80065da:	f381 8811 	msr	BASEPRI, r1
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	480b      	ldr	r0, [pc, #44]	; (8006610 <SEGGER_SYSVIEW_Stop+0x44>)
 80065e2:	f7fe ffb9 	bl	8005558 <_PreparePacket>
 80065e6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <SEGGER_SYSVIEW_Stop+0x48>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80065f0:	220b      	movs	r2, #11
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f7ff f89f 	bl	8005738 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80065fa:	4b06      	ldr	r3, [pc, #24]	; (8006614 <SEGGER_SYSVIEW_Stop+0x48>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f383 8811 	msr	BASEPRI, r3
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200142e8 	.word	0x200142e8
 8006614:	200142b8 	.word	0x200142b8

08006618 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	; 0x30
 800661c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800661e:	f3ef 8311 	mrs	r3, BASEPRI
 8006622:	f04f 0120 	mov.w	r1, #32
 8006626:	f381 8811 	msr	BASEPRI, r1
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	4845      	ldr	r0, [pc, #276]	; (8006744 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800662e:	f7fe ff93 	bl	8005558 <_PreparePacket>
 8006632:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663c:	4b42      	ldr	r3, [pc, #264]	; (8006748 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
 8006642:	e00b      	b.n	800665c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	b2da      	uxtb	r2, r3
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	1c59      	adds	r1, r3, #1
 800664c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800664e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	09db      	lsrs	r3, r3, #7
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	2b7f      	cmp	r3, #127	; 0x7f
 8006660:	d8f0      	bhi.n	8006644 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
 8006676:	4b34      	ldr	r3, [pc, #208]	; (8006748 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	e00b      	b.n	8006696 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	6279      	str	r1, [r7, #36]	; 0x24
 8006688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2b7f      	cmp	r3, #127	; 0x7f
 800669a:	d8f0      	bhi.n	800667e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	627a      	str	r2, [r7, #36]	; 0x24
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	4b25      	ldr	r3, [pc, #148]	; (8006748 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e00b      	b.n	80066d0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	61f9      	str	r1, [r7, #28]
 80066c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	09db      	lsrs	r3, r3, #7
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b7f      	cmp	r3, #127	; 0x7f
 80066d4:	d8f0      	bhi.n	80066b8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	61fa      	str	r2, [r7, #28]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	e00b      	b.n	8006708 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1c59      	adds	r1, r3, #1
 80066f8:	6179      	str	r1, [r7, #20]
 80066fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	09db      	lsrs	r3, r3, #7
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2b7f      	cmp	r3, #127	; 0x7f
 800670c:	d8f0      	bhi.n	80066f0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	617a      	str	r2, [r7, #20]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800671e:	2218      	movs	r2, #24
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	68b8      	ldr	r0, [r7, #8]
 8006724:	f7ff f808 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	4798      	blx	r3
  }
}
 800673c:	bf00      	nop
 800673e:	3730      	adds	r7, #48	; 0x30
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200142e8 	.word	0x200142e8
 8006748:	200142b8 	.word	0x200142b8

0800674c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b092      	sub	sp, #72	; 0x48
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006754:	f3ef 8311 	mrs	r3, BASEPRI
 8006758:	f04f 0120 	mov.w	r1, #32
 800675c:	f381 8811 	msr	BASEPRI, r1
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	486a      	ldr	r0, [pc, #424]	; (800690c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006764:	f7fe fef8 	bl	8005558 <_PreparePacket>
 8006768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	647b      	str	r3, [r7, #68]	; 0x44
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b66      	ldr	r3, [pc, #408]	; (8006910 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	643b      	str	r3, [r7, #64]	; 0x40
 800677e:	e00b      	b.n	8006798 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006782:	b2da      	uxtb	r2, r3
 8006784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006786:	1c59      	adds	r1, r3, #1
 8006788:	6479      	str	r1, [r7, #68]	; 0x44
 800678a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006794:	09db      	lsrs	r3, r3, #7
 8006796:	643b      	str	r3, [r7, #64]	; 0x40
 8006798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679a:	2b7f      	cmp	r3, #127	; 0x7f
 800679c:	d8f0      	bhi.n	8006780 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800679e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	647a      	str	r2, [r7, #68]	; 0x44
 80067a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067b8:	e00b      	b.n	80067d2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	1c59      	adds	r1, r3, #1
 80067c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80067c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	09db      	lsrs	r3, r3, #7
 80067d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b7f      	cmp	r3, #127	; 0x7f
 80067d6:	d8f0      	bhi.n	80067ba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80067d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fe fe61 	bl	80054b8 <_EncodeStr>
 80067f6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80067f8:	2209      	movs	r2, #9
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	6938      	ldr	r0, [r7, #16]
 80067fe:	f7fe ff9b 	bl	8005738 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b40      	ldr	r3, [pc, #256]	; (8006910 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	633b      	str	r3, [r7, #48]	; 0x30
 8006816:	e00b      	b.n	8006830 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	b2da      	uxtb	r2, r3
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	6379      	str	r1, [r7, #52]	; 0x34
 8006822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	09db      	lsrs	r3, r3, #7
 800682e:	633b      	str	r3, [r7, #48]	; 0x30
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	2b7f      	cmp	r3, #127	; 0x7f
 8006834:	d8f0      	bhi.n	8006818 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	637a      	str	r2, [r7, #52]	; 0x34
 800683c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006844:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006850:	e00b      	b.n	800686a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	b2da      	uxtb	r2, r3
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800685c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	2b7f      	cmp	r3, #127	; 0x7f
 800686e:	d8f0      	bhi.n	8006852 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	e00b      	b.n	80068a4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	1c59      	adds	r1, r3, #1
 8006894:	6279      	str	r1, [r7, #36]	; 0x24
 8006896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	09db      	lsrs	r3, r3, #7
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b7f      	cmp	r3, #127	; 0x7f
 80068a8:	d8f0      	bhi.n	800688c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	627a      	str	r2, [r7, #36]	; 0x24
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e00b      	b.n	80068dc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	61f9      	str	r1, [r7, #28]
 80068ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	09db      	lsrs	r3, r3, #7
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	2b7f      	cmp	r3, #127	; 0x7f
 80068e0:	d8f0      	bhi.n	80068c4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	61fa      	str	r2, [r7, #28]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80068f2:	2215      	movs	r2, #21
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f7fe ff1e 	bl	8005738 <_SendPacket>
  RECORD_END();
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f383 8811 	msr	BASEPRI, r3
}
 8006902:	bf00      	nop
 8006904:	3748      	adds	r7, #72	; 0x48
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200142e8 	.word	0x200142e8
 8006910:	200142b8 	.word	0x200142b8

08006914 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800692a:	4b03      	ldr	r3, [pc, #12]	; (8006938 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4798      	blx	r3
  }
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200142b8 	.word	0x200142b8

0800693c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006944:	f3ef 8311 	mrs	r3, BASEPRI
 8006948:	f04f 0120 	mov.w	r1, #32
 800694c:	f381 8811 	msr	BASEPRI, r1
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	480b      	ldr	r0, [pc, #44]	; (8006980 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006954:	f7fe fe00 	bl	8005558 <_PreparePacket>
 8006958:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800695a:	2280      	movs	r2, #128	; 0x80
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	6938      	ldr	r0, [r7, #16]
 8006960:	f7fe fdaa 	bl	80054b8 <_EncodeStr>
 8006964:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006966:	220e      	movs	r2, #14
 8006968:	68f9      	ldr	r1, [r7, #12]
 800696a:	6938      	ldr	r0, [r7, #16]
 800696c:	f7fe fee4 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f383 8811 	msr	BASEPRI, r3
}
 8006976:	bf00      	nop
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	200142e8 	.word	0x200142e8

08006984 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01a      	beq.n	80069c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d015      	beq.n	80069c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4798      	blx	r3
 80069a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	000a      	movs	r2, r1
 80069b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069ba:	4613      	mov	r3, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	4621      	mov	r1, r4
 80069c0:	200d      	movs	r0, #13
 80069c2:	f7ff fbe7 	bl	8006194 <SEGGER_SYSVIEW_RecordU32x2>
 80069c6:	e006      	b.n	80069d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4619      	mov	r1, r3
 80069ce:	200c      	movs	r0, #12
 80069d0:	f7ff fba4 	bl	800611c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd90      	pop	{r4, r7, pc}
 80069de:	bf00      	nop
 80069e0:	200142b8 	.word	0x200142b8
 80069e4:	e0001004 	.word	0xe0001004

080069e8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069ee:	f3ef 8311 	mrs	r3, BASEPRI
 80069f2:	f04f 0120 	mov.w	r1, #32
 80069f6:	f381 8811 	msr	BASEPRI, r1
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	4819      	ldr	r0, [pc, #100]	; (8006a64 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80069fe:	f7fe fdab 	bl	8005558 <_PreparePacket>
 8006a02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a08:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a10:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	e00b      	b.n	8006a34 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	6179      	str	r1, [r7, #20]
 8006a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d8f0      	bhi.n	8006a1c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	617a      	str	r2, [r7, #20]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	68b8      	ldr	r0, [r7, #8]
 8006a50:	f7fe fe72 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f383 8811 	msr	BASEPRI, r3
}
 8006a5a:	bf00      	nop
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200142e8 	.word	0x200142e8
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a72:	f3ef 8311 	mrs	r3, BASEPRI
 8006a76:	f04f 0120 	mov.w	r1, #32
 8006a7a:	f381 8811 	msr	BASEPRI, r1
 8006a7e:	607b      	str	r3, [r7, #4]
 8006a80:	4807      	ldr	r0, [pc, #28]	; (8006aa0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a82:	f7fe fd69 	bl	8005558 <_PreparePacket>
 8006a86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a88:	2203      	movs	r2, #3
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f7fe fe53 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f383 8811 	msr	BASEPRI, r3
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	200142e8 	.word	0x200142e8

08006aa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8006aae:	f04f 0120 	mov.w	r1, #32
 8006ab2:	f381 8811 	msr	BASEPRI, r1
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	4807      	ldr	r0, [pc, #28]	; (8006ad8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006aba:	f7fe fd4d 	bl	8005558 <_PreparePacket>
 8006abe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006ac0:	2212      	movs	r2, #18
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6838      	ldr	r0, [r7, #0]
 8006ac6:	f7fe fe37 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f383 8811 	msr	BASEPRI, r3
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	200142e8 	.word	0x200142e8

08006adc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae6:	f04f 0120 	mov.w	r1, #32
 8006aea:	f381 8811 	msr	BASEPRI, r1
 8006aee:	607b      	str	r3, [r7, #4]
 8006af0:	4807      	ldr	r0, [pc, #28]	; (8006b10 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006af2:	f7fe fd31 	bl	8005558 <_PreparePacket>
 8006af6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006af8:	2211      	movs	r2, #17
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6838      	ldr	r0, [r7, #0]
 8006afe:	f7fe fe1b 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f383 8811 	msr	BASEPRI, r3
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	200142e8 	.word	0x200142e8

08006b14 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b20:	f04f 0120 	mov.w	r1, #32
 8006b24:	f381 8811 	msr	BASEPRI, r1
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	4819      	ldr	r0, [pc, #100]	; (8006b90 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006b2c:	f7fe fd14 	bl	8005558 <_PreparePacket>
 8006b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e00b      	b.n	8006b62 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	1c59      	adds	r1, r3, #1
 8006b52:	61f9      	str	r1, [r7, #28]
 8006b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	09db      	lsrs	r3, r3, #7
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b7f      	cmp	r3, #127	; 0x7f
 8006b66:	d8f0      	bhi.n	8006b4a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	61fa      	str	r2, [r7, #28]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b78:	2208      	movs	r2, #8
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6938      	ldr	r0, [r7, #16]
 8006b7e:	f7fe fddb 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f383 8811 	msr	BASEPRI, r3
}
 8006b88:	bf00      	nop
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	200142e8 	.word	0x200142e8
 8006b94:	200142b8 	.word	0x200142b8

08006b98 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba4:	f04f 0120 	mov.w	r1, #32
 8006ba8:	f381 8811 	msr	BASEPRI, r1
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	4819      	ldr	r0, [pc, #100]	; (8006c14 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006bb0:	f7fe fcd2 	bl	8005558 <_PreparePacket>
 8006bb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bba:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e00b      	b.n	8006be6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	1c59      	adds	r1, r3, #1
 8006bd6:	61f9      	str	r1, [r7, #28]
 8006bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	09db      	lsrs	r3, r3, #7
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bea:	d8f0      	bhi.n	8006bce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	61fa      	str	r2, [r7, #28]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	6938      	ldr	r0, [r7, #16]
 8006c02:	f7fe fd99 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f383 8811 	msr	BASEPRI, r3
}
 8006c0c:	bf00      	nop
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200142e8 	.word	0x200142e8
 8006c18:	200142b8 	.word	0x200142b8

08006c1c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c24:	f3ef 8311 	mrs	r3, BASEPRI
 8006c28:	f04f 0120 	mov.w	r1, #32
 8006c2c:	f381 8811 	msr	BASEPRI, r1
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	4819      	ldr	r0, [pc, #100]	; (8006c98 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c34:	f7fe fc90 	bl	8005558 <_PreparePacket>
 8006c38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c3e:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	e00b      	b.n	8006c6a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	61f9      	str	r1, [r7, #28]
 8006c5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	09db      	lsrs	r3, r3, #7
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6e:	d8f0      	bhi.n	8006c52 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	61fa      	str	r2, [r7, #28]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c80:	2206      	movs	r2, #6
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	6938      	ldr	r0, [r7, #16]
 8006c86:	f7fe fd57 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f383 8811 	msr	BASEPRI, r3
}
 8006c90:	bf00      	nop
 8006c92:	3720      	adds	r7, #32
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	200142e8 	.word	0x200142e8
 8006c9c:	200142b8 	.word	0x200142b8

08006ca0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	; 0x28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006caa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cae:	f04f 0120 	mov.w	r1, #32
 8006cb2:	f381 8811 	msr	BASEPRI, r1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	4827      	ldr	r0, [pc, #156]	; (8006d58 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006cba:	f7fe fc4d 	bl	8005558 <_PreparePacket>
 8006cbe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	e00b      	b.n	8006cf0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	09db      	lsrs	r3, r3, #7
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf4:	d8f0      	bhi.n	8006cd8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	e00b      	b.n	8006d28 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	1c59      	adds	r1, r3, #1
 8006d18:	61f9      	str	r1, [r7, #28]
 8006d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	09db      	lsrs	r3, r3, #7
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2c:	d8f0      	bhi.n	8006d10 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	61fa      	str	r2, [r7, #28]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006d3e:	2207      	movs	r2, #7
 8006d40:	68f9      	ldr	r1, [r7, #12]
 8006d42:	6938      	ldr	r0, [r7, #16]
 8006d44:	f7fe fcf8 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f383 8811 	msr	BASEPRI, r3
}
 8006d4e:	bf00      	nop
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200142e8 	.word	0x200142e8
 8006d5c:	200142b8 	.word	0x200142b8

08006d60 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	200142b8 	.word	0x200142b8

08006d80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08c      	sub	sp, #48	; 0x30
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d8a:	4b3b      	ldr	r3, [pc, #236]	; (8006e78 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d06d      	beq.n	8006e6e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006d92:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d98:	2300      	movs	r3, #0
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9c:	e008      	b.n	8006db0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	3301      	adds	r3, #1
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d3f2      	bcc.n	8006d9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006db8:	e000      	b.n	8006dbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006dba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d055      	beq.n	8006e6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc6:	f04f 0120 	mov.w	r1, #32
 8006dca:	f381 8811 	msr	BASEPRI, r1
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	482a      	ldr	r0, [pc, #168]	; (8006e7c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006dd2:	f7fe fbc1 	bl	8005558 <_PreparePacket>
 8006dd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	e00b      	b.n	8006dfe <SEGGER_SYSVIEW_SendModule+0x7e>
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	1c59      	adds	r1, r3, #1
 8006dee:	6279      	str	r1, [r7, #36]	; 0x24
 8006df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	09db      	lsrs	r3, r3, #7
 8006dfc:	623b      	str	r3, [r7, #32]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b7f      	cmp	r3, #127	; 0x7f
 8006e02:	d8f0      	bhi.n	8006de6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	627a      	str	r2, [r7, #36]	; 0x24
 8006e0a:	6a3a      	ldr	r2, [r7, #32]
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e00b      	b.n	8006e38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	61f9      	str	r1, [r7, #28]
 8006e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	09db      	lsrs	r3, r3, #7
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3c:	d8f0      	bhi.n	8006e20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	61fa      	str	r2, [r7, #28]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2280      	movs	r2, #128	; 0x80
 8006e54:	4619      	mov	r1, r3
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7fe fb2e 	bl	80054b8 <_EncodeStr>
 8006e5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e5e:	2216      	movs	r2, #22
 8006e60:	68f9      	ldr	r1, [r7, #12]
 8006e62:	6938      	ldr	r0, [r7, #16]
 8006e64:	f7fe fc68 	bl	8005738 <_SendPacket>
      RECORD_END();
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3730      	adds	r7, #48	; 0x30
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	200142e0 	.word	0x200142e0
 8006e7c:	200142e8 	.word	0x200142e8

08006e80 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00f      	beq.n	8006eae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f2      	bne.n	8006e94 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200142e0 	.word	0x200142e0

08006ebc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec6:	f04f 0120 	mov.w	r1, #32
 8006eca:	f381 8811 	msr	BASEPRI, r1
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	4817      	ldr	r0, [pc, #92]	; (8006f30 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ed2:	f7fe fb41 	bl	8005558 <_PreparePacket>
 8006ed6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	e00b      	b.n	8006f00 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	1c59      	adds	r1, r3, #1
 8006ef0:	6179      	str	r1, [r7, #20]
 8006ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	09db      	lsrs	r3, r3, #7
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b7f      	cmp	r3, #127	; 0x7f
 8006f04:	d8f0      	bhi.n	8006ee8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	617a      	str	r2, [r7, #20]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f16:	221b      	movs	r2, #27
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	68b8      	ldr	r0, [r7, #8]
 8006f1c:	f7fe fc0c 	bl	8005738 <_SendPacket>
  RECORD_END();
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f383 8811 	msr	BASEPRI, r3
}
 8006f26:	bf00      	nop
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200142e8 	.word	0x200142e8
 8006f34:	200142e4 	.word	0x200142e4

08006f38 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f38:	b40f      	push	{r0, r1, r2, r3}
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f46:	1d3b      	adds	r3, r7, #4
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	6938      	ldr	r0, [r7, #16]
 8006f4e:	f7fe fe7b 	bl	8005c48 <_VPrintTarget>
  va_end(ParamList);
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f5c:	b004      	add	sp, #16
 8006f5e:	4770      	bx	lr

08006f60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f68:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6c:	f04f 0120 	mov.w	r1, #32
 8006f70:	f381 8811 	msr	BASEPRI, r1
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	4827      	ldr	r0, [pc, #156]	; (8007014 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f78:	f7fe faee 	bl	8005558 <_PreparePacket>
 8006f7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f7e:	2280      	movs	r2, #128	; 0x80
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	6938      	ldr	r0, [r7, #16]
 8006f84:	f7fe fa98 	bl	80054b8 <_EncodeStr>
 8006f88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8e:	2301      	movs	r3, #1
 8006f90:	623b      	str	r3, [r7, #32]
 8006f92:	e00b      	b.n	8006fac <SEGGER_SYSVIEW_Warn+0x4c>
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	623b      	str	r3, [r7, #32]
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb0:	d8f0      	bhi.n	8006f94 <SEGGER_SYSVIEW_Warn+0x34>
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	627a      	str	r2, [r7, #36]	; 0x24
 8006fb8:	6a3a      	ldr	r2, [r7, #32]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e00b      	b.n	8006fe4 <SEGGER_SYSVIEW_Warn+0x84>
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	61f9      	str	r1, [r7, #28]
 8006fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	09db      	lsrs	r3, r3, #7
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe8:	d8f0      	bhi.n	8006fcc <SEGGER_SYSVIEW_Warn+0x6c>
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	61fa      	str	r2, [r7, #28]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ffa:	221a      	movs	r2, #26
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	6938      	ldr	r0, [r7, #16]
 8007000:	f7fe fb9a 	bl	8005738 <_SendPacket>
  RECORD_END();
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f383 8811 	msr	BASEPRI, r3
}
 800700a:	bf00      	nop
 800700c:	3728      	adds	r7, #40	; 0x28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200142e8 	.word	0x200142e8

08007018 <__libc_init_array>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4d0d      	ldr	r5, [pc, #52]	; (8007050 <__libc_init_array+0x38>)
 800701c:	4c0d      	ldr	r4, [pc, #52]	; (8007054 <__libc_init_array+0x3c>)
 800701e:	1b64      	subs	r4, r4, r5
 8007020:	10a4      	asrs	r4, r4, #2
 8007022:	2600      	movs	r6, #0
 8007024:	42a6      	cmp	r6, r4
 8007026:	d109      	bne.n	800703c <__libc_init_array+0x24>
 8007028:	4d0b      	ldr	r5, [pc, #44]	; (8007058 <__libc_init_array+0x40>)
 800702a:	4c0c      	ldr	r4, [pc, #48]	; (800705c <__libc_init_array+0x44>)
 800702c:	f000 fc7e 	bl	800792c <_init>
 8007030:	1b64      	subs	r4, r4, r5
 8007032:	10a4      	asrs	r4, r4, #2
 8007034:	2600      	movs	r6, #0
 8007036:	42a6      	cmp	r6, r4
 8007038:	d105      	bne.n	8007046 <__libc_init_array+0x2e>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007040:	4798      	blx	r3
 8007042:	3601      	adds	r6, #1
 8007044:	e7ee      	b.n	8007024 <__libc_init_array+0xc>
 8007046:	f855 3b04 	ldr.w	r3, [r5], #4
 800704a:	4798      	blx	r3
 800704c:	3601      	adds	r6, #1
 800704e:	e7f2      	b.n	8007036 <__libc_init_array+0x1e>
 8007050:	08007adc 	.word	0x08007adc
 8007054:	08007adc 	.word	0x08007adc
 8007058:	08007adc 	.word	0x08007adc
 800705c:	08007ae0 	.word	0x08007ae0

08007060 <memcmp>:
 8007060:	b530      	push	{r4, r5, lr}
 8007062:	3901      	subs	r1, #1
 8007064:	2400      	movs	r4, #0
 8007066:	42a2      	cmp	r2, r4
 8007068:	d101      	bne.n	800706e <memcmp+0xe>
 800706a:	2000      	movs	r0, #0
 800706c:	e005      	b.n	800707a <memcmp+0x1a>
 800706e:	5d03      	ldrb	r3, [r0, r4]
 8007070:	3401      	adds	r4, #1
 8007072:	5d0d      	ldrb	r5, [r1, r4]
 8007074:	42ab      	cmp	r3, r5
 8007076:	d0f6      	beq.n	8007066 <memcmp+0x6>
 8007078:	1b58      	subs	r0, r3, r5
 800707a:	bd30      	pop	{r4, r5, pc}

0800707c <memcpy>:
 800707c:	440a      	add	r2, r1
 800707e:	4291      	cmp	r1, r2
 8007080:	f100 33ff 	add.w	r3, r0, #4294967295
 8007084:	d100      	bne.n	8007088 <memcpy+0xc>
 8007086:	4770      	bx	lr
 8007088:	b510      	push	{r4, lr}
 800708a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007092:	4291      	cmp	r1, r2
 8007094:	d1f9      	bne.n	800708a <memcpy+0xe>
 8007096:	bd10      	pop	{r4, pc}

08007098 <memset>:
 8007098:	4402      	add	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <sniprintf>:
 80070a8:	b40c      	push	{r2, r3}
 80070aa:	b530      	push	{r4, r5, lr}
 80070ac:	4b17      	ldr	r3, [pc, #92]	; (800710c <sniprintf+0x64>)
 80070ae:	1e0c      	subs	r4, r1, #0
 80070b0:	681d      	ldr	r5, [r3, #0]
 80070b2:	b09d      	sub	sp, #116	; 0x74
 80070b4:	da08      	bge.n	80070c8 <sniprintf+0x20>
 80070b6:	238b      	movs	r3, #139	; 0x8b
 80070b8:	602b      	str	r3, [r5, #0]
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295
 80070be:	b01d      	add	sp, #116	; 0x74
 80070c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070c4:	b002      	add	sp, #8
 80070c6:	4770      	bx	lr
 80070c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070d0:	bf14      	ite	ne
 80070d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070d6:	4623      	moveq	r3, r4
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070e0:	9002      	str	r0, [sp, #8]
 80070e2:	9006      	str	r0, [sp, #24]
 80070e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070ea:	ab21      	add	r3, sp, #132	; 0x84
 80070ec:	a902      	add	r1, sp, #8
 80070ee:	4628      	mov	r0, r5
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	f000 f869 	bl	80071c8 <_svfiprintf_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	bfbc      	itt	lt
 80070fa:	238b      	movlt	r3, #139	; 0x8b
 80070fc:	602b      	strlt	r3, [r5, #0]
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d0dd      	beq.n	80070be <sniprintf+0x16>
 8007102:	9b02      	ldr	r3, [sp, #8]
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e7d9      	b.n	80070be <sniprintf+0x16>
 800710a:	bf00      	nop
 800710c:	20000014 	.word	0x20000014

08007110 <__ssputs_r>:
 8007110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	688e      	ldr	r6, [r1, #8]
 8007116:	429e      	cmp	r6, r3
 8007118:	4682      	mov	sl, r0
 800711a:	460c      	mov	r4, r1
 800711c:	4690      	mov	r8, r2
 800711e:	461f      	mov	r7, r3
 8007120:	d838      	bhi.n	8007194 <__ssputs_r+0x84>
 8007122:	898a      	ldrh	r2, [r1, #12]
 8007124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007128:	d032      	beq.n	8007190 <__ssputs_r+0x80>
 800712a:	6825      	ldr	r5, [r4, #0]
 800712c:	6909      	ldr	r1, [r1, #16]
 800712e:	eba5 0901 	sub.w	r9, r5, r1
 8007132:	6965      	ldr	r5, [r4, #20]
 8007134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800713c:	3301      	adds	r3, #1
 800713e:	444b      	add	r3, r9
 8007140:	106d      	asrs	r5, r5, #1
 8007142:	429d      	cmp	r5, r3
 8007144:	bf38      	it	cc
 8007146:	461d      	movcc	r5, r3
 8007148:	0553      	lsls	r3, r2, #21
 800714a:	d531      	bpl.n	80071b0 <__ssputs_r+0xa0>
 800714c:	4629      	mov	r1, r5
 800714e:	f000 fb39 	bl	80077c4 <_malloc_r>
 8007152:	4606      	mov	r6, r0
 8007154:	b950      	cbnz	r0, 800716c <__ssputs_r+0x5c>
 8007156:	230c      	movs	r3, #12
 8007158:	f8ca 3000 	str.w	r3, [sl]
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	6921      	ldr	r1, [r4, #16]
 800716e:	464a      	mov	r2, r9
 8007170:	f7ff ff84 	bl	800707c <memcpy>
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800717a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	6126      	str	r6, [r4, #16]
 8007182:	6165      	str	r5, [r4, #20]
 8007184:	444e      	add	r6, r9
 8007186:	eba5 0509 	sub.w	r5, r5, r9
 800718a:	6026      	str	r6, [r4, #0]
 800718c:	60a5      	str	r5, [r4, #8]
 800718e:	463e      	mov	r6, r7
 8007190:	42be      	cmp	r6, r7
 8007192:	d900      	bls.n	8007196 <__ssputs_r+0x86>
 8007194:	463e      	mov	r6, r7
 8007196:	4632      	mov	r2, r6
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	4641      	mov	r1, r8
 800719c:	f000 faa8 	bl	80076f0 <memmove>
 80071a0:	68a3      	ldr	r3, [r4, #8]
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	1b9b      	subs	r3, r3, r6
 80071a6:	4432      	add	r2, r6
 80071a8:	60a3      	str	r3, [r4, #8]
 80071aa:	6022      	str	r2, [r4, #0]
 80071ac:	2000      	movs	r0, #0
 80071ae:	e7db      	b.n	8007168 <__ssputs_r+0x58>
 80071b0:	462a      	mov	r2, r5
 80071b2:	f000 fb61 	bl	8007878 <_realloc_r>
 80071b6:	4606      	mov	r6, r0
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d1e1      	bne.n	8007180 <__ssputs_r+0x70>
 80071bc:	6921      	ldr	r1, [r4, #16]
 80071be:	4650      	mov	r0, sl
 80071c0:	f000 fab0 	bl	8007724 <_free_r>
 80071c4:	e7c7      	b.n	8007156 <__ssputs_r+0x46>
	...

080071c8 <_svfiprintf_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4698      	mov	r8, r3
 80071ce:	898b      	ldrh	r3, [r1, #12]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	b09d      	sub	sp, #116	; 0x74
 80071d4:	4607      	mov	r7, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	d50e      	bpl.n	80071fa <_svfiprintf_r+0x32>
 80071dc:	690b      	ldr	r3, [r1, #16]
 80071de:	b963      	cbnz	r3, 80071fa <_svfiprintf_r+0x32>
 80071e0:	2140      	movs	r1, #64	; 0x40
 80071e2:	f000 faef 	bl	80077c4 <_malloc_r>
 80071e6:	6028      	str	r0, [r5, #0]
 80071e8:	6128      	str	r0, [r5, #16]
 80071ea:	b920      	cbnz	r0, 80071f6 <_svfiprintf_r+0x2e>
 80071ec:	230c      	movs	r3, #12
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	e0d1      	b.n	800739a <_svfiprintf_r+0x1d2>
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	616b      	str	r3, [r5, #20]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
 80071fe:	2320      	movs	r3, #32
 8007200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007204:	f8cd 800c 	str.w	r8, [sp, #12]
 8007208:	2330      	movs	r3, #48	; 0x30
 800720a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073b4 <_svfiprintf_r+0x1ec>
 800720e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007212:	f04f 0901 	mov.w	r9, #1
 8007216:	4623      	mov	r3, r4
 8007218:	469a      	mov	sl, r3
 800721a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721e:	b10a      	cbz	r2, 8007224 <_svfiprintf_r+0x5c>
 8007220:	2a25      	cmp	r2, #37	; 0x25
 8007222:	d1f9      	bne.n	8007218 <_svfiprintf_r+0x50>
 8007224:	ebba 0b04 	subs.w	fp, sl, r4
 8007228:	d00b      	beq.n	8007242 <_svfiprintf_r+0x7a>
 800722a:	465b      	mov	r3, fp
 800722c:	4622      	mov	r2, r4
 800722e:	4629      	mov	r1, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ff6d 	bl	8007110 <__ssputs_r>
 8007236:	3001      	adds	r0, #1
 8007238:	f000 80aa 	beq.w	8007390 <_svfiprintf_r+0x1c8>
 800723c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800723e:	445a      	add	r2, fp
 8007240:	9209      	str	r2, [sp, #36]	; 0x24
 8007242:	f89a 3000 	ldrb.w	r3, [sl]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80a2 	beq.w	8007390 <_svfiprintf_r+0x1c8>
 800724c:	2300      	movs	r3, #0
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007256:	f10a 0a01 	add.w	sl, sl, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	9307      	str	r3, [sp, #28]
 800725e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007262:	931a      	str	r3, [sp, #104]	; 0x68
 8007264:	4654      	mov	r4, sl
 8007266:	2205      	movs	r2, #5
 8007268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726c:	4851      	ldr	r0, [pc, #324]	; (80073b4 <_svfiprintf_r+0x1ec>)
 800726e:	f7f9 f81f 	bl	80002b0 <memchr>
 8007272:	9a04      	ldr	r2, [sp, #16]
 8007274:	b9d8      	cbnz	r0, 80072ae <_svfiprintf_r+0xe6>
 8007276:	06d0      	lsls	r0, r2, #27
 8007278:	bf44      	itt	mi
 800727a:	2320      	movmi	r3, #32
 800727c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007280:	0711      	lsls	r1, r2, #28
 8007282:	bf44      	itt	mi
 8007284:	232b      	movmi	r3, #43	; 0x2b
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728a:	f89a 3000 	ldrb.w	r3, [sl]
 800728e:	2b2a      	cmp	r3, #42	; 0x2a
 8007290:	d015      	beq.n	80072be <_svfiprintf_r+0xf6>
 8007292:	9a07      	ldr	r2, [sp, #28]
 8007294:	4654      	mov	r4, sl
 8007296:	2000      	movs	r0, #0
 8007298:	f04f 0c0a 	mov.w	ip, #10
 800729c:	4621      	mov	r1, r4
 800729e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a2:	3b30      	subs	r3, #48	; 0x30
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d94e      	bls.n	8007346 <_svfiprintf_r+0x17e>
 80072a8:	b1b0      	cbz	r0, 80072d8 <_svfiprintf_r+0x110>
 80072aa:	9207      	str	r2, [sp, #28]
 80072ac:	e014      	b.n	80072d8 <_svfiprintf_r+0x110>
 80072ae:	eba0 0308 	sub.w	r3, r0, r8
 80072b2:	fa09 f303 	lsl.w	r3, r9, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	46a2      	mov	sl, r4
 80072bc:	e7d2      	b.n	8007264 <_svfiprintf_r+0x9c>
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	1d19      	adds	r1, r3, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	9103      	str	r1, [sp, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfbb      	ittet	lt
 80072ca:	425b      	neglt	r3, r3
 80072cc:	f042 0202 	orrlt.w	r2, r2, #2
 80072d0:	9307      	strge	r3, [sp, #28]
 80072d2:	9307      	strlt	r3, [sp, #28]
 80072d4:	bfb8      	it	lt
 80072d6:	9204      	strlt	r2, [sp, #16]
 80072d8:	7823      	ldrb	r3, [r4, #0]
 80072da:	2b2e      	cmp	r3, #46	; 0x2e
 80072dc:	d10c      	bne.n	80072f8 <_svfiprintf_r+0x130>
 80072de:	7863      	ldrb	r3, [r4, #1]
 80072e0:	2b2a      	cmp	r3, #42	; 0x2a
 80072e2:	d135      	bne.n	8007350 <_svfiprintf_r+0x188>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9203      	str	r2, [sp, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfb8      	it	lt
 80072f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f4:	3402      	adds	r4, #2
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073c4 <_svfiprintf_r+0x1fc>
 80072fc:	7821      	ldrb	r1, [r4, #0]
 80072fe:	2203      	movs	r2, #3
 8007300:	4650      	mov	r0, sl
 8007302:	f7f8 ffd5 	bl	80002b0 <memchr>
 8007306:	b140      	cbz	r0, 800731a <_svfiprintf_r+0x152>
 8007308:	2340      	movs	r3, #64	; 0x40
 800730a:	eba0 000a 	sub.w	r0, r0, sl
 800730e:	fa03 f000 	lsl.w	r0, r3, r0
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	4303      	orrs	r3, r0
 8007316:	3401      	adds	r4, #1
 8007318:	9304      	str	r3, [sp, #16]
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4826      	ldr	r0, [pc, #152]	; (80073b8 <_svfiprintf_r+0x1f0>)
 8007320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007324:	2206      	movs	r2, #6
 8007326:	f7f8 ffc3 	bl	80002b0 <memchr>
 800732a:	2800      	cmp	r0, #0
 800732c:	d038      	beq.n	80073a0 <_svfiprintf_r+0x1d8>
 800732e:	4b23      	ldr	r3, [pc, #140]	; (80073bc <_svfiprintf_r+0x1f4>)
 8007330:	bb1b      	cbnz	r3, 800737a <_svfiprintf_r+0x1b2>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	3307      	adds	r3, #7
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	3308      	adds	r3, #8
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007340:	4433      	add	r3, r6
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
 8007344:	e767      	b.n	8007216 <_svfiprintf_r+0x4e>
 8007346:	fb0c 3202 	mla	r2, ip, r2, r3
 800734a:	460c      	mov	r4, r1
 800734c:	2001      	movs	r0, #1
 800734e:	e7a5      	b.n	800729c <_svfiprintf_r+0xd4>
 8007350:	2300      	movs	r3, #0
 8007352:	3401      	adds	r4, #1
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	4619      	mov	r1, r3
 8007358:	f04f 0c0a 	mov.w	ip, #10
 800735c:	4620      	mov	r0, r4
 800735e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007362:	3a30      	subs	r2, #48	; 0x30
 8007364:	2a09      	cmp	r2, #9
 8007366:	d903      	bls.n	8007370 <_svfiprintf_r+0x1a8>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0c5      	beq.n	80072f8 <_svfiprintf_r+0x130>
 800736c:	9105      	str	r1, [sp, #20]
 800736e:	e7c3      	b.n	80072f8 <_svfiprintf_r+0x130>
 8007370:	fb0c 2101 	mla	r1, ip, r1, r2
 8007374:	4604      	mov	r4, r0
 8007376:	2301      	movs	r3, #1
 8007378:	e7f0      	b.n	800735c <_svfiprintf_r+0x194>
 800737a:	ab03      	add	r3, sp, #12
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	462a      	mov	r2, r5
 8007380:	4b0f      	ldr	r3, [pc, #60]	; (80073c0 <_svfiprintf_r+0x1f8>)
 8007382:	a904      	add	r1, sp, #16
 8007384:	4638      	mov	r0, r7
 8007386:	f3af 8000 	nop.w
 800738a:	1c42      	adds	r2, r0, #1
 800738c:	4606      	mov	r6, r0
 800738e:	d1d6      	bne.n	800733e <_svfiprintf_r+0x176>
 8007390:	89ab      	ldrh	r3, [r5, #12]
 8007392:	065b      	lsls	r3, r3, #25
 8007394:	f53f af2c 	bmi.w	80071f0 <_svfiprintf_r+0x28>
 8007398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800739a:	b01d      	add	sp, #116	; 0x74
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	ab03      	add	r3, sp, #12
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	462a      	mov	r2, r5
 80073a6:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <_svfiprintf_r+0x1f8>)
 80073a8:	a904      	add	r1, sp, #16
 80073aa:	4638      	mov	r0, r7
 80073ac:	f000 f87a 	bl	80074a4 <_printf_i>
 80073b0:	e7eb      	b.n	800738a <_svfiprintf_r+0x1c2>
 80073b2:	bf00      	nop
 80073b4:	08007aa0 	.word	0x08007aa0
 80073b8:	08007aaa 	.word	0x08007aaa
 80073bc:	00000000 	.word	0x00000000
 80073c0:	08007111 	.word	0x08007111
 80073c4:	08007aa6 	.word	0x08007aa6

080073c8 <_printf_common>:
 80073c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	4616      	mov	r6, r2
 80073ce:	4699      	mov	r9, r3
 80073d0:	688a      	ldr	r2, [r1, #8]
 80073d2:	690b      	ldr	r3, [r1, #16]
 80073d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073d8:	4293      	cmp	r3, r2
 80073da:	bfb8      	it	lt
 80073dc:	4613      	movlt	r3, r2
 80073de:	6033      	str	r3, [r6, #0]
 80073e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073e4:	4607      	mov	r7, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	b10a      	cbz	r2, 80073ee <_printf_common+0x26>
 80073ea:	3301      	adds	r3, #1
 80073ec:	6033      	str	r3, [r6, #0]
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	0699      	lsls	r1, r3, #26
 80073f2:	bf42      	ittt	mi
 80073f4:	6833      	ldrmi	r3, [r6, #0]
 80073f6:	3302      	addmi	r3, #2
 80073f8:	6033      	strmi	r3, [r6, #0]
 80073fa:	6825      	ldr	r5, [r4, #0]
 80073fc:	f015 0506 	ands.w	r5, r5, #6
 8007400:	d106      	bne.n	8007410 <_printf_common+0x48>
 8007402:	f104 0a19 	add.w	sl, r4, #25
 8007406:	68e3      	ldr	r3, [r4, #12]
 8007408:	6832      	ldr	r2, [r6, #0]
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	42ab      	cmp	r3, r5
 800740e:	dc26      	bgt.n	800745e <_printf_common+0x96>
 8007410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007414:	1e13      	subs	r3, r2, #0
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	bf18      	it	ne
 800741a:	2301      	movne	r3, #1
 800741c:	0692      	lsls	r2, r2, #26
 800741e:	d42b      	bmi.n	8007478 <_printf_common+0xb0>
 8007420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007424:	4649      	mov	r1, r9
 8007426:	4638      	mov	r0, r7
 8007428:	47c0      	blx	r8
 800742a:	3001      	adds	r0, #1
 800742c:	d01e      	beq.n	800746c <_printf_common+0xa4>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	68e5      	ldr	r5, [r4, #12]
 8007432:	6832      	ldr	r2, [r6, #0]
 8007434:	f003 0306 	and.w	r3, r3, #6
 8007438:	2b04      	cmp	r3, #4
 800743a:	bf08      	it	eq
 800743c:	1aad      	subeq	r5, r5, r2
 800743e:	68a3      	ldr	r3, [r4, #8]
 8007440:	6922      	ldr	r2, [r4, #16]
 8007442:	bf0c      	ite	eq
 8007444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007448:	2500      	movne	r5, #0
 800744a:	4293      	cmp	r3, r2
 800744c:	bfc4      	itt	gt
 800744e:	1a9b      	subgt	r3, r3, r2
 8007450:	18ed      	addgt	r5, r5, r3
 8007452:	2600      	movs	r6, #0
 8007454:	341a      	adds	r4, #26
 8007456:	42b5      	cmp	r5, r6
 8007458:	d11a      	bne.n	8007490 <_printf_common+0xc8>
 800745a:	2000      	movs	r0, #0
 800745c:	e008      	b.n	8007470 <_printf_common+0xa8>
 800745e:	2301      	movs	r3, #1
 8007460:	4652      	mov	r2, sl
 8007462:	4649      	mov	r1, r9
 8007464:	4638      	mov	r0, r7
 8007466:	47c0      	blx	r8
 8007468:	3001      	adds	r0, #1
 800746a:	d103      	bne.n	8007474 <_printf_common+0xac>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007474:	3501      	adds	r5, #1
 8007476:	e7c6      	b.n	8007406 <_printf_common+0x3e>
 8007478:	18e1      	adds	r1, r4, r3
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	2030      	movs	r0, #48	; 0x30
 800747e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007482:	4422      	add	r2, r4
 8007484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800748c:	3302      	adds	r3, #2
 800748e:	e7c7      	b.n	8007420 <_printf_common+0x58>
 8007490:	2301      	movs	r3, #1
 8007492:	4622      	mov	r2, r4
 8007494:	4649      	mov	r1, r9
 8007496:	4638      	mov	r0, r7
 8007498:	47c0      	blx	r8
 800749a:	3001      	adds	r0, #1
 800749c:	d0e6      	beq.n	800746c <_printf_common+0xa4>
 800749e:	3601      	adds	r6, #1
 80074a0:	e7d9      	b.n	8007456 <_printf_common+0x8e>
	...

080074a4 <_printf_i>:
 80074a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	4691      	mov	r9, r2
 80074ac:	7e27      	ldrb	r7, [r4, #24]
 80074ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074b0:	2f78      	cmp	r7, #120	; 0x78
 80074b2:	4680      	mov	r8, r0
 80074b4:	469a      	mov	sl, r3
 80074b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ba:	d807      	bhi.n	80074cc <_printf_i+0x28>
 80074bc:	2f62      	cmp	r7, #98	; 0x62
 80074be:	d80a      	bhi.n	80074d6 <_printf_i+0x32>
 80074c0:	2f00      	cmp	r7, #0
 80074c2:	f000 80d8 	beq.w	8007676 <_printf_i+0x1d2>
 80074c6:	2f58      	cmp	r7, #88	; 0x58
 80074c8:	f000 80a3 	beq.w	8007612 <_printf_i+0x16e>
 80074cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d4:	e03a      	b.n	800754c <_printf_i+0xa8>
 80074d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074da:	2b15      	cmp	r3, #21
 80074dc:	d8f6      	bhi.n	80074cc <_printf_i+0x28>
 80074de:	a001      	add	r0, pc, #4	; (adr r0, 80074e4 <_printf_i+0x40>)
 80074e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074e4:	0800753d 	.word	0x0800753d
 80074e8:	08007551 	.word	0x08007551
 80074ec:	080074cd 	.word	0x080074cd
 80074f0:	080074cd 	.word	0x080074cd
 80074f4:	080074cd 	.word	0x080074cd
 80074f8:	080074cd 	.word	0x080074cd
 80074fc:	08007551 	.word	0x08007551
 8007500:	080074cd 	.word	0x080074cd
 8007504:	080074cd 	.word	0x080074cd
 8007508:	080074cd 	.word	0x080074cd
 800750c:	080074cd 	.word	0x080074cd
 8007510:	0800765d 	.word	0x0800765d
 8007514:	08007581 	.word	0x08007581
 8007518:	0800763f 	.word	0x0800763f
 800751c:	080074cd 	.word	0x080074cd
 8007520:	080074cd 	.word	0x080074cd
 8007524:	0800767f 	.word	0x0800767f
 8007528:	080074cd 	.word	0x080074cd
 800752c:	08007581 	.word	0x08007581
 8007530:	080074cd 	.word	0x080074cd
 8007534:	080074cd 	.word	0x080074cd
 8007538:	08007647 	.word	0x08007647
 800753c:	680b      	ldr	r3, [r1, #0]
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	600a      	str	r2, [r1, #0]
 8007544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800754c:	2301      	movs	r3, #1
 800754e:	e0a3      	b.n	8007698 <_printf_i+0x1f4>
 8007550:	6825      	ldr	r5, [r4, #0]
 8007552:	6808      	ldr	r0, [r1, #0]
 8007554:	062e      	lsls	r6, r5, #24
 8007556:	f100 0304 	add.w	r3, r0, #4
 800755a:	d50a      	bpl.n	8007572 <_printf_i+0xce>
 800755c:	6805      	ldr	r5, [r0, #0]
 800755e:	600b      	str	r3, [r1, #0]
 8007560:	2d00      	cmp	r5, #0
 8007562:	da03      	bge.n	800756c <_printf_i+0xc8>
 8007564:	232d      	movs	r3, #45	; 0x2d
 8007566:	426d      	negs	r5, r5
 8007568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756c:	485e      	ldr	r0, [pc, #376]	; (80076e8 <_printf_i+0x244>)
 800756e:	230a      	movs	r3, #10
 8007570:	e019      	b.n	80075a6 <_printf_i+0x102>
 8007572:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007576:	6805      	ldr	r5, [r0, #0]
 8007578:	600b      	str	r3, [r1, #0]
 800757a:	bf18      	it	ne
 800757c:	b22d      	sxthne	r5, r5
 800757e:	e7ef      	b.n	8007560 <_printf_i+0xbc>
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	6825      	ldr	r5, [r4, #0]
 8007584:	1d18      	adds	r0, r3, #4
 8007586:	6008      	str	r0, [r1, #0]
 8007588:	0628      	lsls	r0, r5, #24
 800758a:	d501      	bpl.n	8007590 <_printf_i+0xec>
 800758c:	681d      	ldr	r5, [r3, #0]
 800758e:	e002      	b.n	8007596 <_printf_i+0xf2>
 8007590:	0669      	lsls	r1, r5, #25
 8007592:	d5fb      	bpl.n	800758c <_printf_i+0xe8>
 8007594:	881d      	ldrh	r5, [r3, #0]
 8007596:	4854      	ldr	r0, [pc, #336]	; (80076e8 <_printf_i+0x244>)
 8007598:	2f6f      	cmp	r7, #111	; 0x6f
 800759a:	bf0c      	ite	eq
 800759c:	2308      	moveq	r3, #8
 800759e:	230a      	movne	r3, #10
 80075a0:	2100      	movs	r1, #0
 80075a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075a6:	6866      	ldr	r6, [r4, #4]
 80075a8:	60a6      	str	r6, [r4, #8]
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	bfa2      	ittt	ge
 80075ae:	6821      	ldrge	r1, [r4, #0]
 80075b0:	f021 0104 	bicge.w	r1, r1, #4
 80075b4:	6021      	strge	r1, [r4, #0]
 80075b6:	b90d      	cbnz	r5, 80075bc <_printf_i+0x118>
 80075b8:	2e00      	cmp	r6, #0
 80075ba:	d04d      	beq.n	8007658 <_printf_i+0x1b4>
 80075bc:	4616      	mov	r6, r2
 80075be:	fbb5 f1f3 	udiv	r1, r5, r3
 80075c2:	fb03 5711 	mls	r7, r3, r1, r5
 80075c6:	5dc7      	ldrb	r7, [r0, r7]
 80075c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075cc:	462f      	mov	r7, r5
 80075ce:	42bb      	cmp	r3, r7
 80075d0:	460d      	mov	r5, r1
 80075d2:	d9f4      	bls.n	80075be <_printf_i+0x11a>
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d10b      	bne.n	80075f0 <_printf_i+0x14c>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	07df      	lsls	r7, r3, #31
 80075dc:	d508      	bpl.n	80075f0 <_printf_i+0x14c>
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	6861      	ldr	r1, [r4, #4]
 80075e2:	4299      	cmp	r1, r3
 80075e4:	bfde      	ittt	le
 80075e6:	2330      	movle	r3, #48	; 0x30
 80075e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075f0:	1b92      	subs	r2, r2, r6
 80075f2:	6122      	str	r2, [r4, #16]
 80075f4:	f8cd a000 	str.w	sl, [sp]
 80075f8:	464b      	mov	r3, r9
 80075fa:	aa03      	add	r2, sp, #12
 80075fc:	4621      	mov	r1, r4
 80075fe:	4640      	mov	r0, r8
 8007600:	f7ff fee2 	bl	80073c8 <_printf_common>
 8007604:	3001      	adds	r0, #1
 8007606:	d14c      	bne.n	80076a2 <_printf_i+0x1fe>
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	b004      	add	sp, #16
 800760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007612:	4835      	ldr	r0, [pc, #212]	; (80076e8 <_printf_i+0x244>)
 8007614:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	680e      	ldr	r6, [r1, #0]
 800761c:	061f      	lsls	r7, r3, #24
 800761e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007622:	600e      	str	r6, [r1, #0]
 8007624:	d514      	bpl.n	8007650 <_printf_i+0x1ac>
 8007626:	07d9      	lsls	r1, r3, #31
 8007628:	bf44      	itt	mi
 800762a:	f043 0320 	orrmi.w	r3, r3, #32
 800762e:	6023      	strmi	r3, [r4, #0]
 8007630:	b91d      	cbnz	r5, 800763a <_printf_i+0x196>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	f023 0320 	bic.w	r3, r3, #32
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	2310      	movs	r3, #16
 800763c:	e7b0      	b.n	80075a0 <_printf_i+0xfc>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f043 0320 	orr.w	r3, r3, #32
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	2378      	movs	r3, #120	; 0x78
 8007648:	4828      	ldr	r0, [pc, #160]	; (80076ec <_printf_i+0x248>)
 800764a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800764e:	e7e3      	b.n	8007618 <_printf_i+0x174>
 8007650:	065e      	lsls	r6, r3, #25
 8007652:	bf48      	it	mi
 8007654:	b2ad      	uxthmi	r5, r5
 8007656:	e7e6      	b.n	8007626 <_printf_i+0x182>
 8007658:	4616      	mov	r6, r2
 800765a:	e7bb      	b.n	80075d4 <_printf_i+0x130>
 800765c:	680b      	ldr	r3, [r1, #0]
 800765e:	6826      	ldr	r6, [r4, #0]
 8007660:	6960      	ldr	r0, [r4, #20]
 8007662:	1d1d      	adds	r5, r3, #4
 8007664:	600d      	str	r5, [r1, #0]
 8007666:	0635      	lsls	r5, r6, #24
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	d501      	bpl.n	8007670 <_printf_i+0x1cc>
 800766c:	6018      	str	r0, [r3, #0]
 800766e:	e002      	b.n	8007676 <_printf_i+0x1d2>
 8007670:	0671      	lsls	r1, r6, #25
 8007672:	d5fb      	bpl.n	800766c <_printf_i+0x1c8>
 8007674:	8018      	strh	r0, [r3, #0]
 8007676:	2300      	movs	r3, #0
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	4616      	mov	r6, r2
 800767c:	e7ba      	b.n	80075f4 <_printf_i+0x150>
 800767e:	680b      	ldr	r3, [r1, #0]
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	600a      	str	r2, [r1, #0]
 8007684:	681e      	ldr	r6, [r3, #0]
 8007686:	6862      	ldr	r2, [r4, #4]
 8007688:	2100      	movs	r1, #0
 800768a:	4630      	mov	r0, r6
 800768c:	f7f8 fe10 	bl	80002b0 <memchr>
 8007690:	b108      	cbz	r0, 8007696 <_printf_i+0x1f2>
 8007692:	1b80      	subs	r0, r0, r6
 8007694:	6060      	str	r0, [r4, #4]
 8007696:	6863      	ldr	r3, [r4, #4]
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	2300      	movs	r3, #0
 800769c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a0:	e7a8      	b.n	80075f4 <_printf_i+0x150>
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	4632      	mov	r2, r6
 80076a6:	4649      	mov	r1, r9
 80076a8:	4640      	mov	r0, r8
 80076aa:	47d0      	blx	sl
 80076ac:	3001      	adds	r0, #1
 80076ae:	d0ab      	beq.n	8007608 <_printf_i+0x164>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	079b      	lsls	r3, r3, #30
 80076b4:	d413      	bmi.n	80076de <_printf_i+0x23a>
 80076b6:	68e0      	ldr	r0, [r4, #12]
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	4298      	cmp	r0, r3
 80076bc:	bfb8      	it	lt
 80076be:	4618      	movlt	r0, r3
 80076c0:	e7a4      	b.n	800760c <_printf_i+0x168>
 80076c2:	2301      	movs	r3, #1
 80076c4:	4632      	mov	r2, r6
 80076c6:	4649      	mov	r1, r9
 80076c8:	4640      	mov	r0, r8
 80076ca:	47d0      	blx	sl
 80076cc:	3001      	adds	r0, #1
 80076ce:	d09b      	beq.n	8007608 <_printf_i+0x164>
 80076d0:	3501      	adds	r5, #1
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	9903      	ldr	r1, [sp, #12]
 80076d6:	1a5b      	subs	r3, r3, r1
 80076d8:	42ab      	cmp	r3, r5
 80076da:	dcf2      	bgt.n	80076c2 <_printf_i+0x21e>
 80076dc:	e7eb      	b.n	80076b6 <_printf_i+0x212>
 80076de:	2500      	movs	r5, #0
 80076e0:	f104 0619 	add.w	r6, r4, #25
 80076e4:	e7f5      	b.n	80076d2 <_printf_i+0x22e>
 80076e6:	bf00      	nop
 80076e8:	08007ab1 	.word	0x08007ab1
 80076ec:	08007ac2 	.word	0x08007ac2

080076f0 <memmove>:
 80076f0:	4288      	cmp	r0, r1
 80076f2:	b510      	push	{r4, lr}
 80076f4:	eb01 0402 	add.w	r4, r1, r2
 80076f8:	d902      	bls.n	8007700 <memmove+0x10>
 80076fa:	4284      	cmp	r4, r0
 80076fc:	4623      	mov	r3, r4
 80076fe:	d807      	bhi.n	8007710 <memmove+0x20>
 8007700:	1e43      	subs	r3, r0, #1
 8007702:	42a1      	cmp	r1, r4
 8007704:	d008      	beq.n	8007718 <memmove+0x28>
 8007706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800770a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800770e:	e7f8      	b.n	8007702 <memmove+0x12>
 8007710:	4402      	add	r2, r0
 8007712:	4601      	mov	r1, r0
 8007714:	428a      	cmp	r2, r1
 8007716:	d100      	bne.n	800771a <memmove+0x2a>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800771e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007722:	e7f7      	b.n	8007714 <memmove+0x24>

08007724 <_free_r>:
 8007724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007726:	2900      	cmp	r1, #0
 8007728:	d048      	beq.n	80077bc <_free_r+0x98>
 800772a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772e:	9001      	str	r0, [sp, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f1a1 0404 	sub.w	r4, r1, #4
 8007736:	bfb8      	it	lt
 8007738:	18e4      	addlt	r4, r4, r3
 800773a:	f000 f8d3 	bl	80078e4 <__malloc_lock>
 800773e:	4a20      	ldr	r2, [pc, #128]	; (80077c0 <_free_r+0x9c>)
 8007740:	9801      	ldr	r0, [sp, #4]
 8007742:	6813      	ldr	r3, [r2, #0]
 8007744:	4615      	mov	r5, r2
 8007746:	b933      	cbnz	r3, 8007756 <_free_r+0x32>
 8007748:	6063      	str	r3, [r4, #4]
 800774a:	6014      	str	r4, [r2, #0]
 800774c:	b003      	add	sp, #12
 800774e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007752:	f000 b8cd 	b.w	80078f0 <__malloc_unlock>
 8007756:	42a3      	cmp	r3, r4
 8007758:	d90b      	bls.n	8007772 <_free_r+0x4e>
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	1862      	adds	r2, r4, r1
 800775e:	4293      	cmp	r3, r2
 8007760:	bf04      	itt	eq
 8007762:	681a      	ldreq	r2, [r3, #0]
 8007764:	685b      	ldreq	r3, [r3, #4]
 8007766:	6063      	str	r3, [r4, #4]
 8007768:	bf04      	itt	eq
 800776a:	1852      	addeq	r2, r2, r1
 800776c:	6022      	streq	r2, [r4, #0]
 800776e:	602c      	str	r4, [r5, #0]
 8007770:	e7ec      	b.n	800774c <_free_r+0x28>
 8007772:	461a      	mov	r2, r3
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	b10b      	cbz	r3, 800777c <_free_r+0x58>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d9fa      	bls.n	8007772 <_free_r+0x4e>
 800777c:	6811      	ldr	r1, [r2, #0]
 800777e:	1855      	adds	r5, r2, r1
 8007780:	42a5      	cmp	r5, r4
 8007782:	d10b      	bne.n	800779c <_free_r+0x78>
 8007784:	6824      	ldr	r4, [r4, #0]
 8007786:	4421      	add	r1, r4
 8007788:	1854      	adds	r4, r2, r1
 800778a:	42a3      	cmp	r3, r4
 800778c:	6011      	str	r1, [r2, #0]
 800778e:	d1dd      	bne.n	800774c <_free_r+0x28>
 8007790:	681c      	ldr	r4, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	6053      	str	r3, [r2, #4]
 8007796:	4421      	add	r1, r4
 8007798:	6011      	str	r1, [r2, #0]
 800779a:	e7d7      	b.n	800774c <_free_r+0x28>
 800779c:	d902      	bls.n	80077a4 <_free_r+0x80>
 800779e:	230c      	movs	r3, #12
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	e7d3      	b.n	800774c <_free_r+0x28>
 80077a4:	6825      	ldr	r5, [r4, #0]
 80077a6:	1961      	adds	r1, r4, r5
 80077a8:	428b      	cmp	r3, r1
 80077aa:	bf04      	itt	eq
 80077ac:	6819      	ldreq	r1, [r3, #0]
 80077ae:	685b      	ldreq	r3, [r3, #4]
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	bf04      	itt	eq
 80077b4:	1949      	addeq	r1, r1, r5
 80077b6:	6021      	streq	r1, [r4, #0]
 80077b8:	6054      	str	r4, [r2, #4]
 80077ba:	e7c7      	b.n	800774c <_free_r+0x28>
 80077bc:	b003      	add	sp, #12
 80077be:	bd30      	pop	{r4, r5, pc}
 80077c0:	200143cc 	.word	0x200143cc

080077c4 <_malloc_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	1ccd      	adds	r5, r1, #3
 80077c8:	f025 0503 	bic.w	r5, r5, #3
 80077cc:	3508      	adds	r5, #8
 80077ce:	2d0c      	cmp	r5, #12
 80077d0:	bf38      	it	cc
 80077d2:	250c      	movcc	r5, #12
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	4606      	mov	r6, r0
 80077d8:	db01      	blt.n	80077de <_malloc_r+0x1a>
 80077da:	42a9      	cmp	r1, r5
 80077dc:	d903      	bls.n	80077e6 <_malloc_r+0x22>
 80077de:	230c      	movs	r3, #12
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	2000      	movs	r0, #0
 80077e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e6:	f000 f87d 	bl	80078e4 <__malloc_lock>
 80077ea:	4921      	ldr	r1, [pc, #132]	; (8007870 <_malloc_r+0xac>)
 80077ec:	680a      	ldr	r2, [r1, #0]
 80077ee:	4614      	mov	r4, r2
 80077f0:	b99c      	cbnz	r4, 800781a <_malloc_r+0x56>
 80077f2:	4f20      	ldr	r7, [pc, #128]	; (8007874 <_malloc_r+0xb0>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	b923      	cbnz	r3, 8007802 <_malloc_r+0x3e>
 80077f8:	4621      	mov	r1, r4
 80077fa:	4630      	mov	r0, r6
 80077fc:	f000 f862 	bl	80078c4 <_sbrk_r>
 8007800:	6038      	str	r0, [r7, #0]
 8007802:	4629      	mov	r1, r5
 8007804:	4630      	mov	r0, r6
 8007806:	f000 f85d 	bl	80078c4 <_sbrk_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d123      	bne.n	8007856 <_malloc_r+0x92>
 800780e:	230c      	movs	r3, #12
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	4630      	mov	r0, r6
 8007814:	f000 f86c 	bl	80078f0 <__malloc_unlock>
 8007818:	e7e3      	b.n	80077e2 <_malloc_r+0x1e>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	1b5b      	subs	r3, r3, r5
 800781e:	d417      	bmi.n	8007850 <_malloc_r+0x8c>
 8007820:	2b0b      	cmp	r3, #11
 8007822:	d903      	bls.n	800782c <_malloc_r+0x68>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	441c      	add	r4, r3
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	e004      	b.n	8007836 <_malloc_r+0x72>
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	42a2      	cmp	r2, r4
 8007830:	bf0c      	ite	eq
 8007832:	600b      	streq	r3, [r1, #0]
 8007834:	6053      	strne	r3, [r2, #4]
 8007836:	4630      	mov	r0, r6
 8007838:	f000 f85a 	bl	80078f0 <__malloc_unlock>
 800783c:	f104 000b 	add.w	r0, r4, #11
 8007840:	1d23      	adds	r3, r4, #4
 8007842:	f020 0007 	bic.w	r0, r0, #7
 8007846:	1ac2      	subs	r2, r0, r3
 8007848:	d0cc      	beq.n	80077e4 <_malloc_r+0x20>
 800784a:	1a1b      	subs	r3, r3, r0
 800784c:	50a3      	str	r3, [r4, r2]
 800784e:	e7c9      	b.n	80077e4 <_malloc_r+0x20>
 8007850:	4622      	mov	r2, r4
 8007852:	6864      	ldr	r4, [r4, #4]
 8007854:	e7cc      	b.n	80077f0 <_malloc_r+0x2c>
 8007856:	1cc4      	adds	r4, r0, #3
 8007858:	f024 0403 	bic.w	r4, r4, #3
 800785c:	42a0      	cmp	r0, r4
 800785e:	d0e3      	beq.n	8007828 <_malloc_r+0x64>
 8007860:	1a21      	subs	r1, r4, r0
 8007862:	4630      	mov	r0, r6
 8007864:	f000 f82e 	bl	80078c4 <_sbrk_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d1dd      	bne.n	8007828 <_malloc_r+0x64>
 800786c:	e7cf      	b.n	800780e <_malloc_r+0x4a>
 800786e:	bf00      	nop
 8007870:	200143cc 	.word	0x200143cc
 8007874:	200143d0 	.word	0x200143d0

08007878 <_realloc_r>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	4607      	mov	r7, r0
 800787c:	4614      	mov	r4, r2
 800787e:	460e      	mov	r6, r1
 8007880:	b921      	cbnz	r1, 800788c <_realloc_r+0x14>
 8007882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007886:	4611      	mov	r1, r2
 8007888:	f7ff bf9c 	b.w	80077c4 <_malloc_r>
 800788c:	b922      	cbnz	r2, 8007898 <_realloc_r+0x20>
 800788e:	f7ff ff49 	bl	8007724 <_free_r>
 8007892:	4625      	mov	r5, r4
 8007894:	4628      	mov	r0, r5
 8007896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007898:	f000 f830 	bl	80078fc <_malloc_usable_size_r>
 800789c:	42a0      	cmp	r0, r4
 800789e:	d20f      	bcs.n	80078c0 <_realloc_r+0x48>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff ff8e 	bl	80077c4 <_malloc_r>
 80078a8:	4605      	mov	r5, r0
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0f2      	beq.n	8007894 <_realloc_r+0x1c>
 80078ae:	4631      	mov	r1, r6
 80078b0:	4622      	mov	r2, r4
 80078b2:	f7ff fbe3 	bl	800707c <memcpy>
 80078b6:	4631      	mov	r1, r6
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ff33 	bl	8007724 <_free_r>
 80078be:	e7e9      	b.n	8007894 <_realloc_r+0x1c>
 80078c0:	4635      	mov	r5, r6
 80078c2:	e7e7      	b.n	8007894 <_realloc_r+0x1c>

080078c4 <_sbrk_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d06      	ldr	r5, [pc, #24]	; (80078e0 <_sbrk_r+0x1c>)
 80078c8:	2300      	movs	r3, #0
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f000 f81e 	bl	8007910 <_sbrk>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_sbrk_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_sbrk_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20014550 	.word	0x20014550

080078e4 <__malloc_lock>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__malloc_lock+0x8>)
 80078e6:	f000 b811 	b.w	800790c <__retarget_lock_acquire_recursive>
 80078ea:	bf00      	nop
 80078ec:	20014558 	.word	0x20014558

080078f0 <__malloc_unlock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__malloc_unlock+0x8>)
 80078f2:	f000 b80c 	b.w	800790e <__retarget_lock_release_recursive>
 80078f6:	bf00      	nop
 80078f8:	20014558 	.word	0x20014558

080078fc <_malloc_usable_size_r>:
 80078fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007900:	1f18      	subs	r0, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbc      	itt	lt
 8007906:	580b      	ldrlt	r3, [r1, r0]
 8007908:	18c0      	addlt	r0, r0, r3
 800790a:	4770      	bx	lr

0800790c <__retarget_lock_acquire_recursive>:
 800790c:	4770      	bx	lr

0800790e <__retarget_lock_release_recursive>:
 800790e:	4770      	bx	lr

08007910 <_sbrk>:
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <_sbrk+0x14>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	4602      	mov	r2, r0
 8007916:	b909      	cbnz	r1, 800791c <_sbrk+0xc>
 8007918:	4903      	ldr	r1, [pc, #12]	; (8007928 <_sbrk+0x18>)
 800791a:	6019      	str	r1, [r3, #0]
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	4402      	add	r2, r0
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	4770      	bx	lr
 8007924:	200143d4 	.word	0x200143d4
 8007928:	20014560 	.word	0x20014560

0800792c <_init>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr

08007938 <_fini>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	bf00      	nop
 800793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793e:	bc08      	pop	{r3}
 8007940:	469e      	mov	lr, r3
 8007942:	4770      	bx	lr
