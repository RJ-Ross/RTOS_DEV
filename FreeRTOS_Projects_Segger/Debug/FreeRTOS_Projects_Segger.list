
FreeRTOS_Projects_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f58  08003f58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f60  08003f60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017bc  2000000c  08003f74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c8  08003f74  000217c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001679d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca9  00000000  00000000  000367d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00039488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222f8  00000000  00000000  0003b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001481e  00000000  00000000  0005dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc9a6  00000000  00000000  00072456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014edfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  0014ee50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003ea8 	.word	0x08003ea8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08003ea8 	.word	0x08003ea8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20001720 	.word	0x20001720

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fa5a 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f812 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8a8 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f87c 	bl	80006a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  // Enable the CCNT counter
  DWT_CTRL |= (1 << 0);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <main+0x2c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <main+0x2c>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005bc:	f002 f9e4 	bl	8002988 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c0:	f002 ff7a 	bl	80034b8 <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x28>
 80005c6:	bf00      	nop
 80005c8:	e0001000 	.word	0xe0001000

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fc5c 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <SystemClock_Config+0xd4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <SystemClock_Config+0xd4>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemClock_Config+0xd8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000618:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <SystemClock_Config+0xd8>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <SystemClock_Config+0xd8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000644:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4618      	mov	r0, r3
 800065c:	f000 ffcc 	bl	80015f8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000666:	f000 f8cb 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fcb8 	bl	8000ffc <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000692:	f000 f8b5 	bl	8000800 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART2_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f001 fcd6 	bl	8002090 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f889 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20001690 	.word	0x20001690
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <MX_GPIO_Init+0xd0>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a25      	ldr	r2, [pc, #148]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_GPIO_Init+0xd4>)
 8000788:	f000 fc1e 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_GPIO_Init+0xd8>)
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_GPIO_Init+0xdc>)
 80007a2:	f000 fa7d 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0xd4>)
 80007be:	f000 fa6f 	bl	8000ca0 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	10210000 	.word	0x10210000
 80007d8:	40020800 	.word	0x40020800

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f955 	bl	8000a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40001000 	.word	0x40001000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12b      	bne.n	80008d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b6:	230c      	movs	r3, #12
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c6:	2307      	movs	r3, #7
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0x8c>)
 80008d2:	f000 f9e5 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2036      	movs	r0, #54	; 0x36
 8000902:	f000 f9a3 	bl	8000c4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000906:	2036      	movs	r0, #54	; 0x36
 8000908:	f000 f9bc 	bl	8000c84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_InitTick+0xa4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <HAL_InitTick+0xa4>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xa4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000928:	f107 0210 	add.w	r2, r7, #16
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fc7c 	bl	8001230 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000938:	f000 fc52 	bl	80011e0 <HAL_RCC_GetPCLK1Freq>
 800093c:	4603      	mov	r3, r0
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_InitTick+0xa8>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_InitTick+0xac>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_InitTick+0xb0>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_InitTick+0xac>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_InitTick+0xac>)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_InitTick+0xac>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_InitTick+0xac>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_InitTick+0xac>)
 8000972:	f001 f8df 	bl	8001b34 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_InitTick+0xac>)
 800097e:	f001 f933 	bl	8001be8 <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3730      	adds	r7, #48	; 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	431bde83 	.word	0x431bde83
 8000998:	200016d4 	.word	0x200016d4
 800099c:	40001000 	.word	0x40001000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM6_DAC_IRQHandler+0x10>)
 80009d2:	f001 f979 	bl	8001cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200016d4 	.word	0x200016d4

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f003 f9ff 	bl	8003e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fdb1 	bl	800059c <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	200017c8 	.word	0x200017c8

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f8d8 	bl	8000c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ff30 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff febe 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	2000171c 	.word	0x2000171c

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000171c 	.word	0x2000171c

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff4c 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5e:	f7ff ff61 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f7ff ffb1 	bl	8000bd0 <NVIC_EncodePriority>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff80 	bl	8000b7c <__NVIC_SetPriority>
}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff54 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e165      	b.n	8000f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8154 	bne.w	8000f82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d005      	beq.n	8000cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d130      	bne.n	8000d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80ae 	beq.w	8000f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <HAL_GPIO_Init+0x300>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4d      	ldr	r2, [pc, #308]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4b      	ldr	r2, [pc, #300]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x206>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x202>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e00c      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e00a      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_Init+0x21c>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ecc:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efe:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f28:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f ae96 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0cc      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d90c      	bls.n	8001038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0b8      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001050:	4b59      	ldr	r3, [pc, #356]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a58      	ldr	r2, [pc, #352]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800105a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001068:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001074:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	494d      	ldr	r1, [pc, #308]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	4313      	orrs	r3, r2
 8001084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d044      	beq.n	800111c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d107      	bne.n	80010aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d119      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e07f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d003      	beq.n	80010ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e06f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e067      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010da:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f023 0203 	bic.w	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4934      	ldr	r1, [pc, #208]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010ec:	f7ff fcea 	bl	8000ac4 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	e00a      	b.n	800110a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f4:	f7ff fce6 	bl	8000ac4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e04f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 020c 	and.w	r2, r3, #12
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	429a      	cmp	r2, r3
 800111a:	d1eb      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d20c      	bcs.n	8001144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e032      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4916      	ldr	r1, [pc, #88]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	490e      	ldr	r1, [pc, #56]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001182:	f000 f887 	bl	8001294 <HAL_RCC_GetSysClockFreq>
 8001186:	4602      	mov	r2, r0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	490a      	ldr	r1, [pc, #40]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	5ccb      	ldrb	r3, [r1, r3]
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_RCC_ClockConfig+0x1c8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fba2 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00
 80011b8:	40023800 	.word	0x40023800
 80011bc:	08003f2c 	.word	0x08003f2c
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_RCC_GetHCLKFreq+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000000 	.word	0x20000000

080011e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_RCC_GetHCLKFreq>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	0a9b      	lsrs	r3, r3, #10
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	4903      	ldr	r1, [pc, #12]	; (8001204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011f6:	5ccb      	ldrb	r3, [r1, r3]
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	08003f3c 	.word	0x08003f3c

08001208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800120c:	f7ff ffdc 	bl	80011c8 <HAL_RCC_GetHCLKFreq>
 8001210:	4602      	mov	r2, r0
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0b5b      	lsrs	r3, r3, #13
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	4903      	ldr	r1, [pc, #12]	; (800122c <HAL_RCC_GetPCLK2Freq+0x24>)
 800121e:	5ccb      	ldrb	r3, [r1, r3]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	08003f3c 	.word	0x08003f3c

08001230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	220f      	movs	r2, #15
 800123e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_GetClockConfig+0x5c>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_RCC_GetClockConfig+0x5c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_RCC_GetClockConfig+0x5c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_GetClockConfig+0x5c>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_RCC_GetClockConfig+0x60>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 020f 	and.w	r2, r3, #15
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001298:	b088      	sub	sp, #32
 800129a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b0:	4bce      	ldr	r3, [pc, #824]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	f200 818d 	bhi.w	80015d8 <HAL_RCC_GetSysClockFreq+0x344>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012f9 	.word	0x080012f9
 80012c8:	080015d9 	.word	0x080015d9
 80012cc:	080015d9 	.word	0x080015d9
 80012d0:	080015d9 	.word	0x080015d9
 80012d4:	080012ff 	.word	0x080012ff
 80012d8:	080015d9 	.word	0x080015d9
 80012dc:	080015d9 	.word	0x080015d9
 80012e0:	080015d9 	.word	0x080015d9
 80012e4:	08001305 	.word	0x08001305
 80012e8:	080015d9 	.word	0x080015d9
 80012ec:	080015d9 	.word	0x080015d9
 80012f0:	080015d9 	.word	0x080015d9
 80012f4:	08001479 	.word	0x08001479
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f8:	4bbd      	ldr	r3, [pc, #756]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012fa:	61bb      	str	r3, [r7, #24]
       break;
 80012fc:	e16f      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012fe:	4bbd      	ldr	r3, [pc, #756]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x360>)
 8001300:	61bb      	str	r3, [r7, #24]
      break;
 8001302:	e16c      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001304:	4bb9      	ldr	r3, [pc, #740]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800130e:	4bb7      	ldr	r3, [pc, #732]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d053      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800131a:	4bb4      	ldr	r3, [pc, #720]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	099b      	lsrs	r3, r3, #6
 8001320:	461a      	mov	r2, r3
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800132a:	f04f 0100 	mov.w	r1, #0
 800132e:	ea02 0400 	and.w	r4, r2, r0
 8001332:	603c      	str	r4, [r7, #0]
 8001334:	400b      	ands	r3, r1
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	e9d7 4500 	ldrd	r4, r5, [r7]
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	014b      	lsls	r3, r1, #5
 800134a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800134e:	0142      	lsls	r2, r0, #5
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	4623      	mov	r3, r4
 8001356:	1ac0      	subs	r0, r0, r3
 8001358:	462b      	mov	r3, r5
 800135a:	eb61 0103 	sbc.w	r1, r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	018b      	lsls	r3, r1, #6
 8001368:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800136c:	0182      	lsls	r2, r0, #6
 800136e:	1a12      	subs	r2, r2, r0
 8001370:	eb63 0301 	sbc.w	r3, r3, r1
 8001374:	f04f 0000 	mov.w	r0, #0
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	00d9      	lsls	r1, r3, #3
 800137e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001382:	00d0      	lsls	r0, r2, #3
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4621      	mov	r1, r4
 800138a:	1852      	adds	r2, r2, r1
 800138c:	4629      	mov	r1, r5
 800138e:	eb43 0101 	adc.w	r1, r3, r1
 8001392:	460b      	mov	r3, r1
 8001394:	f04f 0000 	mov.w	r0, #0
 8001398:	f04f 0100 	mov.w	r1, #0
 800139c:	0259      	lsls	r1, r3, #9
 800139e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80013a2:	0250      	lsls	r0, r2, #9
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	461a      	mov	r2, r3
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f7fe ff76 	bl	80002a4 <__aeabi_uldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4613      	mov	r3, r2
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	e04c      	b.n	800145c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c2:	4b8a      	ldr	r3, [pc, #552]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	461a      	mov	r2, r3
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013d2:	f04f 0100 	mov.w	r1, #0
 80013d6:	ea02 0a00 	and.w	sl, r2, r0
 80013da:	ea03 0b01 	and.w	fp, r3, r1
 80013de:	4650      	mov	r0, sl
 80013e0:	4659      	mov	r1, fp
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	014b      	lsls	r3, r1, #5
 80013ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013f0:	0142      	lsls	r2, r0, #5
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	ebb0 000a 	subs.w	r0, r0, sl
 80013fa:	eb61 010b 	sbc.w	r1, r1, fp
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	018b      	lsls	r3, r1, #6
 8001408:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800140c:	0182      	lsls	r2, r0, #6
 800140e:	1a12      	subs	r2, r2, r0
 8001410:	eb63 0301 	sbc.w	r3, r3, r1
 8001414:	f04f 0000 	mov.w	r0, #0
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	00d9      	lsls	r1, r3, #3
 800141e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001422:	00d0      	lsls	r0, r2, #3
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	eb12 020a 	adds.w	r2, r2, sl
 800142c:	eb43 030b 	adc.w	r3, r3, fp
 8001430:	f04f 0000 	mov.w	r0, #0
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	0299      	lsls	r1, r3, #10
 800143a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800143e:	0290      	lsls	r0, r2, #10
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	461a      	mov	r2, r3
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	f7fe ff28 	bl	80002a4 <__aeabi_uldivmod>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4613      	mov	r3, r2
 800145a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	3301      	adds	r3, #1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	61bb      	str	r3, [r7, #24]
      break;
 8001476:	e0b2      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001480:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001482:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d04d      	beq.n	800152a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	099b      	lsrs	r3, r3, #6
 8001494:	461a      	mov	r2, r3
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	ea02 0800 	and.w	r8, r2, r0
 80014a6:	ea03 0901 	and.w	r9, r3, r1
 80014aa:	4640      	mov	r0, r8
 80014ac:	4649      	mov	r1, r9
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	014b      	lsls	r3, r1, #5
 80014b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014bc:	0142      	lsls	r2, r0, #5
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	ebb0 0008 	subs.w	r0, r0, r8
 80014c6:	eb61 0109 	sbc.w	r1, r1, r9
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	018b      	lsls	r3, r1, #6
 80014d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014d8:	0182      	lsls	r2, r0, #6
 80014da:	1a12      	subs	r2, r2, r0
 80014dc:	eb63 0301 	sbc.w	r3, r3, r1
 80014e0:	f04f 0000 	mov.w	r0, #0
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	00d9      	lsls	r1, r3, #3
 80014ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014ee:	00d0      	lsls	r0, r2, #3
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	eb12 0208 	adds.w	r2, r2, r8
 80014f8:	eb43 0309 	adc.w	r3, r3, r9
 80014fc:	f04f 0000 	mov.w	r0, #0
 8001500:	f04f 0100 	mov.w	r1, #0
 8001504:	0259      	lsls	r1, r3, #9
 8001506:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800150a:	0250      	lsls	r0, r2, #9
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	461a      	mov	r2, r3
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f7fe fec2 	bl	80002a4 <__aeabi_uldivmod>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4613      	mov	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	e04a      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	099b      	lsrs	r3, r3, #6
 8001530:	461a      	mov	r2, r3
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800153a:	f04f 0100 	mov.w	r1, #0
 800153e:	ea02 0400 	and.w	r4, r2, r0
 8001542:	ea03 0501 	and.w	r5, r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	014b      	lsls	r3, r1, #5
 8001554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001558:	0142      	lsls	r2, r0, #5
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	1b00      	subs	r0, r0, r4
 8001560:	eb61 0105 	sbc.w	r1, r1, r5
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	018b      	lsls	r3, r1, #6
 800156e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001572:	0182      	lsls	r2, r0, #6
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	eb63 0301 	sbc.w	r3, r3, r1
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	00d9      	lsls	r1, r3, #3
 8001584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001588:	00d0      	lsls	r0, r2, #3
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	1912      	adds	r2, r2, r4
 8001590:	eb45 0303 	adc.w	r3, r5, r3
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	f04f 0100 	mov.w	r1, #0
 800159c:	0299      	lsls	r1, r3, #10
 800159e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80015a2:	0290      	lsls	r0, r2, #10
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	f7fe fe76 	bl	80002a4 <__aeabi_uldivmod>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4613      	mov	r3, r2
 80015be:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_RCC_GetSysClockFreq+0x358>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	0f1b      	lsrs	r3, r3, #28
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	61bb      	str	r3, [r7, #24]
      break;
 80015d6:	e002      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015da:	61bb      	str	r3, [r7, #24]
      break;
 80015dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015de:	69bb      	ldr	r3, [r7, #24]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	00f42400 	.word	0x00f42400
 80015f4:	007a1200 	.word	0x007a1200

080015f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e28d      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8083 	beq.w	800171e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001618:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d019      	beq.n	8001658 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001624:	4b91      	ldr	r3, [pc, #580]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800162c:	2b08      	cmp	r3, #8
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001630:	4b8e      	ldr	r3, [pc, #568]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x124>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e25a      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x90>
 800167a:	4b7c      	ldr	r3, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7b      	ldr	r2, [pc, #492]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0xb4>
 8001692:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a75      	ldr	r2, [pc, #468]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b73      	ldr	r3, [pc, #460]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a72      	ldr	r2, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 80016ac:	4b6f      	ldr	r3, [pc, #444]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6e      	ldr	r2, [pc, #440]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b6c      	ldr	r3, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6b      	ldr	r2, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff f9fa 	bl	8000ac4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f9f6 	bl	8000ac4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e21f      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xdc>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff f9e6 	bl	8000ac4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f9e2 	bl	8000ac4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e20b      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x104>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06f      	beq.n	800180a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d017      	beq.n	8001766 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x186>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e1d3      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	e03a      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_OscConfig+0x278>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff f98f 	bl	8000ac4 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff f98b 	bl	8000ac4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1b4      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4925      	ldr	r1, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x278>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f96e 	bl	8000ac4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff f96a 	bl	8000ac4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e193      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d036      	beq.n	8001884 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f94e 	bl	8000ac4 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff f94a 	bl	8000ac4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e173      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x234>
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_OscConfig+0x27c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f937 	bl	8000ac4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	e00e      	b.n	8001878 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f933 	bl	8000ac4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d907      	bls.n	8001878 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e15c      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 800186c:	40023800 	.word	0x40023800
 8001870:	42470000 	.word	0x42470000
 8001874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1ea      	bne.n	800185a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8097 	beq.w	80019c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a7e      	ldr	r2, [pc, #504]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff f8f3 	bl	8000ac4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff f8ef 	bl	8000ac4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e118      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x31e>
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x358>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x340>
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a60      	ldr	r2, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a5d      	ldr	r2, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x358>
 8001938:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a59      	ldr	r2, [pc, #356]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f8b4 	bl	8000ac4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff f8b0 	bl	8000ac4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0d7      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ee      	beq.n	8001960 <HAL_RCC_OscConfig+0x368>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f89e 	bl	8000ac4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f89a 	bl	8000ac4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0c1      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ee      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	4a3a      	ldr	r2, [pc, #232]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80ad 	beq.w	8001b24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d060      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d145      	bne.n	8001a6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_RCC_OscConfig+0x4b4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f86e 	bl	8000ac4 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f86a 	bl	8000ac4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e093      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	071b      	lsls	r3, r3, #28
 8001a36:	491b      	ldr	r1, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x4b4>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f83f 	bl	8000ac4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f83b 	bl	8000ac4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e064      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x452>
 8001a68:	e05c      	b.n	8001b24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x4b4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f828 	bl	8000ac4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f824 	bl	8000ac4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04d      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x480>
 8001a96:	e045      	b.n	8001b24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e040      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_RCC_OscConfig+0x538>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d030      	beq.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d129      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d122      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d119      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10f      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e041      	b.n	8001bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f839 	bl	8001bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 f9d8 	bl	8001f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d001      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e04e      	b.n	8001c9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_TIM_Base_Start_IT+0xc4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2a:	d01d      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d111      	bne.n	8001c8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d010      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	e007      	b.n	8001c9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40010400 	.word	0x40010400
 8001cc0:	40014000 	.word	0x40014000
 8001cc4:	40001800 	.word	0x40001800

08001cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d122      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0202 	mvn.w	r2, #2
 8001cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8ee 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8e0 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8f1 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0204 	mvn.w	r2, #4
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8c4 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8b6 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8c7 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0208 	mvn.w	r2, #8
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f89a 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f88c 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f89d 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0210 	mvn.w	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f870 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f862 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f873 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fcc8 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f902 	bl	800207c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f838 	bl	8001f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0220 	mvn.w	r2, #32
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8cc 	bl	8002068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <TIM_Base_SetConfig+0x114>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f46:	d00f      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <TIM_Base_SetConfig+0x118>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <TIM_Base_SetConfig+0x11c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <TIM_Base_SetConfig+0x120>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3a      	ldr	r2, [pc, #232]	; (800204c <TIM_Base_SetConfig+0x124>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <TIM_Base_SetConfig+0x114>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d027      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <TIM_Base_SetConfig+0x118>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d023      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <TIM_Base_SetConfig+0x11c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01f      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <TIM_Base_SetConfig+0x120>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a29      	ldr	r2, [pc, #164]	; (800204c <TIM_Base_SetConfig+0x124>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d017      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <TIM_Base_SetConfig+0x128>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <TIM_Base_SetConfig+0x12c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <TIM_Base_SetConfig+0x130>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <TIM_Base_SetConfig+0x134>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a24      	ldr	r2, [pc, #144]	; (8002060 <TIM_Base_SetConfig+0x138>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	; (8002064 <TIM_Base_SetConfig+0x13c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <TIM_Base_SetConfig+0x114>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_Base_SetConfig+0xf8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <TIM_Base_SetConfig+0x124>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d103      	bne.n	8002028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	615a      	str	r2, [r3, #20]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800
 8002048:	40000c00 	.word	0x40000c00
 800204c:	40010400 	.word	0x40010400
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800
 800205c:	40001800 	.word	0x40001800
 8002060:	40001c00 	.word	0x40001c00
 8002064:	40002000 	.word	0x40002000

08002068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e03f      	b.n	8002122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fbd0 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	; 0x24
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f829 	bl	800212c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002130:	b09f      	sub	sp, #124	; 0x7c
 8002132:	af00      	add	r7, sp, #0
 8002134:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	ea40 0301 	orr.w	r3, r0, r1
 800214c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	431a      	orrs	r2, r3
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	431a      	orrs	r2, r3
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4313      	orrs	r3, r2
 8002164:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002170:	f021 010c 	bic.w	r1, r1, #12
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800217a:	430b      	orrs	r3, r1
 800217c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800217e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218a:	6999      	ldr	r1, [r3, #24]
 800218c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	ea40 0301 	orr.w	r3, r0, r1
 8002194:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4bc5      	ldr	r3, [pc, #788]	; (80024b0 <UART_SetConfig+0x384>)
 800219c:	429a      	cmp	r2, r3
 800219e:	d004      	beq.n	80021aa <UART_SetConfig+0x7e>
 80021a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4bc3      	ldr	r3, [pc, #780]	; (80024b4 <UART_SetConfig+0x388>)
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d103      	bne.n	80021b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021aa:	f7ff f82d 	bl	8001208 <HAL_RCC_GetPCLK2Freq>
 80021ae:	6778      	str	r0, [r7, #116]	; 0x74
 80021b0:	e002      	b.n	80021b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021b2:	f7ff f815 	bl	80011e0 <HAL_RCC_GetPCLK1Freq>
 80021b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	f040 80b6 	bne.w	8002330 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c6:	461c      	mov	r4, r3
 80021c8:	f04f 0500 	mov.w	r5, #0
 80021cc:	4622      	mov	r2, r4
 80021ce:	462b      	mov	r3, r5
 80021d0:	1891      	adds	r1, r2, r2
 80021d2:	6439      	str	r1, [r7, #64]	; 0x40
 80021d4:	415b      	adcs	r3, r3
 80021d6:	647b      	str	r3, [r7, #68]	; 0x44
 80021d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021dc:	1912      	adds	r2, r2, r4
 80021de:	eb45 0303 	adc.w	r3, r5, r3
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	00d9      	lsls	r1, r3, #3
 80021ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f0:	00d0      	lsls	r0, r2, #3
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	1911      	adds	r1, r2, r4
 80021f8:	6639      	str	r1, [r7, #96]	; 0x60
 80021fa:	416b      	adcs	r3, r5
 80021fc:	667b      	str	r3, [r7, #100]	; 0x64
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	461a      	mov	r2, r3
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	1891      	adds	r1, r2, r2
 800220a:	63b9      	str	r1, [r7, #56]	; 0x38
 800220c:	415b      	adcs	r3, r3
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002214:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002218:	f7fe f844 	bl	80002a4 <__aeabi_uldivmod>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4ba5      	ldr	r3, [pc, #660]	; (80024b8 <UART_SetConfig+0x38c>)
 8002222:	fba3 2302 	umull	r2, r3, r3, r2
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	011e      	lsls	r6, r3, #4
 800222a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222c:	461c      	mov	r4, r3
 800222e:	f04f 0500 	mov.w	r5, #0
 8002232:	4622      	mov	r2, r4
 8002234:	462b      	mov	r3, r5
 8002236:	1891      	adds	r1, r2, r2
 8002238:	6339      	str	r1, [r7, #48]	; 0x30
 800223a:	415b      	adcs	r3, r3
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
 800223e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002242:	1912      	adds	r2, r2, r4
 8002244:	eb45 0303 	adc.w	r3, r5, r3
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	00d9      	lsls	r1, r3, #3
 8002252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002256:	00d0      	lsls	r0, r2, #3
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	1911      	adds	r1, r2, r4
 800225e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002260:	416b      	adcs	r3, r5
 8002262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	461a      	mov	r2, r3
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	1891      	adds	r1, r2, r2
 8002270:	62b9      	str	r1, [r7, #40]	; 0x28
 8002272:	415b      	adcs	r3, r3
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800227a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800227e:	f7fe f811 	bl	80002a4 <__aeabi_uldivmod>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <UART_SetConfig+0x38c>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	2164      	movs	r1, #100	; 0x64
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3332      	adds	r3, #50	; 0x32
 800229a:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <UART_SetConfig+0x38c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a8:	441e      	add	r6, r3
 80022aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ac:	4618      	mov	r0, r3
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	1894      	adds	r4, r2, r2
 80022b8:	623c      	str	r4, [r7, #32]
 80022ba:	415b      	adcs	r3, r3
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022c2:	1812      	adds	r2, r2, r0
 80022c4:	eb41 0303 	adc.w	r3, r1, r3
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	f04f 0500 	mov.w	r5, #0
 80022d0:	00dd      	lsls	r5, r3, #3
 80022d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022d6:	00d4      	lsls	r4, r2, #3
 80022d8:	4622      	mov	r2, r4
 80022da:	462b      	mov	r3, r5
 80022dc:	1814      	adds	r4, r2, r0
 80022de:	653c      	str	r4, [r7, #80]	; 0x50
 80022e0:	414b      	adcs	r3, r1
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
 80022e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	1891      	adds	r1, r2, r2
 80022f0:	61b9      	str	r1, [r7, #24]
 80022f2:	415b      	adcs	r3, r3
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022fe:	f7fd ffd1 	bl	80002a4 <__aeabi_uldivmod>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <UART_SetConfig+0x38c>)
 8002308:	fba3 1302 	umull	r1, r3, r3, r2
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	2164      	movs	r1, #100	; 0x64
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	3332      	adds	r3, #50	; 0x32
 800231a:	4a67      	ldr	r2, [pc, #412]	; (80024b8 <UART_SetConfig+0x38c>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	f003 0207 	and.w	r2, r3, #7
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4432      	add	r2, r6
 800232c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800232e:	e0b9      	b.n	80024a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002332:	461c      	mov	r4, r3
 8002334:	f04f 0500 	mov.w	r5, #0
 8002338:	4622      	mov	r2, r4
 800233a:	462b      	mov	r3, r5
 800233c:	1891      	adds	r1, r2, r2
 800233e:	6139      	str	r1, [r7, #16]
 8002340:	415b      	adcs	r3, r3
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002348:	1912      	adds	r2, r2, r4
 800234a:	eb45 0303 	adc.w	r3, r5, r3
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	00d9      	lsls	r1, r3, #3
 8002358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800235c:	00d0      	lsls	r0, r2, #3
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	eb12 0804 	adds.w	r8, r2, r4
 8002366:	eb43 0905 	adc.w	r9, r3, r5
 800236a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	008b      	lsls	r3, r1, #2
 800237e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002382:	0082      	lsls	r2, r0, #2
 8002384:	4640      	mov	r0, r8
 8002386:	4649      	mov	r1, r9
 8002388:	f7fd ff8c 	bl	80002a4 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <UART_SetConfig+0x38c>)
 8002392:	fba3 2302 	umull	r2, r3, r3, r2
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	011e      	lsls	r6, r3, #4
 800239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239c:	4618      	mov	r0, r3
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	1894      	adds	r4, r2, r2
 80023a8:	60bc      	str	r4, [r7, #8]
 80023aa:	415b      	adcs	r3, r3
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b2:	1812      	adds	r2, r2, r0
 80023b4:	eb41 0303 	adc.w	r3, r1, r3
 80023b8:	f04f 0400 	mov.w	r4, #0
 80023bc:	f04f 0500 	mov.w	r5, #0
 80023c0:	00dd      	lsls	r5, r3, #3
 80023c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023c6:	00d4      	lsls	r4, r2, #3
 80023c8:	4622      	mov	r2, r4
 80023ca:	462b      	mov	r3, r5
 80023cc:	1814      	adds	r4, r2, r0
 80023ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80023d0:	414b      	adcs	r3, r1
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	008b      	lsls	r3, r1, #2
 80023e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023ec:	0082      	lsls	r2, r0, #2
 80023ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023f2:	f7fd ff57 	bl	80002a4 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <UART_SetConfig+0x38c>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2164      	movs	r1, #100	; 0x64
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <UART_SetConfig+0x38c>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241a:	441e      	add	r6, r3
 800241c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241e:	4618      	mov	r0, r3
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	1894      	adds	r4, r2, r2
 800242a:	603c      	str	r4, [r7, #0]
 800242c:	415b      	adcs	r3, r3
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002434:	1812      	adds	r2, r2, r0
 8002436:	eb41 0303 	adc.w	r3, r1, r3
 800243a:	f04f 0400 	mov.w	r4, #0
 800243e:	f04f 0500 	mov.w	r5, #0
 8002442:	00dd      	lsls	r5, r3, #3
 8002444:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002448:	00d4      	lsls	r4, r2, #3
 800244a:	4622      	mov	r2, r4
 800244c:	462b      	mov	r3, r5
 800244e:	eb12 0a00 	adds.w	sl, r2, r0
 8002452:	eb43 0b01 	adc.w	fp, r3, r1
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	008b      	lsls	r3, r1, #2
 800246a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800246e:	0082      	lsls	r2, r0, #2
 8002470:	4650      	mov	r0, sl
 8002472:	4659      	mov	r1, fp
 8002474:	f7fd ff16 	bl	80002a4 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <UART_SetConfig+0x38c>)
 800247e:	fba3 1302 	umull	r1, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2164      	movs	r1, #100	; 0x64
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	3332      	adds	r3, #50	; 0x32
 8002490:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <UART_SetConfig+0x38c>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4432      	add	r2, r6
 80024a2:	609a      	str	r2, [r3, #8]
}
 80024a4:	bf00      	nop
 80024a6:	377c      	adds	r7, #124	; 0x7c
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ae:	bf00      	nop
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40011400 	.word	0x40011400
 80024b8:	51eb851f 	.word	0x51eb851f

080024bc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6892      	ldr	r2, [r2, #8]
 800251a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6852      	ldr	r2, [r2, #4]
 8002524:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d103      	bne.n	8002538 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800255e:	f000 f9c5 	bl	80028ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <xTaskGetTickCountFromISR+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800256c:	683b      	ldr	r3, [r7, #0]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000098 	.word	0x20000098

0800257c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <xTaskIncrementTick+0x14c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8092 	bne.w	80026b4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002590:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <xTaskIncrementTick+0x150>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002598:	4a4c      	ldr	r2, [pc, #304]	; (80026cc <xTaskIncrementTick+0x150>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d120      	bne.n	80025e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80025a4:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <xTaskIncrementTick+0x154>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <xTaskIncrementTick+0x46>
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <xTaskIncrementTick+0x154>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <xTaskIncrementTick+0x158>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <xTaskIncrementTick+0x154>)
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <xTaskIncrementTick+0x158>)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <xTaskIncrementTick+0x15c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	4a3e      	ldr	r2, [pc, #248]	; (80026d8 <xTaskIncrementTick+0x15c>)
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	f000 f8f1 	bl	80027c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <xTaskIncrementTick+0x160>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d34c      	bcc.n	800268a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025f0:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <xTaskIncrementTick+0x154>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <xTaskIncrementTick+0x160>)
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	601a      	str	r2, [r3, #0]
                    break;
 8002602:	e042      	b.n	800268a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <xTaskIncrementTick+0x154>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	d203      	bcs.n	8002624 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800261c:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <xTaskIncrementTick+0x160>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002622:	e032      	b.n	800268a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3304      	adds	r3, #4
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff6b 	bl	8002504 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3318      	adds	r3, #24
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff62 	bl	8002504 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f001 fad8 	bl	8003bf8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2201      	movs	r2, #1
 800264e:	409a      	lsls	r2, r3
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <xTaskIncrementTick+0x164>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <xTaskIncrementTick+0x164>)
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <xTaskIncrementTick+0x168>)
 8002668:	441a      	add	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3304      	adds	r3, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f7ff ff23 	bl	80024bc <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <xTaskIncrementTick+0x16c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	429a      	cmp	r2, r3
 8002682:	d3b5      	bcc.n	80025f0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002684:	2301      	movs	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002688:	e7b2      	b.n	80025f0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <xTaskIncrementTick+0x16c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002690:	4914      	ldr	r1, [pc, #80]	; (80026e4 <xTaskIncrementTick+0x168>)
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d901      	bls.n	80026a6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <xTaskIncrementTick+0x170>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e004      	b.n	80026be <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <xTaskIncrementTick+0x174>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <xTaskIncrementTick+0x174>)
 80026bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80026be:	697b      	ldr	r3, [r7, #20]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200000b4 	.word	0x200000b4
 80026cc:	20000098 	.word	0x20000098
 80026d0:	20000090 	.word	0x20000090
 80026d4:	20000094 	.word	0x20000094
 80026d8:	200000a8 	.word	0x200000a8
 80026dc:	200000ac 	.word	0x200000ac
 80026e0:	2000009c 	.word	0x2000009c
 80026e4:	2000002c 	.word	0x2000002c
 80026e8:	20000028 	.word	0x20000028
 80026ec:	200000a4 	.word	0x200000a4
 80026f0:	200000a0 	.word	0x200000a0

080026f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <vTaskSwitchContext+0xbc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <vTaskSwitchContext+0xc0>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002708:	e04d      	b.n	80027a6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <vTaskSwitchContext+0xc0>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <vTaskSwitchContext+0xc4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	f1c3 031f 	rsb	r3, r3, #31
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	4925      	ldr	r1, [pc, #148]	; (80027bc <vTaskSwitchContext+0xc8>)
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <vTaskSwitchContext+0x5c>
        __asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	607b      	str	r3, [r7, #4]
    }
 800274c:	bf00      	nop
 800274e:	e7fe      	b.n	800274e <vTaskSwitchContext+0x5a>
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <vTaskSwitchContext+0xc8>)
 800275c:	4413      	add	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	3308      	adds	r3, #8
 8002772:	429a      	cmp	r2, r3
 8002774:	d104      	bne.n	8002780 <vTaskSwitchContext+0x8c>
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <vTaskSwitchContext+0xcc>)
 8002788:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <vTaskSwitchContext+0xcc>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <vTaskSwitchContext+0xd0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d102      	bne.n	800279c <vTaskSwitchContext+0xa8>
 8002796:	f001 f9d1 	bl	8003b3c <SEGGER_SYSVIEW_OnIdle>
}
 800279a:	e004      	b.n	80027a6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <vTaskSwitchContext+0xcc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f9e7 	bl	8003b74 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200000b4 	.word	0x200000b4
 80027b4:	200000a4 	.word	0x200000a4
 80027b8:	2000009c 	.word	0x2000009c
 80027bc:	2000002c 	.word	0x2000002c
 80027c0:	20000028 	.word	0x20000028
 80027c4:	200000b0 	.word	0x200000b0

080027c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <prvResetNextTaskUnblockTime+0x30>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <prvResetNextTaskUnblockTime+0x34>)
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80027de:	e005      	b.n	80027ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <prvResetNextTaskUnblockTime+0x30>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <prvResetNextTaskUnblockTime+0x34>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000090 	.word	0x20000090
 80027fc:	200000ac 	.word	0x200000ac

08002800 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <pxCurrentTCBConst2>)
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	6808      	ldr	r0, [r1, #0]
 8002806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280a:	f380 8809 	msr	PSP, r0
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f380 8811 	msr	BASEPRI, r0
 800281a:	4770      	bx	lr
 800281c:	f3af 8000 	nop.w

08002820 <pxCurrentTCBConst2>:
 8002820:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
	...

08002830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002830:	f3ef 8009 	mrs	r0, PSP
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <pxCurrentTCBConst>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	f01e 0f10 	tst.w	lr, #16
 8002840:	bf08      	it	eq
 8002842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	6010      	str	r0, [r2, #0]
 800284c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002854:	f380 8811 	msr	BASEPRI, r0
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f7ff ff48 	bl	80026f4 <vTaskSwitchContext>
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f380 8811 	msr	BASEPRI, r0
 800286c:	bc09      	pop	{r0, r3}
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	6808      	ldr	r0, [r1, #0]
 8002872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002876:	f01e 0f10 	tst.w	lr, #16
 800287a:	bf08      	it	eq
 800287c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002880:	f380 8809 	msr	PSP, r0
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	f3af 8000 	nop.w

08002890 <pxCurrentTCBConst>:
 8002890:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop

08002898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
        __asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	607b      	str	r3, [r7, #4]
    }
 80028b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80028b2:	f001 f8c9 	bl	8003a48 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80028b6:	f7ff fe61 	bl	800257c <xTaskIncrementTick>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80028c0:	f001 f920 	bl	8003b04 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <SysTick_Handler+0x50>)
 80028c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e001      	b.n	80028d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80028ce:	f001 f8fd 	bl	8003acc <SEGGER_SYSVIEW_RecordExitISR>
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80028dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80028f2:	f3ef 8305 	mrs	r3, IPSR
 80028f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	d914      	bls.n	8002928 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <vPortValidateInterruptPriority+0x70>)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <vPortValidateInterruptPriority+0x74>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	7afa      	ldrb	r2, [r7, #11]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20a      	bcs.n	8002928 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	607b      	str	r3, [r7, #4]
    }
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <vPortValidateInterruptPriority+0x78>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <vPortValidateInterruptPriority+0x7c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d90a      	bls.n	800294e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	603b      	str	r3, [r7, #0]
    }
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <vPortValidateInterruptPriority+0x60>
    }
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e3f0 	.word	0xe000e3f0
 8002960:	200000b8 	.word	0x200000b8
 8002964:	e000ed0c 	.word	0xe000ed0c
 8002968:	200000bc 	.word	0x200000bc

0800296c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002970:	4803      	ldr	r0, [pc, #12]	; (8002980 <_cbSendSystemDesc+0x14>)
 8002972:	f001 f813 	bl	800399c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002976:	4803      	ldr	r0, [pc, #12]	; (8002984 <_cbSendSystemDesc+0x18>)
 8002978:	f001 f810 	bl	800399c <SEGGER_SYSVIEW_SendSysDesc>
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	08003ec0 	.word	0x08003ec0
 8002984:	08003efc 	.word	0x08003efc

08002988 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <SEGGER_SYSVIEW_Conf+0x20>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SEGGER_SYSVIEW_Conf+0x20>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <SEGGER_SYSVIEW_Conf+0x24>)
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <SEGGER_SYSVIEW_Conf+0x28>)
 8002998:	f000 fc86 	bl	80032a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800299c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80029a0:	f000 fcc6 	bl	8003330 <SEGGER_SYSVIEW_SetRAMBase>
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000000 	.word	0x20000000
 80029ac:	0800296d 	.word	0x0800296d
 80029b0:	08003f44 	.word	0x08003f44

080029b4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	e033      	b.n	8002a28 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80029c0:	491e      	ldr	r1, [pc, #120]	; (8002a3c <_cbSendTaskList+0x88>)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	491a      	ldr	r1, [pc, #104]	; (8002a3c <_cbSendTaskList+0x88>)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3304      	adds	r3, #4
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	4c16      	ldr	r4, [pc, #88]	; (8002a3c <_cbSendTaskList+0x88>)
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4423      	add	r3, r4
 80029f0:	3308      	adds	r3, #8
 80029f2:	681c      	ldr	r4, [r3, #0]
 80029f4:	4d11      	ldr	r5, [pc, #68]	; (8002a3c <_cbSendTaskList+0x88>)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	442b      	add	r3, r5
 8002a02:	330c      	adds	r3, #12
 8002a04:	681d      	ldr	r5, [r3, #0]
 8002a06:	4e0d      	ldr	r6, [pc, #52]	; (8002a3c <_cbSendTaskList+0x88>)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4433      	add	r3, r6
 8002a14:	3310      	adds	r3, #16
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	f000 f84d 	bl	8002abc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <_cbSendTaskList+0x8c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3c6      	bcc.n	80029c0 <_cbSendTaskList+0xc>
  }
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3c:	200000c0 	.word	0x200000c0
 8002a40:	20000160 	.word	0x20000160

08002a44 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002a4a:	f7ff fd85 	bl	8002558 <xTaskGetTickCountFromISR>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	f04f 0500 	mov.w	r5, #0
 8002a6a:	015d      	lsls	r5, r3, #5
 8002a6c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002a70:	0154      	lsls	r4, r2, #5
 8002a72:	4622      	mov	r2, r4
 8002a74:	462b      	mov	r3, r5
 8002a76:	1a12      	subs	r2, r2, r0
 8002a78:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7c:	f04f 0400 	mov.w	r4, #0
 8002a80:	f04f 0500 	mov.w	r5, #0
 8002a84:	009d      	lsls	r5, r3, #2
 8002a86:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002a8a:	0094      	lsls	r4, r2, #2
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	462b      	mov	r3, r5
 8002a90:	1812      	adds	r2, r2, r0
 8002a92:	eb41 0303 	adc.w	r3, r1, r3
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	00d9      	lsls	r1, r3, #3
 8002aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa4:	00d0      	lsls	r0, r2, #3
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8002aae:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}

08002abc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	2214      	movs	r2, #20
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f9e0 	bl	8003e98 <memset>
  TaskInfo.TaskID     = TaskID;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fe5b 	bl	80037ac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002af6:	bf00      	nop
 8002af8:	3728      	adds	r7, #40	; 0x28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <_DoInit+0x98>)
 8002b08:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <_DoInit+0x9c>)
 8002b1a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <_DoInit+0xa0>)
 8002b20:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <_DoInit+0x9c>)
 8002b40:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <_DoInit+0xa4>)
 8002b46:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3307      	adds	r3, #7
 8002b64:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <_DoInit+0xa8>)
 8002b66:	6810      	ldr	r0, [r2, #0]
 8002b68:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002b6a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <_DoInit+0xac>)
 8002b72:	6810      	ldr	r0, [r2, #0]
 8002b74:	6018      	str	r0, [r3, #0]
 8002b76:	8891      	ldrh	r1, [r2, #4]
 8002b78:	7992      	ldrb	r2, [r2, #6]
 8002b7a:	8099      	strh	r1, [r3, #4]
 8002b7c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002b7e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002b88:	f3bf 8f5f 	dmb	sy
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20001720 	.word	0x20001720
 8002b9c:	08003f0c 	.word	0x08003f0c
 8002ba0:	20000164 	.word	0x20000164
 8002ba4:	20000564 	.word	0x20000564
 8002ba8:	08003f18 	.word	0x08003f18
 8002bac:	08003f1c 	.word	0x08003f1c

08002bb0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <SEGGER_RTT_ReadNoLock+0x1e>
 8002bca:	f7ff ff99 	bl	8002b00 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	3360      	adds	r3, #96	; 0x60
 8002bda:	4a37      	ldr	r2, [pc, #220]	; (8002cb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8002bdc:	4413      	add	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d92b      	bls.n	8002c54 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	bf28      	it	cs
 8002c0e:	4613      	movcs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	4413      	add	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c22:	f001 f92b 	bl	8003e7c <memcpy>
    NumBytesRead += NumBytesRem;
 8002c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4413      	add	r3, r2
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4413      	add	r3, r2
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d101      	bne.n	8002c54 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf28      	it	cs
 8002c64:	4613      	movcs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	4413      	add	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	6939      	ldr	r1, [r7, #16]
 8002c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c7e:	f001 f8fd 	bl	8003e7c <memcpy>
    NumBytesRead += NumBytesRem;
 8002c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4413      	add	r3, r2
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4413      	add	r3, r2
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3730      	adds	r7, #48	; 0x30
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20001720 	.word	0x20001720

08002cbc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <SEGGER_RTT_AllocUpBuffer+0x20>
 8002cd8:	f7ff ff12 	bl	8002b00 <_DoInit>
  SEGGER_RTT_LOCK();
 8002cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ce0:	f04f 0120 	mov.w	r1, #32
 8002ce4:	f381 8811 	msr	BASEPRI, r1
 8002ce8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002cea:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002cec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002cf2:	6939      	ldr	r1, [r7, #16]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3304      	adds	r3, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	dbeb      	blt.n	8002cf2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8002d1a:	e000      	b.n	8002d1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002d1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	da3f      	bge.n	8002da8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002d28:	6939      	ldr	r1, [r7, #16]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002d3c:	6939      	ldr	r1, [r7, #16]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	3320      	adds	r3, #32
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002d66:	6939      	ldr	r1, [r7, #16]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	3328      	adds	r3, #40	; 0x28
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002d7a:	6939      	ldr	r1, [r7, #16]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	3324      	adds	r3, #36	; 0x24
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002d8e:	6939      	ldr	r1, [r7, #16]
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	332c      	adds	r3, #44	; 0x2c
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002da2:	f3bf 8f5f 	dmb	sy
 8002da6:	e002      	b.n	8002dae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002db4:	69fb      	ldr	r3, [r7, #28]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20001720 	.word	0x20001720

08002dc4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002de0:	f7ff fe8e 	bl	8002b00 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002de6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d82c      	bhi.n	8002e48 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002dee:	f3ef 8311 	mrs	r3, BASEPRI
 8002df2:	f04f 0120 	mov.w	r1, #32
 8002df6:	f381 8811 	msr	BASEPRI, r1
 8002dfa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002e38:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	e002      	b.n	8002e4e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20001720 	.word	0x20001720

08002e5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00f      	beq.n	8002e92 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002e72:	e002      	b.n	8002e7a <_EncodeStr+0x1e>
      Len++;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	3301      	adds	r3, #1
 8002e78:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f6      	bne.n	8002e74 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d901      	bls.n	8002e92 <_EncodeStr+0x36>
      Len = Limit;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2bfe      	cmp	r3, #254	; 0xfe
 8002e96:	d806      	bhi.n	8002ea6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	60fa      	str	r2, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e011      	b.n	8002eca <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60fa      	str	r2, [r7, #12]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	0a19      	lsrs	r1, r3, #8
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60fa      	str	r2, [r7, #12]
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002ece:	e00a      	b.n	8002ee6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	1c53      	adds	r3, r2, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1c59      	adds	r1, r3, #1
 8002eda:	60f9      	str	r1, [r7, #12]
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	701a      	strb	r2, [r3, #0]
    n++;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3f0      	bcc.n	8002ed0 <_EncodeStr+0x74>
  }
  return pPayload;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <_HandleIncomingPacket+0xe0>)
 8002f1c:	7e1b      	ldrb	r3, [r3, #24]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	1cfb      	adds	r3, r7, #3
 8002f22:	2201      	movs	r2, #1
 8002f24:	4619      	mov	r1, r3
 8002f26:	f7ff fe43 	bl	8002bb0 <SEGGER_RTT_ReadNoLock>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dd54      	ble.n	8002fde <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d032      	beq.n	8002fa0 <_HandleIncomingPacket+0x8c>
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	dc42      	bgt.n	8002fc4 <_HandleIncomingPacket+0xb0>
 8002f3e:	2b07      	cmp	r3, #7
 8002f40:	dc16      	bgt.n	8002f70 <_HandleIncomingPacket+0x5c>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	dd3e      	ble.n	8002fc4 <_HandleIncomingPacket+0xb0>
 8002f46:	3b01      	subs	r3, #1
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d83b      	bhi.n	8002fc4 <_HandleIncomingPacket+0xb0>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <_HandleIncomingPacket+0x40>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f77 	.word	0x08002f77
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f83 	.word	0x08002f83
 8002f60:	08002f89 	.word	0x08002f89
 8002f64:	08002f8f 	.word	0x08002f8f
 8002f68:	08002f95 	.word	0x08002f95
 8002f6c:	08002f9b 	.word	0x08002f9b
 8002f70:	2b7f      	cmp	r3, #127	; 0x7f
 8002f72:	d036      	beq.n	8002fe2 <_HandleIncomingPacket+0xce>
 8002f74:	e026      	b.n	8002fc4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002f76:	f000 fa9f 	bl	80034b8 <SEGGER_SYSVIEW_Start>
      break;
 8002f7a:	e037      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002f7c:	f000 fb56 	bl	800362c <SEGGER_SYSVIEW_Stop>
      break;
 8002f80:	e034      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002f82:	f000 fd2f 	bl	80039e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002f86:	e031      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002f88:	f000 fcf4 	bl	8003974 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002f8c:	e02e      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002f8e:	f000 fb73 	bl	8003678 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002f92:	e02b      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002f94:	f000 ff10 	bl	8003db8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002f98:	e028      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002f9a:	f000 feef 	bl	8003d7c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002f9e:	e025      	b.n	8002fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <_HandleIncomingPacket+0xe0>)
 8002fa2:	7e1b      	ldrb	r3, [r3, #24]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	1cfb      	adds	r3, r7, #3
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4619      	mov	r1, r3
 8002fac:	f7ff fe00 	bl	8002bb0 <SEGGER_RTT_ReadNoLock>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	dd15      	ble.n	8002fe6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fe5d 	bl	8003c7c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002fc2:	e010      	b.n	8002fe6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da0e      	bge.n	8002fea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <_HandleIncomingPacket+0xe0>)
 8002fce:	7e1b      	ldrb	r3, [r3, #24]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	1cfb      	adds	r3, r7, #3
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7ff fdea 	bl	8002bb0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002fdc:	e005      	b.n	8002fea <_HandleIncomingPacket+0xd6>
    }
  }
 8002fde:	bf00      	nop
 8002fe0:	e004      	b.n	8002fec <_HandleIncomingPacket+0xd8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <_HandleIncomingPacket+0xd8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <_HandleIncomingPacket+0xd8>
      break;
 8002fea:	bf00      	nop
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000157c 	.word	0x2000157c

08002ff8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002ffe:	2301      	movs	r3, #1
 8003000:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	e00b      	b.n	800302c <_TrySendOverflowPacket+0x34>
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800301e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	09db      	lsrs	r3, r3, #7
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	2b7f      	cmp	r3, #127	; 0x7f
 8003030:	d8f0      	bhi.n	8003014 <_TrySendOverflowPacket+0x1c>
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <_TrySendOverflowPacket+0xe0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	e00b      	b.n	8003074 <_TrySendOverflowPacket+0x7c>
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	1c59      	adds	r1, r3, #1
 8003064:	6279      	str	r1, [r7, #36]	; 0x24
 8003066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	09db      	lsrs	r3, r3, #7
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	2b7f      	cmp	r3, #127	; 0x7f
 8003078:	d8f0      	bhi.n	800305c <_TrySendOverflowPacket+0x64>
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	627a      	str	r2, [r7, #36]	; 0x24
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	4618      	mov	r0, r3
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	461a      	mov	r2, r3
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	4619      	mov	r1, r3
 800309c:	f7fd f8b8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80030a0:	4603      	mov	r3, r0
 80030a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e004      	b.n	80030c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a03      	ldr	r2, [pc, #12]	; (80030d4 <_TrySendOverflowPacket+0xdc>)
 80030c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80030c8:	693b      	ldr	r3, [r7, #16]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3730      	adds	r7, #48	; 0x30
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000157c 	.word	0x2000157c
 80030d8:	e0001004 	.word	0xe0001004

080030dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <_SendPacket+0x1c0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d010      	beq.n	8003112 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80030f0:	4b6a      	ldr	r3, [pc, #424]	; (800329c <_SendPacket+0x1c0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a3 	beq.w	8003240 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <_SendPacket+0x1c0>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d109      	bne.n	8003116 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003102:	f7ff ff79 	bl	8002ff8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003106:	4b65      	ldr	r3, [pc, #404]	; (800329c <_SendPacket+0x1c0>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	f040 809a 	bne.w	8003244 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003110:	e001      	b.n	8003116 <_SendPacket+0x3a>
    goto Send;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <_SendPacket+0x3c>
Send:
 8003116:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b1f      	cmp	r3, #31
 800311c:	d809      	bhi.n	8003132 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800311e:	4b5f      	ldr	r3, [pc, #380]	; (800329c <_SendPacket+0x1c0>)
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 808b 	bne.w	8003248 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b17      	cmp	r3, #23
 8003136:	d807      	bhi.n	8003148 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3b01      	subs	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e03d      	b.n	80031c4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b7f      	cmp	r3, #127	; 0x7f
 8003154:	d912      	bls.n	800317c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	09da      	lsrs	r2, r3, #7
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b01      	subs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	3a01      	subs	r2, #1
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e006      	b.n	800318a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b7f      	cmp	r3, #127	; 0x7f
 800318e:	d912      	bls.n	80031b6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	09da      	lsrs	r2, r3, #7
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3b01      	subs	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	3a01      	subs	r2, #1
 80031a8:	60fa      	str	r2, [r7, #12]
 80031aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	e006      	b.n	80031c4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <_SendPacket+0x1c4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80031ca:	4b34      	ldr	r3, [pc, #208]	; (800329c <_SendPacket+0x1c0>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	e00b      	b.n	80031f6 <_SendPacket+0x11a>
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1c59      	adds	r1, r3, #1
 80031e6:	6279      	str	r1, [r7, #36]	; 0x24
 80031e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	09db      	lsrs	r3, r3, #7
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	2b7f      	cmp	r3, #127	; 0x7f
 80031fa:	d8f0      	bhi.n	80031de <_SendPacket+0x102>
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	627a      	str	r2, [r7, #36]	; 0x24
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800320c:	4b23      	ldr	r3, [pc, #140]	; (800329c <_SendPacket+0x1c0>)
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	4618      	mov	r0, r3
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	461a      	mov	r2, r3
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	f7fc fff8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003220:	4603      	mov	r3, r0
 8003222:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <_SendPacket+0x1c0>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	60d3      	str	r3, [r2, #12]
 8003230:	e00b      	b.n	800324a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <_SendPacket+0x1c0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <_SendPacket+0x1c0>)
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e004      	b.n	800324a <_SendPacket+0x16e>
    goto SendDone;
 8003240:	bf00      	nop
 8003242:	e002      	b.n	800324a <_SendPacket+0x16e>
      goto SendDone;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <_SendPacket+0x16e>
      goto SendDone;
 8003248:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800324a:	4b14      	ldr	r3, [pc, #80]	; (800329c <_SendPacket+0x1c0>)
 800324c:	7e1b      	ldrb	r3, [r3, #24]
 800324e:	4619      	mov	r1, r3
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <_SendPacket+0x1c8>)
 8003252:	460b      	mov	r3, r1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	440b      	add	r3, r1
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	336c      	adds	r3, #108	; 0x6c
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <_SendPacket+0x1c0>)
 8003262:	7e1b      	ldrb	r3, [r3, #24]
 8003264:	4618      	mov	r0, r3
 8003266:	490f      	ldr	r1, [pc, #60]	; (80032a4 <_SendPacket+0x1c8>)
 8003268:	4603      	mov	r3, r0
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4403      	add	r3, r0
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3370      	adds	r3, #112	; 0x70
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d00b      	beq.n	8003292 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <_SendPacket+0x1c0>)
 800327c:	789b      	ldrb	r3, [r3, #2]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <_SendPacket+0x1c0>)
 8003284:	2201      	movs	r2, #1
 8003286:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003288:	f7ff fe44 	bl	8002f14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <_SendPacket+0x1c0>)
 800328e:	2200      	movs	r2, #0
 8003290:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000157c 	.word	0x2000157c
 80032a0:	e0001004 	.word	0xe0001004
 80032a4:	20001720 	.word	0x20001720

080032a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80032b6:	2300      	movs	r3, #0
 80032b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032bc:	4917      	ldr	r1, [pc, #92]	; (800331c <SEGGER_SYSVIEW_Init+0x74>)
 80032be:	4818      	ldr	r0, [pc, #96]	; (8003320 <SEGGER_SYSVIEW_Init+0x78>)
 80032c0:	f7ff fcfc 	bl	8002cbc <SEGGER_RTT_AllocUpBuffer>
 80032c4:	4603      	mov	r3, r0
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032ce:	785a      	ldrb	r2, [r3, #1]
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032d6:	7e1b      	ldrb	r3, [r3, #24]
 80032d8:	4618      	mov	r0, r3
 80032da:	2300      	movs	r3, #0
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2308      	movs	r3, #8
 80032e0:	4a11      	ldr	r2, [pc, #68]	; (8003328 <SEGGER_SYSVIEW_Init+0x80>)
 80032e2:	490f      	ldr	r1, [pc, #60]	; (8003320 <SEGGER_SYSVIEW_Init+0x78>)
 80032e4:	f7ff fd6e 	bl	8002dc4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <SEGGER_SYSVIEW_Init+0x84>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003308:	4a06      	ldr	r2, [pc, #24]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <SEGGER_SYSVIEW_Init+0x7c>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000574 	.word	0x20000574
 8003320:	08003f24 	.word	0x08003f24
 8003324:	2000157c 	.word	0x2000157c
 8003328:	20001574 	.word	0x20001574
 800332c:	e0001004 	.word	0xe0001004

08003330 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6113      	str	r3, [r2, #16]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	2000157c 	.word	0x2000157c

08003350 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003358:	f3ef 8311 	mrs	r3, BASEPRI
 800335c:	f04f 0120 	mov.w	r1, #32
 8003360:	f381 8811 	msr	BASEPRI, r1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4808      	ldr	r0, [pc, #32]	; (8003388 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003368:	f7ff fdc8 	bl	8002efc <_PreparePacket>
 800336c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f7ff feb2 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f383 8811 	msr	BASEPRI, r3
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200015ac 	.word	0x200015ac

0800338c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003396:	f3ef 8311 	mrs	r3, BASEPRI
 800339a:	f04f 0120 	mov.w	r1, #32
 800339e:	f381 8811 	msr	BASEPRI, r1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	4816      	ldr	r0, [pc, #88]	; (8003400 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80033a6:	f7ff fda9 	bl	8002efc <_PreparePacket>
 80033aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e00b      	b.n	80033d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	1c59      	adds	r1, r3, #1
 80033c2:	61f9      	str	r1, [r7, #28]
 80033c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	09db      	lsrs	r3, r3, #7
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b7f      	cmp	r3, #127	; 0x7f
 80033d6:	d8f0      	bhi.n	80033ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	61fa      	str	r2, [r7, #28]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	6938      	ldr	r0, [r7, #16]
 80033ee:	f7ff fe75 	bl	80030dc <_SendPacket>
  RECORD_END();
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f383 8811 	msr	BASEPRI, r3
}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200015ac 	.word	0x200015ac

08003404 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003410:	f3ef 8311 	mrs	r3, BASEPRI
 8003414:	f04f 0120 	mov.w	r1, #32
 8003418:	f381 8811 	msr	BASEPRI, r1
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	4825      	ldr	r0, [pc, #148]	; (80034b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003420:	f7ff fd6c 	bl	8002efc <_PreparePacket>
 8003424:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	e00b      	b.n	800344c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	b2da      	uxtb	r2, r3
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	1c59      	adds	r1, r3, #1
 800343c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800343e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	09db      	lsrs	r3, r3, #7
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	2b7f      	cmp	r3, #127	; 0x7f
 8003450:	d8f0      	bhi.n	8003434 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	e00b      	b.n	8003484 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	6279      	str	r1, [r7, #36]	; 0x24
 8003476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	09db      	lsrs	r3, r3, #7
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b7f      	cmp	r3, #127	; 0x7f
 8003488:	d8f0      	bhi.n	800346c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	627a      	str	r2, [r7, #36]	; 0x24
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	6979      	ldr	r1, [r7, #20]
 800349e:	69b8      	ldr	r0, [r7, #24]
 80034a0:	f7ff fe1c 	bl	80030dc <_SendPacket>
  RECORD_END();
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f383 8811 	msr	BASEPRI, r3
}
 80034aa:	bf00      	nop
 80034ac:	3730      	adds	r7, #48	; 0x30
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200015ac 	.word	0x200015ac

080034b8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80034be:	4b58      	ldr	r3, [pc, #352]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80034c4:	f3ef 8311 	mrs	r3, BASEPRI
 80034c8:	f04f 0120 	mov.w	r1, #32
 80034cc:	f381 8811 	msr	BASEPRI, r1
 80034d0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80034d2:	4b53      	ldr	r3, [pc, #332]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	220a      	movs	r2, #10
 80034d8:	4952      	ldr	r1, [pc, #328]	; (8003624 <SEGGER_SYSVIEW_Start+0x16c>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc fe98 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80034e6:	200a      	movs	r0, #10
 80034e8:	f7ff ff32 	bl	8003350 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80034ec:	f3ef 8311 	mrs	r3, BASEPRI
 80034f0:	f04f 0120 	mov.w	r1, #32
 80034f4:	f381 8811 	msr	BASEPRI, r1
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	484b      	ldr	r0, [pc, #300]	; (8003628 <SEGGER_SYSVIEW_Start+0x170>)
 80034fc:	f7ff fcfe 	bl	8002efc <_PreparePacket>
 8003500:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350a:	4b45      	ldr	r3, [pc, #276]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003510:	e00b      	b.n	800352a <SEGGER_SYSVIEW_Start+0x72>
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	b2da      	uxtb	r2, r3
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800351c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	09db      	lsrs	r3, r3, #7
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	2b7f      	cmp	r3, #127	; 0x7f
 800352e:	d8f0      	bhi.n	8003512 <SEGGER_SYSVIEW_Start+0x5a>
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	e00b      	b.n	8003564 <SEGGER_SYSVIEW_Start+0xac>
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	6279      	str	r1, [r7, #36]	; 0x24
 8003556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	09db      	lsrs	r3, r3, #7
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2b7f      	cmp	r3, #127	; 0x7f
 8003568:	d8f0      	bhi.n	800354c <SEGGER_SYSVIEW_Start+0x94>
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	627a      	str	r2, [r7, #36]	; 0x24
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e00b      	b.n	800359e <SEGGER_SYSVIEW_Start+0xe6>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	1c59      	adds	r1, r3, #1
 800358e:	61f9      	str	r1, [r7, #28]
 8003590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	09db      	lsrs	r3, r3, #7
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b7f      	cmp	r3, #127	; 0x7f
 80035a2:	d8f0      	bhi.n	8003586 <SEGGER_SYSVIEW_Start+0xce>
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	61fa      	str	r2, [r7, #28]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e00b      	b.n	80035d6 <SEGGER_SYSVIEW_Start+0x11e>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	6179      	str	r1, [r7, #20]
 80035c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	09db      	lsrs	r3, r3, #7
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b7f      	cmp	r3, #127	; 0x7f
 80035da:	d8f0      	bhi.n	80035be <SEGGER_SYSVIEW_Start+0x106>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	617a      	str	r2, [r7, #20]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80035ec:	2218      	movs	r2, #24
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fd73 	bl	80030dc <_SendPacket>
      RECORD_END();
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <SEGGER_SYSVIEW_Start+0x168>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800360a:	f000 f9eb 	bl	80039e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800360e:	f000 f9b1 	bl	8003974 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003612:	f000 fbd1 	bl	8003db8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003616:	bf00      	nop
 8003618:	3730      	adds	r7, #48	; 0x30
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000157c 	.word	0x2000157c
 8003624:	08003f4c 	.word	0x08003f4c
 8003628:	200015ac 	.word	0x200015ac

0800362c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003632:	f3ef 8311 	mrs	r3, BASEPRI
 8003636:	f04f 0120 	mov.w	r1, #32
 800363a:	f381 8811 	msr	BASEPRI, r1
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	480b      	ldr	r0, [pc, #44]	; (8003670 <SEGGER_SYSVIEW_Stop+0x44>)
 8003642:	f7ff fc5b 	bl	8002efc <_PreparePacket>
 8003646:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <SEGGER_SYSVIEW_Stop+0x48>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003650:	220b      	movs	r2, #11
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	f7ff fd41 	bl	80030dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SEGGER_SYSVIEW_Stop+0x48>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f383 8811 	msr	BASEPRI, r3
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200015ac 	.word	0x200015ac
 8003674:	2000157c 	.word	0x2000157c

08003678 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b08c      	sub	sp, #48	; 0x30
 800367c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800367e:	f3ef 8311 	mrs	r3, BASEPRI
 8003682:	f04f 0120 	mov.w	r1, #32
 8003686:	f381 8811 	msr	BASEPRI, r1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	4845      	ldr	r0, [pc, #276]	; (80037a4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800368e:	f7ff fc35 	bl	8002efc <_PreparePacket>
 8003692:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	e00b      	b.n	80036bc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80036ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	09db      	lsrs	r3, r3, #7
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	2b7f      	cmp	r3, #127	; 0x7f
 80036c0:	d8f0      	bhi.n	80036a4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	e00b      	b.n	80036f6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	1c59      	adds	r1, r3, #1
 80036e6:	6279      	str	r1, [r7, #36]	; 0x24
 80036e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	09db      	lsrs	r3, r3, #7
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2b7f      	cmp	r3, #127	; 0x7f
 80036fa:	d8f0      	bhi.n	80036de <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	627a      	str	r2, [r7, #36]	; 0x24
 8003702:	6a3a      	ldr	r2, [r7, #32]
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e00b      	b.n	8003730 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	1c59      	adds	r1, r3, #1
 8003720:	61f9      	str	r1, [r7, #28]
 8003722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	09db      	lsrs	r3, r3, #7
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b7f      	cmp	r3, #127	; 0x7f
 8003734:	d8f0      	bhi.n	8003718 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	61fa      	str	r2, [r7, #28]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e00b      	b.n	8003768 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	6179      	str	r1, [r7, #20]
 800375a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	09db      	lsrs	r3, r3, #7
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b7f      	cmp	r3, #127	; 0x7f
 800376c:	d8f0      	bhi.n	8003750 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	617a      	str	r2, [r7, #20]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800377e:	2218      	movs	r2, #24
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	68b8      	ldr	r0, [r7, #8]
 8003784:	f7ff fcaa 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	4798      	blx	r3
  }
}
 800379c:	bf00      	nop
 800379e:	3730      	adds	r7, #48	; 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200015ac 	.word	0x200015ac
 80037a8:	2000157c 	.word	0x2000157c

080037ac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b092      	sub	sp, #72	; 0x48
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80037b4:	f3ef 8311 	mrs	r3, BASEPRI
 80037b8:	f04f 0120 	mov.w	r1, #32
 80037bc:	f381 8811 	msr	BASEPRI, r1
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	486a      	ldr	r0, [pc, #424]	; (800396c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80037c4:	f7ff fb9a 	bl	8002efc <_PreparePacket>
 80037c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b66      	ldr	r3, [pc, #408]	; (8003970 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	643b      	str	r3, [r7, #64]	; 0x40
 80037de:	e00b      	b.n	80037f8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80037e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e6:	1c59      	adds	r1, r3, #1
 80037e8:	6479      	str	r1, [r7, #68]	; 0x44
 80037ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f4:	09db      	lsrs	r3, r3, #7
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
 80037f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fa:	2b7f      	cmp	r3, #127	; 0x7f
 80037fc:	d8f0      	bhi.n	80037e0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80037fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	647a      	str	r2, [r7, #68]	; 0x44
 8003804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
 8003818:	e00b      	b.n	8003832 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	b2da      	uxtb	r2, r3
 800381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003820:	1c59      	adds	r1, r3, #1
 8003822:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	09db      	lsrs	r3, r3, #7
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	2b7f      	cmp	r3, #127	; 0x7f
 8003836:	d8f0      	bhi.n	800381a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800383e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003846:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	4619      	mov	r1, r3
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fb03 	bl	8002e5c <_EncodeStr>
 8003856:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003858:	2209      	movs	r2, #9
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	6938      	ldr	r0, [r7, #16]
 800385e:	f7ff fc3d 	bl	80030dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b40      	ldr	r3, [pc, #256]	; (8003970 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
 8003876:	e00b      	b.n	8003890 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	b2da      	uxtb	r2, r3
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	1c59      	adds	r1, r3, #1
 8003880:	6379      	str	r1, [r7, #52]	; 0x34
 8003882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	09db      	lsrs	r3, r3, #7
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	2b7f      	cmp	r3, #127	; 0x7f
 8003894:	d8f0      	bhi.n	8003878 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	637a      	str	r2, [r7, #52]	; 0x34
 800389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b0:	e00b      	b.n	80038ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	1c59      	adds	r1, r3, #1
 80038ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	09db      	lsrs	r3, r3, #7
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	2b7f      	cmp	r3, #127	; 0x7f
 80038ce:	d8f0      	bhi.n	80038b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	e00b      	b.n	8003904 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	6279      	str	r1, [r7, #36]	; 0x24
 80038f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	09db      	lsrs	r3, r3, #7
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2b7f      	cmp	r3, #127	; 0x7f
 8003908:	d8f0      	bhi.n	80038ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	627a      	str	r2, [r7, #36]	; 0x24
 8003910:	6a3a      	ldr	r2, [r7, #32]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e00b      	b.n	800393c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	61f9      	str	r1, [r7, #28]
 800392e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	09db      	lsrs	r3, r3, #7
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b7f      	cmp	r3, #127	; 0x7f
 8003940:	d8f0      	bhi.n	8003924 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	61fa      	str	r2, [r7, #28]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003952:	2215      	movs	r2, #21
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	6938      	ldr	r0, [r7, #16]
 8003958:	f7ff fbc0 	bl	80030dc <_SendPacket>
  RECORD_END();
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f383 8811 	msr	BASEPRI, r3
}
 8003962:	bf00      	nop
 8003964:	3748      	adds	r7, #72	; 0x48
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200015ac 	.word	0x200015ac
 8003970:	2000157c 	.word	0x2000157c

08003974 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800398a:	4b03      	ldr	r3, [pc, #12]	; (8003998 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4798      	blx	r3
  }
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	2000157c 	.word	0x2000157c

0800399c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80039a4:	f3ef 8311 	mrs	r3, BASEPRI
 80039a8:	f04f 0120 	mov.w	r1, #32
 80039ac:	f381 8811 	msr	BASEPRI, r1
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	480b      	ldr	r0, [pc, #44]	; (80039e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80039b4:	f7ff faa2 	bl	8002efc <_PreparePacket>
 80039b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	6938      	ldr	r0, [r7, #16]
 80039c0:	f7ff fa4c 	bl	8002e5c <_EncodeStr>
 80039c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80039c6:	220e      	movs	r2, #14
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	6938      	ldr	r0, [r7, #16]
 80039cc:	f7ff fb86 	bl	80030dc <_SendPacket>
  RECORD_END();
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f383 8811 	msr	BASEPRI, r3
}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200015ac 	.word	0x200015ac

080039e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01a      	beq.n	8003a28 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4798      	blx	r3
 8003a04:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003a08:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	000a      	movs	r2, r1
 8003a18:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4621      	mov	r1, r4
 8003a20:	200d      	movs	r0, #13
 8003a22:	f7ff fcef 	bl	8003404 <SEGGER_SYSVIEW_RecordU32x2>
 8003a26:	e006      	b.n	8003a36 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	200c      	movs	r0, #12
 8003a30:	f7ff fcac 	bl	800338c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd90      	pop	{r4, r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000157c 	.word	0x2000157c
 8003a44:	e0001004 	.word	0xe0001004

08003a48 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a52:	f04f 0120 	mov.w	r1, #32
 8003a56:	f381 8811 	msr	BASEPRI, r1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	4819      	ldr	r0, [pc, #100]	; (8003ac4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003a5e:	f7ff fa4d 	bl	8002efc <_PreparePacket>
 8003a62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a70:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e00b      	b.n	8003a94 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	6179      	str	r1, [r7, #20]
 8003a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	09db      	lsrs	r3, r3, #7
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b7f      	cmp	r3, #127	; 0x7f
 8003a98:	d8f0      	bhi.n	8003a7c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	617a      	str	r2, [r7, #20]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003aaa:	2202      	movs	r2, #2
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68b8      	ldr	r0, [r7, #8]
 8003ab0:	f7ff fb14 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f383 8811 	msr	BASEPRI, r3
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200015ac 	.word	0x200015ac
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad6:	f04f 0120 	mov.w	r1, #32
 8003ada:	f381 8811 	msr	BASEPRI, r1
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	4807      	ldr	r0, [pc, #28]	; (8003b00 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003ae2:	f7ff fa0b 	bl	8002efc <_PreparePacket>
 8003ae6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003ae8:	2203      	movs	r2, #3
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	f7ff faf5 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f383 8811 	msr	BASEPRI, r3
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	200015ac 	.word	0x200015ac

08003b04 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0e:	f04f 0120 	mov.w	r1, #32
 8003b12:	f381 8811 	msr	BASEPRI, r1
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	4807      	ldr	r0, [pc, #28]	; (8003b38 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003b1a:	f7ff f9ef 	bl	8002efc <_PreparePacket>
 8003b1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003b20:	2212      	movs	r2, #18
 8003b22:	6839      	ldr	r1, [r7, #0]
 8003b24:	6838      	ldr	r0, [r7, #0]
 8003b26:	f7ff fad9 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f383 8811 	msr	BASEPRI, r3
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200015ac 	.word	0x200015ac

08003b3c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b42:	f3ef 8311 	mrs	r3, BASEPRI
 8003b46:	f04f 0120 	mov.w	r1, #32
 8003b4a:	f381 8811 	msr	BASEPRI, r1
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003b52:	f7ff f9d3 	bl	8002efc <_PreparePacket>
 8003b56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003b58:	2211      	movs	r2, #17
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	6838      	ldr	r0, [r7, #0]
 8003b5e:	f7ff fabd 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f383 8811 	msr	BASEPRI, r3
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200015ac 	.word	0x200015ac

08003b74 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b80:	f04f 0120 	mov.w	r1, #32
 8003b84:	f381 8811 	msr	BASEPRI, r1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	4819      	ldr	r0, [pc, #100]	; (8003bf0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003b8c:	f7ff f9b6 	bl	8002efc <_PreparePacket>
 8003b90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e00b      	b.n	8003bc2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	1c59      	adds	r1, r3, #1
 8003bb2:	61f9      	str	r1, [r7, #28]
 8003bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	09db      	lsrs	r3, r3, #7
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc6:	d8f0      	bhi.n	8003baa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003bd8:	2204      	movs	r2, #4
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	6938      	ldr	r0, [r7, #16]
 8003bde:	f7ff fa7d 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f383 8811 	msr	BASEPRI, r3
}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200015ac 	.word	0x200015ac
 8003bf4:	2000157c 	.word	0x2000157c

08003bf8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c00:	f3ef 8311 	mrs	r3, BASEPRI
 8003c04:	f04f 0120 	mov.w	r1, #32
 8003c08:	f381 8811 	msr	BASEPRI, r1
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	4819      	ldr	r0, [pc, #100]	; (8003c74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003c10:	f7ff f974 	bl	8002efc <_PreparePacket>
 8003c14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e00b      	b.n	8003c46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	1c59      	adds	r1, r3, #1
 8003c36:	61f9      	str	r1, [r7, #28]
 8003c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	09db      	lsrs	r3, r3, #7
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b7f      	cmp	r3, #127	; 0x7f
 8003c4a:	d8f0      	bhi.n	8003c2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	61fa      	str	r2, [r7, #28]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003c5c:	2206      	movs	r2, #6
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6938      	ldr	r0, [r7, #16]
 8003c62:	f7ff fa3b 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f383 8811 	msr	BASEPRI, r3
}
 8003c6c:	bf00      	nop
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	200015ac 	.word	0x200015ac
 8003c78:	2000157c 	.word	0x2000157c

08003c7c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003c86:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d06d      	beq.n	8003d6a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003c94:	2300      	movs	r3, #0
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c98:	e008      	b.n	8003cac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	3301      	adds	r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3f2      	bcc.n	8003c9a <SEGGER_SYSVIEW_SendModule+0x1e>
 8003cb4:	e000      	b.n	8003cb8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003cb6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d055      	beq.n	8003d6a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8003cc2:	f04f 0120 	mov.w	r1, #32
 8003cc6:	f381 8811 	msr	BASEPRI, r1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	482a      	ldr	r0, [pc, #168]	; (8003d78 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003cce:	f7ff f915 	bl	8002efc <_PreparePacket>
 8003cd2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	e00b      	b.n	8003cfa <SEGGER_SYSVIEW_SendModule+0x7e>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	6279      	str	r1, [r7, #36]	; 0x24
 8003cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	09db      	lsrs	r3, r3, #7
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cfe:	d8f0      	bhi.n	8003ce2 <SEGGER_SYSVIEW_SendModule+0x66>
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	627a      	str	r2, [r7, #36]	; 0x24
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e00b      	b.n	8003d34 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	61f9      	str	r1, [r7, #28]
 8003d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	09db      	lsrs	r3, r3, #7
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b7f      	cmp	r3, #127	; 0x7f
 8003d38:	d8f0      	bhi.n	8003d1c <SEGGER_SYSVIEW_SendModule+0xa0>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	61fa      	str	r2, [r7, #28]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	4619      	mov	r1, r3
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff f882 	bl	8002e5c <_EncodeStr>
 8003d58:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003d5a:	2216      	movs	r2, #22
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	6938      	ldr	r0, [r7, #16]
 8003d60:	f7ff f9bc 	bl	80030dc <_SendPacket>
      RECORD_END();
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3730      	adds	r7, #48	; 0x30
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200015a4 	.word	0x200015a4
 8003d78:	200015ac 	.word	0x200015ac

08003d7c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00f      	beq.n	8003daa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f2      	bne.n	8003d90 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200015a4 	.word	0x200015a4

08003db8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8003dc2:	f04f 0120 	mov.w	r1, #32
 8003dc6:	f381 8811 	msr	BASEPRI, r1
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	4817      	ldr	r0, [pc, #92]	; (8003e2c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003dce:	f7ff f895 	bl	8002efc <_PreparePacket>
 8003dd2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	e00b      	b.n	8003dfc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1c59      	adds	r1, r3, #1
 8003dec:	6179      	str	r1, [r7, #20]
 8003dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	09db      	lsrs	r3, r3, #7
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8003e00:	d8f0      	bhi.n	8003de4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	617a      	str	r2, [r7, #20]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003e12:	221b      	movs	r2, #27
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68b8      	ldr	r0, [r7, #8]
 8003e18:	f7ff f960 	bl	80030dc <_SendPacket>
  RECORD_END();
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f383 8811 	msr	BASEPRI, r3
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200015ac 	.word	0x200015ac
 8003e30:	200015a8 	.word	0x200015a8

08003e34 <__libc_init_array>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4d0d      	ldr	r5, [pc, #52]	; (8003e6c <__libc_init_array+0x38>)
 8003e38:	4c0d      	ldr	r4, [pc, #52]	; (8003e70 <__libc_init_array+0x3c>)
 8003e3a:	1b64      	subs	r4, r4, r5
 8003e3c:	10a4      	asrs	r4, r4, #2
 8003e3e:	2600      	movs	r6, #0
 8003e40:	42a6      	cmp	r6, r4
 8003e42:	d109      	bne.n	8003e58 <__libc_init_array+0x24>
 8003e44:	4d0b      	ldr	r5, [pc, #44]	; (8003e74 <__libc_init_array+0x40>)
 8003e46:	4c0c      	ldr	r4, [pc, #48]	; (8003e78 <__libc_init_array+0x44>)
 8003e48:	f000 f82e 	bl	8003ea8 <_init>
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	2600      	movs	r6, #0
 8003e52:	42a6      	cmp	r6, r4
 8003e54:	d105      	bne.n	8003e62 <__libc_init_array+0x2e>
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5c:	4798      	blx	r3
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7ee      	b.n	8003e40 <__libc_init_array+0xc>
 8003e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e66:	4798      	blx	r3
 8003e68:	3601      	adds	r6, #1
 8003e6a:	e7f2      	b.n	8003e52 <__libc_init_array+0x1e>
 8003e6c:	08003f60 	.word	0x08003f60
 8003e70:	08003f60 	.word	0x08003f60
 8003e74:	08003f60 	.word	0x08003f60
 8003e78:	08003f64 	.word	0x08003f64

08003e7c <memcpy>:
 8003e7c:	440a      	add	r2, r1
 8003e7e:	4291      	cmp	r1, r2
 8003e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e84:	d100      	bne.n	8003e88 <memcpy+0xc>
 8003e86:	4770      	bx	lr
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e92:	4291      	cmp	r1, r2
 8003e94:	d1f9      	bne.n	8003e8a <memcpy+0xe>
 8003e96:	bd10      	pop	{r4, pc}

08003e98 <memset>:
 8003e98:	4402      	add	r2, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <_init>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr

08003eb4 <_fini>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr
